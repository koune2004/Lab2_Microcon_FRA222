
Lab2_Microcon_FRA222.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d34  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008f0c  08008f0c  00018f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f4c  08008f4c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008f4c  08008f4c  00018f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f54  08008f54  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f54  08008f54  00018f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f58  08008f58  00018f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008f5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000078  08008fd4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08008fd4  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c2d  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a6d  00000000  00000000  00037d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  0003a788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103a  00000000  00000000  0003bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b6f  00000000  00000000  0003cc82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017efe  00000000  00000000  000657f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001139e0  00000000  00000000  0007d6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005df0  00000000  00000000  001910d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00196ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008ef4 	.word	0x08008ef4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	08008ef4 	.word	0x08008ef4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b970 	b.w	8000e88 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9e08      	ldr	r6, [sp, #32]
 8000bc6:	460d      	mov	r5, r1
 8000bc8:	4604      	mov	r4, r0
 8000bca:	460f      	mov	r7, r1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d14a      	bne.n	8000c66 <__udivmoddi4+0xa6>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4694      	mov	ip, r2
 8000bd4:	d965      	bls.n	8000ca2 <__udivmoddi4+0xe2>
 8000bd6:	fab2 f382 	clz	r3, r2
 8000bda:	b143      	cbz	r3, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000be0:	f1c3 0220 	rsb	r2, r3, #32
 8000be4:	409f      	lsls	r7, r3
 8000be6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bea:	4317      	orrs	r7, r2
 8000bec:	409c      	lsls	r4, r3
 8000bee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bf2:	fa1f f58c 	uxth.w	r5, ip
 8000bf6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bfa:	0c22      	lsrs	r2, r4, #16
 8000bfc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c00:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c04:	fb01 f005 	mul.w	r0, r1, r5
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	d90a      	bls.n	8000c22 <__udivmoddi4+0x62>
 8000c0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c10:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c14:	f080 811c 	bcs.w	8000e50 <__udivmoddi4+0x290>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f240 8119 	bls.w	8000e50 <__udivmoddi4+0x290>
 8000c1e:	3902      	subs	r1, #2
 8000c20:	4462      	add	r2, ip
 8000c22:	1a12      	subs	r2, r2, r0
 8000c24:	b2a4      	uxth	r4, r4
 8000c26:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c2a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c32:	fb00 f505 	mul.w	r5, r0, r5
 8000c36:	42a5      	cmp	r5, r4
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x90>
 8000c3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c42:	f080 8107 	bcs.w	8000e54 <__udivmoddi4+0x294>
 8000c46:	42a5      	cmp	r5, r4
 8000c48:	f240 8104 	bls.w	8000e54 <__udivmoddi4+0x294>
 8000c4c:	4464      	add	r4, ip
 8000c4e:	3802      	subs	r0, #2
 8000c50:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c54:	1b64      	subs	r4, r4, r5
 8000c56:	2100      	movs	r1, #0
 8000c58:	b11e      	cbz	r6, 8000c62 <__udivmoddi4+0xa2>
 8000c5a:	40dc      	lsrs	r4, r3
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0xbc>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	f000 80ed 	beq.w	8000e4a <__udivmoddi4+0x28a>
 8000c70:	2100      	movs	r1, #0
 8000c72:	e9c6 0500 	strd	r0, r5, [r6]
 8000c76:	4608      	mov	r0, r1
 8000c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7c:	fab3 f183 	clz	r1, r3
 8000c80:	2900      	cmp	r1, #0
 8000c82:	d149      	bne.n	8000d18 <__udivmoddi4+0x158>
 8000c84:	42ab      	cmp	r3, r5
 8000c86:	d302      	bcc.n	8000c8e <__udivmoddi4+0xce>
 8000c88:	4282      	cmp	r2, r0
 8000c8a:	f200 80f8 	bhi.w	8000e7e <__udivmoddi4+0x2be>
 8000c8e:	1a84      	subs	r4, r0, r2
 8000c90:	eb65 0203 	sbc.w	r2, r5, r3
 8000c94:	2001      	movs	r0, #1
 8000c96:	4617      	mov	r7, r2
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d0e2      	beq.n	8000c62 <__udivmoddi4+0xa2>
 8000c9c:	e9c6 4700 	strd	r4, r7, [r6]
 8000ca0:	e7df      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000ca2:	b902      	cbnz	r2, 8000ca6 <__udivmoddi4+0xe6>
 8000ca4:	deff      	udf	#255	; 0xff
 8000ca6:	fab2 f382 	clz	r3, r2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f040 8090 	bne.w	8000dd0 <__udivmoddi4+0x210>
 8000cb0:	1a8a      	subs	r2, r1, r2
 8000cb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	2101      	movs	r1, #1
 8000cbc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cc0:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc4:	0c22      	lsrs	r2, r4, #16
 8000cc6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cca:	fb0e f005 	mul.w	r0, lr, r5
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x124>
 8000cd2:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x122>
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	f200 80cb 	bhi.w	8000e78 <__udivmoddi4+0x2b8>
 8000ce2:	4645      	mov	r5, r8
 8000ce4:	1a12      	subs	r2, r2, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cec:	fb07 2210 	mls	r2, r7, r0, r2
 8000cf0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x14e>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d04:	d202      	bcs.n	8000d0c <__udivmoddi4+0x14c>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f200 80bb 	bhi.w	8000e82 <__udivmoddi4+0x2c2>
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d16:	e79f      	b.n	8000c58 <__udivmoddi4+0x98>
 8000d18:	f1c1 0720 	rsb	r7, r1, #32
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d26:	fa05 f401 	lsl.w	r4, r5, r1
 8000d2a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2e:	40fd      	lsrs	r5, r7
 8000d30:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d34:	4323      	orrs	r3, r4
 8000d36:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d3a:	fa1f fe8c 	uxth.w	lr, ip
 8000d3e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d42:	0c1c      	lsrs	r4, r3, #16
 8000d44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d48:	fb08 f50e 	mul.w	r5, r8, lr
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d52:	fa00 f001 	lsl.w	r0, r0, r1
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b0>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d60:	f080 8088 	bcs.w	8000e74 <__udivmoddi4+0x2b4>
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	f240 8085 	bls.w	8000e74 <__udivmoddi4+0x2b4>
 8000d6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6e:	4464      	add	r4, ip
 8000d70:	1b64      	subs	r4, r4, r5
 8000d72:	b29d      	uxth	r5, r3
 8000d74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d78:	fb09 4413 	mls	r4, r9, r3, r4
 8000d7c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d80:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d84:	45a6      	cmp	lr, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1da>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d90:	d26c      	bcs.n	8000e6c <__udivmoddi4+0x2ac>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	d96a      	bls.n	8000e6c <__udivmoddi4+0x2ac>
 8000d96:	3b02      	subs	r3, #2
 8000d98:	4464      	add	r4, ip
 8000d9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9e:	fba3 9502 	umull	r9, r5, r3, r2
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	42ac      	cmp	r4, r5
 8000da8:	46c8      	mov	r8, r9
 8000daa:	46ae      	mov	lr, r5
 8000dac:	d356      	bcc.n	8000e5c <__udivmoddi4+0x29c>
 8000dae:	d053      	beq.n	8000e58 <__udivmoddi4+0x298>
 8000db0:	b156      	cbz	r6, 8000dc8 <__udivmoddi4+0x208>
 8000db2:	ebb0 0208 	subs.w	r2, r0, r8
 8000db6:	eb64 040e 	sbc.w	r4, r4, lr
 8000dba:	fa04 f707 	lsl.w	r7, r4, r7
 8000dbe:	40ca      	lsrs	r2, r1
 8000dc0:	40cc      	lsrs	r4, r1
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	2100      	movs	r1, #0
 8000dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd0:	f1c3 0120 	rsb	r1, r3, #32
 8000dd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd8:	fa20 f201 	lsr.w	r2, r0, r1
 8000ddc:	fa25 f101 	lsr.w	r1, r5, r1
 8000de0:	409d      	lsls	r5, r3
 8000de2:	432a      	orrs	r2, r5
 8000de4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de8:	fa1f fe8c 	uxth.w	lr, ip
 8000dec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df0:	fb07 1510 	mls	r5, r7, r0, r1
 8000df4:	0c11      	lsrs	r1, r2, #16
 8000df6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dfa:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfe:	428d      	cmp	r5, r1
 8000e00:	fa04 f403 	lsl.w	r4, r4, r3
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x258>
 8000e06:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0e:	d22f      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e10:	428d      	cmp	r5, r1
 8000e12:	d92d      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e14:	3802      	subs	r0, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	1b49      	subs	r1, r1, r5
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e20:	fb07 1115 	mls	r1, r7, r5, r1
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	fb05 f10e 	mul.w	r1, r5, lr
 8000e2c:	4291      	cmp	r1, r2
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x282>
 8000e30:	eb1c 0202 	adds.w	r2, ip, r2
 8000e34:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e38:	d216      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000e3a:	4291      	cmp	r1, r2
 8000e3c:	d914      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000e3e:	3d02      	subs	r5, #2
 8000e40:	4462      	add	r2, ip
 8000e42:	1a52      	subs	r2, r2, r1
 8000e44:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e48:	e738      	b.n	8000cbc <__udivmoddi4+0xfc>
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000e50:	4639      	mov	r1, r7
 8000e52:	e6e6      	b.n	8000c22 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e6fb      	b.n	8000c50 <__udivmoddi4+0x90>
 8000e58:	4548      	cmp	r0, r9
 8000e5a:	d2a9      	bcs.n	8000db0 <__udivmoddi4+0x1f0>
 8000e5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e64:	3b01      	subs	r3, #1
 8000e66:	e7a3      	b.n	8000db0 <__udivmoddi4+0x1f0>
 8000e68:	4645      	mov	r5, r8
 8000e6a:	e7ea      	b.n	8000e42 <__udivmoddi4+0x282>
 8000e6c:	462b      	mov	r3, r5
 8000e6e:	e794      	b.n	8000d9a <__udivmoddi4+0x1da>
 8000e70:	4640      	mov	r0, r8
 8000e72:	e7d1      	b.n	8000e18 <__udivmoddi4+0x258>
 8000e74:	46d0      	mov	r8, sl
 8000e76:	e77b      	b.n	8000d70 <__udivmoddi4+0x1b0>
 8000e78:	3d02      	subs	r5, #2
 8000e7a:	4462      	add	r2, ip
 8000e7c:	e732      	b.n	8000ce4 <__udivmoddi4+0x124>
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e70a      	b.n	8000c98 <__udivmoddi4+0xd8>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e742      	b.n	8000d0e <__udivmoddi4+0x14e>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e90:	f001 fec5 	bl	8002c1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e94:	f000 f87c 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e98:	f000 fae2 	bl	8001460 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e9c:	f000 fab6 	bl	800140c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000ea0:	f000 f94a 	bl	8001138 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000ea4:	f000 f9ec 	bl	8001280 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000ea8:	f000 f8be 	bl	8001028 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000eac:	f000 f98e 	bl	80011cc <MX_TIM1_Init>
  MX_TIM5_Init();
 8000eb0:	f000 fa34 	bl	800131c <MX_TIM5_Init>
//	PID.Kp = 0.0001;
//	PID.Ki = 0.0004291992;
//	PID.Kd = 0;
//	arm_pid_init_f32(&PID, 0);

	kp = 900;
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <main+0xc0>)
 8000eb6:	4a26      	ldr	r2, [pc, #152]	; (8000f50 <main+0xc4>)
 8000eb8:	601a      	str	r2, [r3, #0]
	ki = 7;
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <main+0xc8>)
 8000ebc:	4a26      	ldr	r2, [pc, #152]	; (8000f58 <main+0xcc>)
 8000ebe:	601a      	str	r2, [r3, #0]
	kd = 1;
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <main+0xd0>)
 8000ec2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ec6:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000ec8:	2104      	movs	r1, #4
 8000eca:	4825      	ldr	r0, [pc, #148]	; (8000f60 <main+0xd4>)
 8000ecc:	f005 fcfe 	bl	80068cc <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <main+0xd4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start(&htim2);
 8000ed8:	4822      	ldr	r0, [pc, #136]	; (8000f64 <main+0xd8>)
 8000eda:	f005 fc25 	bl	8006728 <HAL_TIM_Base_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000ede:	217f      	movs	r1, #127	; 0x7f
 8000ee0:	4821      	ldr	r0, [pc, #132]	; (8000f68 <main+0xdc>)
 8000ee2:	f003 fcc9 	bl	8004878 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, ADC, 2);
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4920      	ldr	r1, [pc, #128]	; (8000f6c <main+0xe0>)
 8000eea:	481f      	ldr	r0, [pc, #124]	; (8000f68 <main+0xdc>)
 8000eec:	f002 fb4c 	bl	8003588 <HAL_ADC_Start_DMA>
	reset_pos();
 8000ef0:	f000 fb52 	bl	8001598 <reset_pos>

	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8000ef4:	213c      	movs	r1, #60	; 0x3c
 8000ef6:	481e      	ldr	r0, [pc, #120]	; (8000f70 <main+0xe4>)
 8000ef8:	f005 fea0 	bl	8006c3c <HAL_TIM_Encoder_Start>
	trajec_target = -10;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <main+0xe8>)
 8000efe:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <main+0xec>)
 8000f00:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		QEI_raw = __HAL_TIM_GET_COUNTER(&htim1);
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <main+0xe4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <main+0xf0>)
 8000f0a:	6013      	str	r3, [r2, #0]
		changeUnit();
 8000f0c:	f000 fbe6 	bl	80016dc <changeUnit>
		sensor();
 8000f10:	f000 fb2c 	bl	800156c <sensor>
		if(trajec_target >= 0 && trajec_state == 0){
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <main+0xe8>)
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f22:	db07      	blt.n	8000f34 <main+0xa8>
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <main+0xf4>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d103      	bne.n	8000f34 <main+0xa8>
			QEI_start = QEI_mm;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <main+0xf8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a15      	ldr	r2, [pc, #84]	; (8000f88 <main+0xfc>)
 8000f32:	6013      	str	r3, [r2, #0]
		}
		Trajectory();
 8000f34:	f000 fdc4 	bl	8001ac0 <Trajectory>
		HomemadePID();
 8000f38:	f000 fc0a 	bl	8001750 <HomemadePID>
		speedread();
 8000f3c:	f000 fd88 	bl	8001a50 <speedread>
		LastPos = QEI_mm;
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <main+0xf8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <main+0x100>)
 8000f46:	6013      	str	r3, [r2, #0]
	while (1) {
 8000f48:	e7db      	b.n	8000f02 <main+0x76>
 8000f4a:	bf00      	nop
 8000f4c:	2000031c 	.word	0x2000031c
 8000f50:	44610000 	.word	0x44610000
 8000f54:	20000320 	.word	0x20000320
 8000f58:	40e00000 	.word	0x40e00000
 8000f5c:	20000324 	.word	0x20000324
 8000f60:	2000028c 	.word	0x2000028c
 8000f64:	20000240 	.word	0x20000240
 8000f68:	20000094 	.word	0x20000094
 8000f6c:	20000310 	.word	0x20000310
 8000f70:	200001f4 	.word	0x200001f4
 8000f74:	20000374 	.word	0x20000374
 8000f78:	c1200000 	.word	0xc1200000
 8000f7c:	200002fc 	.word	0x200002fc
 8000f80:	20000394 	.word	0x20000394
 8000f84:	20000300 	.word	0x20000300
 8000f88:	20000390 	.word	0x20000390
 8000f8c:	20000348 	.word	0x20000348

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	; 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	2238      	movs	r2, #56	; 0x38
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f007 fe70 	bl	8008c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f004 fb30 	bl	8005618 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc2:	2340      	movs	r3, #64	; 0x40
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fd2:	2355      	movs	r3, #85	; 0x55
 8000fd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 fbca 	bl	8005780 <HAL_RCC_OscConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ff2:	f001 fbad 	bl	8002750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2104      	movs	r1, #4
 800100e:	4618      	mov	r0, r3
 8001010:	f004 fec8 	bl	8005da4 <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800101a:	f001 fb99 	bl	8002750 <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3750      	adds	r7, #80	; 0x50
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2220      	movs	r2, #32
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f007 fe1f 	bl	8008c84 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001046:	4b39      	ldr	r3, [pc, #228]	; (800112c <MX_ADC1_Init+0x104>)
 8001048:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800104c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800104e:	4b37      	ldr	r3, [pc, #220]	; (800112c <MX_ADC1_Init+0x104>)
 8001050:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001054:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001056:	4b35      	ldr	r3, [pc, #212]	; (800112c <MX_ADC1_Init+0x104>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105c:	4b33      	ldr	r3, [pc, #204]	; (800112c <MX_ADC1_Init+0x104>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001062:	4b32      	ldr	r3, [pc, #200]	; (800112c <MX_ADC1_Init+0x104>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <MX_ADC1_Init+0x104>)
 800106a:	2201      	movs	r2, #1
 800106c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106e:	4b2f      	ldr	r3, [pc, #188]	; (800112c <MX_ADC1_Init+0x104>)
 8001070:	2204      	movs	r2, #4
 8001072:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <MX_ADC1_Init+0x104>)
 8001076:	2200      	movs	r2, #0
 8001078:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800107a:	4b2c      	ldr	r3, [pc, #176]	; (800112c <MX_ADC1_Init+0x104>)
 800107c:	2201      	movs	r2, #1
 800107e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <MX_ADC1_Init+0x104>)
 8001082:	2202      	movs	r2, #2
 8001084:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <MX_ADC1_Init+0x104>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <MX_ADC1_Init+0x104>)
 8001090:	2200      	movs	r2, #0
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <MX_ADC1_Init+0x104>)
 8001096:	2200      	movs	r2, #0
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800109a:	4b24      	ldr	r3, [pc, #144]	; (800112c <MX_ADC1_Init+0x104>)
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <MX_ADC1_Init+0x104>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <MX_ADC1_Init+0x104>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b0:	481e      	ldr	r0, [pc, #120]	; (800112c <MX_ADC1_Init+0x104>)
 80010b2:	f002 f8ad 	bl	8003210 <HAL_ADC_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010bc:	f001 fb48 	bl	8002750 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	4619      	mov	r1, r3
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <MX_ADC1_Init+0x104>)
 80010cc:	f003 fc68 	bl	80049a0 <HAL_ADCEx_MultiModeConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010d6:	f001 fb3b 	bl	8002750 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_ADC1_Init+0x108>)
 80010dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010de:	2306      	movs	r3, #6
 80010e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010e2:	2307      	movs	r3, #7
 80010e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010e6:	237f      	movs	r3, #127	; 0x7f
 80010e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ea:	2304      	movs	r3, #4
 80010ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_ADC1_Init+0x104>)
 80010f8:	f002 fda2 	bl	8003c40 <HAL_ADC_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001102:	f001 fb25 	bl	8002750 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_ADC1_Init+0x10c>)
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800110a:	230c      	movs	r3, #12
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_ADC1_Init+0x104>)
 8001114:	f002 fd94 	bl	8003c40 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800111e:	f001 fb17 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3730      	adds	r7, #48	; 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000094 	.word	0x20000094
 8001130:	14f00020 	.word	0x14f00020
 8001134:	32601000 	.word	0x32601000

08001138 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 800113e:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001140:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800117a:	4812      	ldr	r0, [pc, #72]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 800117c:	f006 ff14 	bl	8007fa8 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001186:	f001 fae3 	bl	8002750 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118a:	2100      	movs	r1, #0
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 800118e:	f007 fcaf 	bl	8008af0 <HAL_UARTEx_SetTxFifoThreshold>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001198:	f001 fada 	bl	8002750 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119c:	2100      	movs	r1, #0
 800119e:	4809      	ldr	r0, [pc, #36]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 80011a0:	f007 fce4 	bl	8008b6c <HAL_UARTEx_SetRxFifoThreshold>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80011aa:	f001 fad1 	bl	8002750 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 80011b0:	f007 fc65 	bl	8008a7e <HAL_UARTEx_DisableFifoMode>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80011ba:	f001 fac9 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000160 	.word	0x20000160
 80011c8:	40008000 	.word	0x40008000

080011cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	2224      	movs	r2, #36	; 0x24
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f007 fd52 	bl	8008c84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <MX_TIM1_Init+0xac>)
 80011ec:	4a23      	ldr	r2, [pc, #140]	; (800127c <MX_TIM1_Init+0xb0>)
 80011ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_TIM1_Init+0xac>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_TIM1_Init+0xac>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_TIM1_Init+0xac>)
 80011fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001202:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_TIM1_Init+0xac>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_TIM1_Init+0xac>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_TIM1_Init+0xac>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001216:	2303      	movs	r3, #3
 8001218:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800121e:	2301      	movs	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800122e:	2301      	movs	r3, #1
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	4619      	mov	r1, r3
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_TIM1_Init+0xac>)
 8001242:	f005 fc55 	bl	8006af0 <HAL_TIM_Encoder_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800124c:	f001 fa80 	bl	8002750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_TIM1_Init+0xac>)
 8001262:	f006 fdc5 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800126c:	f001 fa70 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	3730      	adds	r7, #48	; 0x30
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200001f4 	.word	0x200001f4
 800127c:	40012c00 	.word	0x40012c00

08001280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <MX_TIM2_Init+0x98>)
 80012a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_TIM2_Init+0x98>)
 80012a8:	22a9      	movs	r2, #169	; 0xa9
 80012aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_TIM2_Init+0x98>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_TIM2_Init+0x98>)
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_TIM2_Init+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_TIM2_Init+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c6:	4814      	ldr	r0, [pc, #80]	; (8001318 <MX_TIM2_Init+0x98>)
 80012c8:	f005 f9d6 	bl	8006678 <HAL_TIM_Base_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012d2:	f001 fa3d 	bl	8002750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_TIM2_Init+0x98>)
 80012e4:	f005 ff9c 	bl	8007220 <HAL_TIM_ConfigClockSource>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012ee:	f001 fa2f 	bl	8002750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <MX_TIM2_Init+0x98>)
 8001300:	f006 fd76 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800130a:	f001 fa21 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000240 	.word	0x20000240

0800131c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	; 0x38
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <MX_TIM5_Init+0xe8>)
 8001350:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <MX_TIM5_Init+0xec>)
 8001352:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3;
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <MX_TIM5_Init+0xe8>)
 8001356:	2203      	movs	r2, #3
 8001358:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <MX_TIM5_Init+0xe8>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 29999;
 8001360:	4b28      	ldr	r3, [pc, #160]	; (8001404 <MX_TIM5_Init+0xe8>)
 8001362:	f247 522f 	movw	r2, #29999	; 0x752f
 8001366:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MX_TIM5_Init+0xe8>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <MX_TIM5_Init+0xe8>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001374:	4823      	ldr	r0, [pc, #140]	; (8001404 <MX_TIM5_Init+0xe8>)
 8001376:	f005 f97f 	bl	8006678 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001380:	f001 f9e6 	bl	8002750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138e:	4619      	mov	r1, r3
 8001390:	481c      	ldr	r0, [pc, #112]	; (8001404 <MX_TIM5_Init+0xe8>)
 8001392:	f005 ff45 	bl	8007220 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800139c:	f001 f9d8 	bl	8002750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013a0:	4818      	ldr	r0, [pc, #96]	; (8001404 <MX_TIM5_Init+0xe8>)
 80013a2:	f005 fa31 	bl	8006808 <HAL_TIM_PWM_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013ac:	f001 f9d0 	bl	8002750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4811      	ldr	r0, [pc, #68]	; (8001404 <MX_TIM5_Init+0xe8>)
 80013c0:	f006 fd16 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80013ca:	f001 f9c1 	bl	8002750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ce:	2360      	movs	r3, #96	; 0x60
 80013d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	2204      	movs	r2, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_TIM5_Init+0xe8>)
 80013e6:	f005 fe07 	bl	8006ff8 <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80013f0:	f001 f9ae 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_TIM5_Init+0xe8>)
 80013f6:	f001 fb4f 	bl	8002a98 <HAL_TIM_MspPostInit>

}
 80013fa:	bf00      	nop
 80013fc:	3738      	adds	r7, #56	; 0x38
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000028c 	.word	0x2000028c
 8001408:	40000c00 	.word	0x40000c00

0800140c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_DMA_Init+0x50>)
 8001414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001416:	4a11      	ldr	r2, [pc, #68]	; (800145c <MX_DMA_Init+0x50>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6493      	str	r3, [r2, #72]	; 0x48
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_DMA_Init+0x50>)
 8001420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_DMA_Init+0x50>)
 800142c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142e:	4a0b      	ldr	r2, [pc, #44]	; (800145c <MX_DMA_Init+0x50>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6493      	str	r3, [r2, #72]	; 0x48
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_DMA_Init+0x50>)
 8001438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	200b      	movs	r0, #11
 8001448:	f003 fc8d 	bl	8004d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800144c:	200b      	movs	r0, #11
 800144e:	f003 fca4 	bl	8004d9a <HAL_NVIC_EnableIRQ>

}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <MX_GPIO_Init+0x100>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	4a39      	ldr	r2, [pc, #228]	; (8001560 <MX_GPIO_Init+0x100>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001482:	4b37      	ldr	r3, [pc, #220]	; (8001560 <MX_GPIO_Init+0x100>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <MX_GPIO_Init+0x100>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a33      	ldr	r2, [pc, #204]	; (8001560 <MX_GPIO_Init+0x100>)
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <MX_GPIO_Init+0x100>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <MX_GPIO_Init+0x100>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a2d      	ldr	r2, [pc, #180]	; (8001560 <MX_GPIO_Init+0x100>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <MX_GPIO_Init+0x100>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <MX_GPIO_Init+0x100>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a27      	ldr	r2, [pc, #156]	; (8001560 <MX_GPIO_Init+0x100>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <MX_GPIO_Init+0x100>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f248 0120 	movw	r1, #32800	; 0x8020
 80014dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e0:	f004 f86a 	bl	80055b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	481e      	ldr	r0, [pc, #120]	; (8001564 <MX_GPIO_Init+0x104>)
 80014ea:	f004 f865 	bl	80055b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4818      	ldr	r0, [pc, #96]	; (8001568 <MX_GPIO_Init+0x108>)
 8001506:	f003 fed5 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA15 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_15;
 800150a:	f248 0320 	movw	r3, #32800	; 0x8020
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f003 fec5 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4808      	ldr	r0, [pc, #32]	; (8001564 <MX_GPIO_Init+0x104>)
 8001542:	f003 feb7 	bl	80052b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	2028      	movs	r0, #40	; 0x28
 800154c:	f003 fc0b 	bl	8004d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001550:	2028      	movs	r0, #40	; 0x28
 8001552:	f003 fc22 	bl	8004d9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	; 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	48000400 	.word	0x48000400
 8001568:	48000800 	.word	0x48000800

0800156c <sensor>:
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, PWMset);
	}
}
*/

void sensor() {
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	sen_top = ADC[0];
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <sensor+0x20>)
 8001572:	881a      	ldrh	r2, [r3, #0]
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <sensor+0x24>)
 8001576:	801a      	strh	r2, [r3, #0]
	sen_bot = ADC[1];
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <sensor+0x20>)
 800157a:	885a      	ldrh	r2, [r3, #2]
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <sensor+0x28>)
 800157e:	801a      	strh	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000310 	.word	0x20000310
 8001590:	20000314 	.word	0x20000314
 8001594:	20000316 	.word	0x20000316

08001598 <reset_pos>:

void reset_pos(){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	set_point = 0;
 800159c:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <reset_pos+0x100>)
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
	PID.state[2] = 0;
 80015a4:	4b3d      	ldr	r3, [pc, #244]	; (800169c <reset_pos+0x104>)
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
	time = 0;
 80015ac:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <reset_pos+0x108>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
	while(sen_bot < 2048){
 80015b2:	e012      	b.n	80015da <reset_pos+0x42>
		sensor();
 80015b4:	f7ff ffda 	bl	800156c <sensor>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,1);
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f003 fff9 	bl	80055b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	4836      	ldr	r0, [pc, #216]	; (80016a4 <reset_pos+0x10c>)
 80015cc:	f003 fff4 	bl	80055b8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,7000);
 80015d0:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <reset_pos+0x110>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80015d8:	639a      	str	r2, [r3, #56]	; 0x38
	while(sen_bot < 2048){
 80015da:	4b34      	ldr	r3, [pc, #208]	; (80016ac <reset_pos+0x114>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015e2:	d3e7      	bcc.n	80015b4 <reset_pos+0x1c>
	}
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,0);
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <reset_pos+0x110>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(500);
 80015ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015f0:	f001 fb86 	bl	8002d00 <HAL_Delay>

	sensor();
 80015f4:	f7ff ffba 	bl	800156c <sensor>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001602:	f003 ffd9 	bl	80055b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,1);
 8001606:	2201      	movs	r2, #1
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	4826      	ldr	r0, [pc, #152]	; (80016a4 <reset_pos+0x10c>)
 800160c:	f003 ffd4 	bl	80055b8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,10000);
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <reset_pos+0x110>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f242 7210 	movw	r2, #10000	; 0x2710
 8001618:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(2500);
 800161a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800161e:	f001 fb6f 	bl	8002d00 <HAL_Delay>

	sensor();
 8001622:	f7ff ffa3 	bl	800156c <sensor>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,1);
 8001626:	2201      	movs	r2, #1
 8001628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800162c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001630:	f003 ffc2 	bl	80055b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 8001634:	2200      	movs	r2, #0
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	481a      	ldr	r0, [pc, #104]	; (80016a4 <reset_pos+0x10c>)
 800163a:	f003 ffbd 	bl	80055b8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,7000);
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <reset_pos+0x110>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001646:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(500);
 8001648:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800164c:	f001 fb58 	bl	8002d00 <HAL_Delay>
	while(sen_bot < 2048){
 8001650:	e006      	b.n	8001660 <reset_pos+0xc8>
		sensor();
 8001652:	f7ff ff8b 	bl	800156c <sensor>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,4300);
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <reset_pos+0x110>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f241 02cc 	movw	r2, #4300	; 0x10cc
 800165e:	639a      	str	r2, [r3, #56]	; 0x38
	while(sen_bot < 2048){
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <reset_pos+0x114>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001668:	d3f3      	bcc.n	8001652 <reset_pos+0xba>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001674:	f003 ffa0 	bl	80055b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 8001678:	2200      	movs	r2, #0
 800167a:	2180      	movs	r1, #128	; 0x80
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <reset_pos+0x10c>)
 800167e:	f003 ff9b 	bl	80055b8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,10000);
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <reset_pos+0x110>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f242 7210 	movw	r2, #10000	; 0x2710
 800168a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 800168c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001690:	f001 fb36 	bl	8002d00 <HAL_Delay>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000304 	.word	0x20000304
 800169c:	200002d8 	.word	0x200002d8
 80016a0:	20000318 	.word	0x20000318
 80016a4:	48000400 	.word	0x48000400
 80016a8:	2000028c 	.word	0x2000028c
 80016ac:	20000316 	.word	0x20000316

080016b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016c0:	d102      	bne.n	80016c8 <HAL_GPIO_EXTI_Callback+0x18>
	{
//		condi += 1;
		trajec_target = 300;
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x28>)
 80016c6:	601a      	str	r2, [r3, #0]
	}
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	20000374 	.word	0x20000374
 80016d8:	43960000 	.word	0x43960000

080016dc <changeUnit>:

void changeUnit(){
 80016dc:	b5b0      	push	{r4, r5, r7, lr}
 80016de:	af00      	add	r7, sp, #0
	QEI_mm = (QEI_raw/8192.0)*25*pi;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <changeUnit+0x60>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fed9 	bl	800049c <__aeabi_ui2d>
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <changeUnit+0x64>)
 80016f0:	f7ff f878 	bl	80007e4 <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <changeUnit+0x68>)
 8001702:	f7fe ff45 	bl	8000590 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4614      	mov	r4, r2
 800170c:	461d      	mov	r5, r3
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <changeUnit+0x6c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fee4 	bl	80004e0 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4620      	mov	r0, r4
 800171e:	4629      	mov	r1, r5
 8001720:	f7fe ff36 	bl	8000590 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7ff f9e0 	bl	8000af0 <__aeabi_d2f>
 8001730:	4603      	mov	r3, r0
 8001732:	4a06      	ldr	r2, [pc, #24]	; (800174c <changeUnit+0x70>)
 8001734:	6013      	str	r3, [r2, #0]
}
 8001736:	bf00      	nop
 8001738:	bdb0      	pop	{r4, r5, r7, pc}
 800173a:	bf00      	nop
 800173c:	200002fc 	.word	0x200002fc
 8001740:	40c00000 	.word	0x40c00000
 8001744:	40390000 	.word	0x40390000
 8001748:	20000000 	.word	0x20000000
 800174c:	20000300 	.word	0x20000300

08001750 <HomemadePID>:

void HomemadePID(){
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
//	Now Lastime error errorsum kp ki kd Iterm dinput Lasterror
	set_point = traj[0];
 8001754:	4ba4      	ldr	r3, [pc, #656]	; (80019e8 <HomemadePID+0x298>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4aa4      	ldr	r2, [pc, #656]	; (80019ec <HomemadePID+0x29c>)
 800175a:	6013      	str	r3, [r2, #0]
	static uint32_t timestamp = 0;
	if (timestamp < __HAL_TIM_GET_COUNTER(&htim2)) {
 800175c:	4ba4      	ldr	r3, [pc, #656]	; (80019f0 <HomemadePID+0x2a0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001762:	4ba4      	ldr	r3, [pc, #656]	; (80019f4 <HomemadePID+0x2a4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	f240 8138 	bls.w	80019dc <HomemadePID+0x28c>
		timestamp = __HAL_TIM_GET_COUNTER(&htim2) + 1000;
 800176c:	4ba0      	ldr	r3, [pc, #640]	; (80019f0 <HomemadePID+0x2a0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001776:	4a9f      	ldr	r2, [pc, #636]	; (80019f4 <HomemadePID+0x2a4>)
 8001778:	6013      	str	r3, [r2, #0]
		Now = __HAL_TIM_GET_COUNTER(&htim2);
 800177a:	4b9d      	ldr	r3, [pc, #628]	; (80019f0 <HomemadePID+0x2a0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	4a9d      	ldr	r2, [pc, #628]	; (80019f8 <HomemadePID+0x2a8>)
 8001782:	6013      	str	r3, [r2, #0]
		error = set_point - QEI_mm;
 8001784:	4b99      	ldr	r3, [pc, #612]	; (80019ec <HomemadePID+0x29c>)
 8001786:	ed93 7a00 	vldr	s14, [r3]
 800178a:	4b9c      	ldr	r3, [pc, #624]	; (80019fc <HomemadePID+0x2ac>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001794:	4b9a      	ldr	r3, [pc, #616]	; (8001a00 <HomemadePID+0x2b0>)
 8001796:	edc3 7a00 	vstr	s15, [r3]
		errorsum = errorsum + (error*(Now-Lastime)/1000);
 800179a:	4b97      	ldr	r3, [pc, #604]	; (80019f8 <HomemadePID+0x2a8>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b99      	ldr	r3, [pc, #612]	; (8001a04 <HomemadePID+0x2b4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ac:	4b94      	ldr	r3, [pc, #592]	; (8001a00 <HomemadePID+0x2b0>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b6:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001a08 <HomemadePID+0x2b8>
 80017ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017be:	4b93      	ldr	r3, [pc, #588]	; (8001a0c <HomemadePID+0x2bc>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	4b90      	ldr	r3, [pc, #576]	; (8001a0c <HomemadePID+0x2bc>)
 80017ca:	edc3 7a00 	vstr	s15, [r3]
		Iterm = ki*errorsum;
 80017ce:	4b90      	ldr	r3, [pc, #576]	; (8001a10 <HomemadePID+0x2c0>)
 80017d0:	ed93 7a00 	vldr	s14, [r3]
 80017d4:	4b8d      	ldr	r3, [pc, #564]	; (8001a0c <HomemadePID+0x2bc>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017de:	4b8d      	ldr	r3, [pc, #564]	; (8001a14 <HomemadePID+0x2c4>)
 80017e0:	edc3 7a00 	vstr	s15, [r3]
		if(Iterm < -65535 && Iterm > 65535){
 80017e4:	4b8b      	ldr	r3, [pc, #556]	; (8001a14 <HomemadePID+0x2c4>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001a18 <HomemadePID+0x2c8>
 80017ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	d524      	bpl.n	8001842 <HomemadePID+0xf2>
 80017f8:	4b86      	ldr	r3, [pc, #536]	; (8001a14 <HomemadePID+0x2c4>)
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001a1c <HomemadePID+0x2cc>
 8001802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180a:	dd1a      	ble.n	8001842 <HomemadePID+0xf2>
			errorsum = (Iterm/ki) - (error*(Now-Lastime));
 800180c:	4b81      	ldr	r3, [pc, #516]	; (8001a14 <HomemadePID+0x2c4>)
 800180e:	edd3 6a00 	vldr	s13, [r3]
 8001812:	4b7f      	ldr	r3, [pc, #508]	; (8001a10 <HomemadePID+0x2c0>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800181c:	4b76      	ldr	r3, [pc, #472]	; (80019f8 <HomemadePID+0x2a8>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b78      	ldr	r3, [pc, #480]	; (8001a04 <HomemadePID+0x2b4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800182e:	4b74      	ldr	r3, [pc, #464]	; (8001a00 <HomemadePID+0x2b0>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183c:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <HomemadePID+0x2bc>)
 800183e:	edc3 7a00 	vstr	s15, [r3]
		}

		dinput = (error-Lasterror)/(Now-Lastime);
 8001842:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <HomemadePID+0x2b0>)
 8001844:	ed93 7a00 	vldr	s14, [r3]
 8001848:	4b75      	ldr	r3, [pc, #468]	; (8001a20 <HomemadePID+0x2d0>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001852:	4b69      	ldr	r3, [pc, #420]	; (80019f8 <HomemadePID+0x2a8>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b6b      	ldr	r3, [pc, #428]	; (8001a04 <HomemadePID+0x2b4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001868:	4b6e      	ldr	r3, [pc, #440]	; (8001a24 <HomemadePID+0x2d4>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
		Vfeedback = (kp*error)+(ki*errorsum)+(kd*dinput);
 800186e:	4b6e      	ldr	r3, [pc, #440]	; (8001a28 <HomemadePID+0x2d8>)
 8001870:	ed93 7a00 	vldr	s14, [r3]
 8001874:	4b62      	ldr	r3, [pc, #392]	; (8001a00 <HomemadePID+0x2b0>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187e:	4b64      	ldr	r3, [pc, #400]	; (8001a10 <HomemadePID+0x2c0>)
 8001880:	edd3 6a00 	vldr	s13, [r3]
 8001884:	4b61      	ldr	r3, [pc, #388]	; (8001a0c <HomemadePID+0x2bc>)
 8001886:	edd3 7a00 	vldr	s15, [r3]
 800188a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001892:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <HomemadePID+0x2dc>)
 8001894:	edd3 6a00 	vldr	s13, [r3]
 8001898:	4b62      	ldr	r3, [pc, #392]	; (8001a24 <HomemadePID+0x2d4>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018aa:	ee17 3a90 	vmov	r3, s15
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <HomemadePID+0x2e0>)
 80018b2:	801a      	strh	r2, [r3, #0]

		if(error > 32768)
 80018b4:	4b52      	ldr	r3, [pc, #328]	; (8001a00 <HomemadePID+0x2b0>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001a34 <HomemadePID+0x2e4>
 80018be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	dd09      	ble.n	80018dc <HomemadePID+0x18c>
			error -= 65536;
 80018c8:	4b4d      	ldr	r3, [pc, #308]	; (8001a00 <HomemadePID+0x2b0>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001a38 <HomemadePID+0x2e8>
 80018d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018d6:	4b4a      	ldr	r3, [pc, #296]	; (8001a00 <HomemadePID+0x2b0>)
 80018d8:	edc3 7a00 	vstr	s15, [r3]
		if(error < -32768)
 80018dc:	4b48      	ldr	r3, [pc, #288]	; (8001a00 <HomemadePID+0x2b0>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001a3c <HomemadePID+0x2ec>
 80018e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ee:	d509      	bpl.n	8001904 <HomemadePID+0x1b4>
			error += 65536;
 80018f0:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <HomemadePID+0x2b0>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001a38 <HomemadePID+0x2e8>
 80018fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018fe:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <HomemadePID+0x2b0>)
 8001900:	edc3 7a00 	vstr	s15, [r3]

		if(error > 0){
 8001904:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <HomemadePID+0x2b0>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	dd0c      	ble.n	800192e <HomemadePID+0x1de>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 8001914:	2200      	movs	r2, #0
 8001916:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800191e:	f003 fe4b 	bl	80055b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,1);
 8001922:	2201      	movs	r2, #1
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	4846      	ldr	r0, [pc, #280]	; (8001a40 <HomemadePID+0x2f0>)
 8001928:	f003 fe46 	bl	80055b8 <HAL_GPIO_WritePin>
 800192c:	e028      	b.n	8001980 <HomemadePID+0x230>
		}
		else if(error < 0){
 800192e:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <HomemadePID+0x2b0>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	d50c      	bpl.n	8001958 <HomemadePID+0x208>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,1);
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001948:	f003 fe36 	bl	80055b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 800194c:	2200      	movs	r2, #0
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	483b      	ldr	r0, [pc, #236]	; (8001a40 <HomemadePID+0x2f0>)
 8001952:	f003 fe31 	bl	80055b8 <HAL_GPIO_WritePin>
 8001956:	e013      	b.n	8001980 <HomemadePID+0x230>
		}
		else if(error == 0){
 8001958:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <HomemadePID+0x2b0>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d10b      	bne.n	8001980 <HomemadePID+0x230>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f003 fe21 	bl	80055b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 8001976:	2200      	movs	r2, #0
 8001978:	2180      	movs	r1, #128	; 0x80
 800197a:	4831      	ldr	r0, [pc, #196]	; (8001a40 <HomemadePID+0x2f0>)
 800197c:	f003 fe1c 	bl	80055b8 <HAL_GPIO_WritePin>
		}

		PWMset = (Vfeedback/65536.0)*30000;
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <HomemadePID+0x2e0>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fd99 	bl	80004bc <__aeabi_i2d>
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HomemadePID+0x2f4>)
 8001990:	f7fe ff28 	bl	80007e4 <__aeabi_ddiv>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	a310      	add	r3, pc, #64	; (adr r3, 80019e0 <HomemadePID+0x290>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fdf5 	bl	8000590 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f7ff f89f 	bl	8000af0 <__aeabi_d2f>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <HomemadePID+0x2f8>)
 80019b6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, PWMset);
 80019b8:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HomemadePID+0x2f8>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HomemadePID+0x2fc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c6:	ee17 2a90 	vmov	r2, s15
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38


		Lastime = Now;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HomemadePID+0x2a8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0c      	ldr	r2, [pc, #48]	; (8001a04 <HomemadePID+0x2b4>)
 80019d2:	6013      	str	r3, [r2, #0]
		Lasterror = error;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HomemadePID+0x2b0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a11      	ldr	r2, [pc, #68]	; (8001a20 <HomemadePID+0x2d0>)
 80019da:	6013      	str	r3, [r2, #0]
	}
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40dd4c00 	.word	0x40dd4c00
 80019e8:	20000364 	.word	0x20000364
 80019ec:	20000304 	.word	0x20000304
 80019f0:	20000240 	.word	0x20000240
 80019f4:	20000398 	.word	0x20000398
 80019f8:	20000328 	.word	0x20000328
 80019fc:	20000300 	.word	0x20000300
 8001a00:	20000330 	.word	0x20000330
 8001a04:	2000032c 	.word	0x2000032c
 8001a08:	447a0000 	.word	0x447a0000
 8001a0c:	20000334 	.word	0x20000334
 8001a10:	20000320 	.word	0x20000320
 8001a14:	20000338 	.word	0x20000338
 8001a18:	c77fff00 	.word	0xc77fff00
 8001a1c:	477fff00 	.word	0x477fff00
 8001a20:	20000340 	.word	0x20000340
 8001a24:	2000033c 	.word	0x2000033c
 8001a28:	2000031c 	.word	0x2000031c
 8001a2c:	20000324 	.word	0x20000324
 8001a30:	2000030c 	.word	0x2000030c
 8001a34:	47000000 	.word	0x47000000
 8001a38:	47800000 	.word	0x47800000
 8001a3c:	c7000000 	.word	0xc7000000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	40f00000 	.word	0x40f00000
 8001a48:	20000308 	.word	0x20000308
 8001a4c:	2000028c 	.word	0x2000028c

08001a50 <speedread>:


void speedread(){
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	Now = __HAL_TIM_GET_COUNTER(&htim2);
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <speedread+0x54>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <speedread+0x58>)
 8001a5c:	6013      	str	r3, [r2, #0]
	speed = (QEI_mm - LastPos)*1000000/(Now - Lastime);
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <speedread+0x5c>)
 8001a60:	ed93 7a00 	vldr	s14, [r3]
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <speedread+0x60>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001ab4 <speedread+0x64>
 8001a72:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <speedread+0x58>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <speedread+0x68>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <speedread+0x6c>)
 8001a8e:	edc3 7a00 	vstr	s15, [r3]
	Lastime = Now;
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <speedread+0x58>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <speedread+0x68>)
 8001a98:	6013      	str	r3, [r2, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	20000240 	.word	0x20000240
 8001aa8:	20000328 	.word	0x20000328
 8001aac:	20000300 	.word	0x20000300
 8001ab0:	20000348 	.word	0x20000348
 8001ab4:	49742400 	.word	0x49742400
 8001ab8:	2000032c 	.word	0x2000032c
 8001abc:	20000344 	.word	0x20000344

08001ac0 <Trajectory>:

void Trajectory(){
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	Distance = trajec_target - QEI_start;
 8001ac4:	4b8c      	ldr	r3, [pc, #560]	; (8001cf8 <Trajectory+0x238>)
 8001ac6:	ed93 7a00 	vldr	s14, [r3]
 8001aca:	4b8c      	ldr	r3, [pc, #560]	; (8001cfc <Trajectory+0x23c>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad4:	4b8a      	ldr	r3, [pc, #552]	; (8001d00 <Trajectory+0x240>)
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
	Time_acc = Vmax / Amax;
 8001ada:	4b8a      	ldr	r3, [pc, #552]	; (8001d04 <Trajectory+0x244>)
 8001adc:	edd3 6a00 	vldr	s13, [r3]
 8001ae0:	4b89      	ldr	r3, [pc, #548]	; (8001d08 <Trajectory+0x248>)
 8001ae2:	ed93 7a00 	vldr	s14, [r3]
 8001ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aea:	4b88      	ldr	r3, [pc, #544]	; (8001d0c <Trajectory+0x24c>)
 8001aec:	edc3 7a00 	vstr	s15, [r3]
	Time_dec = Time_acc;
 8001af0:	4b86      	ldr	r3, [pc, #536]	; (8001d0c <Trajectory+0x24c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a86      	ldr	r2, [pc, #536]	; (8001d10 <Trajectory+0x250>)
 8001af6:	6013      	str	r3, [r2, #0]


	time_now = __HAL_TIM_GET_COUNTER(&htim2);
 8001af8:	4b86      	ldr	r3, [pc, #536]	; (8001d14 <Trajectory+0x254>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b06:	4b84      	ldr	r3, [pc, #528]	; (8001d18 <Trajectory+0x258>)
 8001b08:	edc3 7a00 	vstr	s15, [r3]

	if(trajec_target >= 0 && trajec_state == 0){
 8001b0c:	4b7a      	ldr	r3, [pc, #488]	; (8001cf8 <Trajectory+0x238>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	db14      	blt.n	8001b46 <Trajectory+0x86>
 8001b1c:	4b7f      	ldr	r3, [pc, #508]	; (8001d1c <Trajectory+0x25c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d110      	bne.n	8001b46 <Trajectory+0x86>
		trajec_state = 1;
 8001b24:	4b7d      	ldr	r3, [pc, #500]	; (8001d1c <Trajectory+0x25c>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
		Timestamp = time_now;
 8001b2a:	4b7b      	ldr	r3, [pc, #492]	; (8001d18 <Trajectory+0x258>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a7c      	ldr	r2, [pc, #496]	; (8001d20 <Trajectory+0x260>)
 8001b30:	6013      	str	r3, [r2, #0]
		QEI_start = QEI_mm;
 8001b32:	4b7c      	ldr	r3, [pc, #496]	; (8001d24 <Trajectory+0x264>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a71      	ldr	r2, [pc, #452]	; (8001cfc <Trajectory+0x23c>)
 8001b38:	6013      	str	r3, [r2, #0]
		pos = QEI_start;
 8001b3a:	4b70      	ldr	r3, [pc, #448]	; (8001cfc <Trajectory+0x23c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7a      	ldr	r2, [pc, #488]	; (8001d28 <Trajectory+0x268>)
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	f000 bdf1 	b.w	8002728 <Trajectory+0xc68>
	}
	else if(Distance > 0 && trajec_state == 1){	//Run Up
 8001b46:	4b6e      	ldr	r3, [pc, #440]	; (8001d00 <Trajectory+0x240>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	f340 82e5 	ble.w	8002122 <Trajectory+0x662>
 8001b58:	4b70      	ldr	r3, [pc, #448]	; (8001d1c <Trajectory+0x25c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	f040 82e0 	bne.w	8002122 <Trajectory+0x662>
		Distance_Velo_Max = -(Vmax*Time_acc) + Distance ;
 8001b62:	4b67      	ldr	r3, [pc, #412]	; (8001d00 <Trajectory+0x240>)
 8001b64:	ed93 7a00 	vldr	s14, [r3]
 8001b68:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <Trajectory+0x244>)
 8001b6a:	edd3 6a00 	vldr	s13, [r3]
 8001b6e:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <Trajectory+0x24c>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b7c:	4b6b      	ldr	r3, [pc, #428]	; (8001d2c <Trajectory+0x26c>)
 8001b7e:	edc3 7a00 	vstr	s15, [r3]
		t = (time_now - Timestamp)/1000000.0;  //s
 8001b82:	4b65      	ldr	r3, [pc, #404]	; (8001d18 <Trajectory+0x258>)
 8001b84:	ed93 7a00 	vldr	s14, [r3]
 8001b88:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <Trajectory+0x260>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b92:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001d30 <Trajectory+0x270>
 8001b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9a:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <Trajectory+0x274>)
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8001ba0:	4b62      	ldr	r3, [pc, #392]	; (8001d2c <Trajectory+0x26c>)
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	f340 815b 	ble.w	8001e68 <Trajectory+0x3a8>
			temp_check = 1;
 8001bb2:	4b61      	ldr	r3, [pc, #388]	; (8001d38 <Trajectory+0x278>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
			Time_const = Distance_Velo_Max/Vmax;
 8001bb8:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <Trajectory+0x26c>)
 8001bba:	edd3 6a00 	vldr	s13, [r3]
 8001bbe:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <Trajectory+0x244>)
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc8:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <Trajectory+0x27c>)
 8001bca:	edc3 7a00 	vstr	s15, [r3]
			if(t < Time_acc){
 8001bce:	4b59      	ldr	r3, [pc, #356]	; (8001d34 <Trajectory+0x274>)
 8001bd0:	ed93 7a00 	vldr	s14, [r3]
 8001bd4:	4b4d      	ldr	r3, [pc, #308]	; (8001d0c <Trajectory+0x24c>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be2:	d555      	bpl.n	8001c90 <Trajectory+0x1d0>
				traj[2] = Amax;
 8001be4:	4b48      	ldr	r3, [pc, #288]	; (8001d08 <Trajectory+0x248>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a55      	ldr	r2, [pc, #340]	; (8001d40 <Trajectory+0x280>)
 8001bea:	6093      	str	r3, [r2, #8]
				traj[1] = Amax*t;
 8001bec:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <Trajectory+0x248>)
 8001bee:	ed93 7a00 	vldr	s14, [r3]
 8001bf2:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <Trajectory+0x274>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	4b50      	ldr	r3, [pc, #320]	; (8001d40 <Trajectory+0x280>)
 8001bfe:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (Amax/2.0)*t*t + pos;
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <Trajectory+0x248>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc6a 	bl	80004e0 <__aeabi_f2d>
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c14:	f7fe fde6 	bl	80007e4 <__aeabi_ddiv>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	461d      	mov	r5, r3
 8001c20:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <Trajectory+0x274>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc5b 	bl	80004e0 <__aeabi_f2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fcad 	bl	8000590 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4614      	mov	r4, r2
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <Trajectory+0x274>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc4c 	bl	80004e0 <__aeabi_f2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fc9e 	bl	8000590 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	4b32      	ldr	r3, [pc, #200]	; (8001d28 <Trajectory+0x268>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc3d 	bl	80004e0 <__aeabi_f2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	f7fe fad9 	bl	8000224 <__adddf3>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ff39 	bl	8000af0 <__aeabi_d2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <Trajectory+0x280>)
 8001c82:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 8001c84:	4b2e      	ldr	r3, [pc, #184]	; (8001d40 <Trajectory+0x280>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a2e      	ldr	r2, [pc, #184]	; (8001d44 <Trajectory+0x284>)
 8001c8a:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8001c8c:	f000 bd4c 	b.w	8002728 <Trajectory+0xc68>
			}
			else if(t < Time_const+Time_acc){
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <Trajectory+0x27c>)
 8001c92:	ed93 7a00 	vldr	s14, [r3]
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <Trajectory+0x24c>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <Trajectory+0x274>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	dd4d      	ble.n	8001d4c <Trajectory+0x28c>
				traj[2] = 0;
 8001cb0:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <Trajectory+0x280>)
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
				traj[1] = Vmax;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <Trajectory+0x244>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a20      	ldr	r2, [pc, #128]	; (8001d40 <Trajectory+0x280>)
 8001cbe:	6053      	str	r3, [r2, #4]
				traj[0] = (Vmax*(t-Time_acc)) + temp_pos_acc;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <Trajectory+0x274>)
 8001cc2:	ed93 7a00 	vldr	s14, [r3]
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <Trajectory+0x24c>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <Trajectory+0x244>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <Trajectory+0x284>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <Trajectory+0x280>)
 8001ce6:	edc3 7a00 	vstr	s15, [r3]
				temp_pos_const = traj[0];
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <Trajectory+0x280>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <Trajectory+0x288>)
 8001cf0:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8001cf2:	f000 bd19 	b.w	8002728 <Trajectory+0xc68>
 8001cf6:	bf00      	nop
 8001cf8:	20000374 	.word	0x20000374
 8001cfc:	20000390 	.word	0x20000390
 8001d00:	2000034c 	.word	0x2000034c
 8001d04:	20000004 	.word	0x20000004
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	20000378 	.word	0x20000378
 8001d10:	20000380 	.word	0x20000380
 8001d14:	20000240 	.word	0x20000240
 8001d18:	20000388 	.word	0x20000388
 8001d1c:	20000394 	.word	0x20000394
 8001d20:	2000038c 	.word	0x2000038c
 8001d24:	20000300 	.word	0x20000300
 8001d28:	20000370 	.word	0x20000370
 8001d2c:	20000360 	.word	0x20000360
 8001d30:	49742400 	.word	0x49742400
 8001d34:	20000350 	.word	0x20000350
 8001d38:	20000395 	.word	0x20000395
 8001d3c:	20000384 	.word	0x20000384
 8001d40:	20000364 	.word	0x20000364
 8001d44:	20000354 	.word	0x20000354
 8001d48:	20000358 	.word	0x20000358
			}
			else if(t < Time_const+Time_acc+Time_dec){
 8001d4c:	4b8c      	ldr	r3, [pc, #560]	; (8001f80 <Trajectory+0x4c0>)
 8001d4e:	ed93 7a00 	vldr	s14, [r3]
 8001d52:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <Trajectory+0x4c4>)
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d5c:	4b8a      	ldr	r3, [pc, #552]	; (8001f88 <Trajectory+0x4c8>)
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d66:	4b89      	ldr	r3, [pc, #548]	; (8001f8c <Trajectory+0x4cc>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	dd64      	ble.n	8001e40 <Trajectory+0x380>
				traj[2] = -Amax;
 8001d76:	4b86      	ldr	r3, [pc, #536]	; (8001f90 <Trajectory+0x4d0>)
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	eef1 7a67 	vneg.f32	s15, s15
 8001d80:	4b84      	ldr	r3, [pc, #528]	; (8001f94 <Trajectory+0x4d4>)
 8001d82:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = (traj[2]*(t-Time_const-Time_acc)) + Vmax;
 8001d86:	4b83      	ldr	r3, [pc, #524]	; (8001f94 <Trajectory+0x4d4>)
 8001d88:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d8c:	4b7f      	ldr	r3, [pc, #508]	; (8001f8c <Trajectory+0x4cc>)
 8001d8e:	edd3 6a00 	vldr	s13, [r3]
 8001d92:	4b7b      	ldr	r3, [pc, #492]	; (8001f80 <Trajectory+0x4c0>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d9c:	4b79      	ldr	r3, [pc, #484]	; (8001f84 <Trajectory+0x4c4>)
 8001d9e:	edd3 7a00 	vldr	s15, [r3]
 8001da2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001daa:	4b7b      	ldr	r3, [pc, #492]	; (8001f98 <Trajectory+0x4d8>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db4:	4b77      	ldr	r3, [pc, #476]	; (8001f94 <Trajectory+0x4d4>)
 8001db6:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((Amax/2)*(t-Time_const-Time_acc)*(t-Time_const-Time_acc))+(traj[1]*(t-Time_const-Time_acc))+temp_pos_const;
 8001dba:	4b75      	ldr	r3, [pc, #468]	; (8001f90 <Trajectory+0x4d0>)
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001dc4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001dc8:	4b70      	ldr	r3, [pc, #448]	; (8001f8c <Trajectory+0x4cc>)
 8001dca:	edd3 6a00 	vldr	s13, [r3]
 8001dce:	4b6c      	ldr	r3, [pc, #432]	; (8001f80 <Trajectory+0x4c0>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dd8:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <Trajectory+0x4c4>)
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001de2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de6:	4b69      	ldr	r3, [pc, #420]	; (8001f8c <Trajectory+0x4cc>)
 8001de8:	edd3 6a00 	vldr	s13, [r3]
 8001dec:	4b64      	ldr	r3, [pc, #400]	; (8001f80 <Trajectory+0x4c0>)
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <Trajectory+0x4c4>)
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e04:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <Trajectory+0x4d4>)
 8001e06:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e0a:	4b60      	ldr	r3, [pc, #384]	; (8001f8c <Trajectory+0x4cc>)
 8001e0c:	ed93 6a00 	vldr	s12, [r3]
 8001e10:	4b5b      	ldr	r3, [pc, #364]	; (8001f80 <Trajectory+0x4c0>)
 8001e12:	edd3 7a00 	vldr	s15, [r3]
 8001e16:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e1a:	4b5a      	ldr	r3, [pc, #360]	; (8001f84 <Trajectory+0x4c4>)
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2c:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <Trajectory+0x4dc>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e36:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <Trajectory+0x4d4>)
 8001e38:	edc3 7a00 	vstr	s15, [r3]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8001e3c:	f000 bc74 	b.w	8002728 <Trajectory+0xc68>
			}
			else{
				trajec_state = 0;
 8001e40:	4b57      	ldr	r3, [pc, #348]	; (8001fa0 <Trajectory+0x4e0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 8001e46:	4b57      	ldr	r3, [pc, #348]	; (8001fa4 <Trajectory+0x4e4>)
 8001e48:	4a57      	ldr	r2, [pc, #348]	; (8001fa8 <Trajectory+0x4e8>)
 8001e4a:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 8001e4c:	4b51      	ldr	r3, [pc, #324]	; (8001f94 <Trajectory+0x4d4>)
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
				temp_pos_acc = 0;
 8001e54:	4b55      	ldr	r3, [pc, #340]	; (8001fac <Trajectory+0x4ec>)
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
				temp_pos_const = 0;
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <Trajectory+0x4dc>)
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8001e64:	f000 bc60 	b.w	8002728 <Trajectory+0xc68>
			}
		}
		else if(Distance_Velo_Max <= 0){				//Triangle
 8001e68:	4b51      	ldr	r3, [pc, #324]	; (8001fb0 <Trajectory+0x4f0>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d901      	bls.n	8001e7c <Trajectory+0x3bc>
		if(Distance_Velo_Max > 0){						//Trapezoi
 8001e78:	f000 bc56 	b.w	8002728 <Trajectory+0xc68>
			temp_check = 2;
 8001e7c:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <Trajectory+0x4f4>)
 8001e7e:	2202      	movs	r2, #2
 8001e80:	701a      	strb	r2, [r3, #0]
			Time_acc_tri = sqrt(Distance/Amax);
 8001e82:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <Trajectory+0x4f8>)
 8001e84:	ed93 7a00 	vldr	s14, [r3]
 8001e88:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <Trajectory+0x4d0>)
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e92:	ee16 0a90 	vmov	r0, s13
 8001e96:	f7fe fb23 	bl	80004e0 <__aeabi_f2d>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	ec43 2b10 	vmov	d0, r2, r3
 8001ea2:	f006 ff21 	bl	8008ce8 <sqrt>
 8001ea6:	ec53 2b10 	vmov	r2, r3, d0
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f7fe fe1f 	bl	8000af0 <__aeabi_d2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a41      	ldr	r2, [pc, #260]	; (8001fbc <Trajectory+0x4fc>)
 8001eb6:	6013      	str	r3, [r2, #0]
			if(t < Time_acc_tri){
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <Trajectory+0x4cc>)
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <Trajectory+0x4fc>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	d57c      	bpl.n	8001fc8 <Trajectory+0x508>
				traj[2] = Amax;
 8001ece:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <Trajectory+0x4d0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a30      	ldr	r2, [pc, #192]	; (8001f94 <Trajectory+0x4d4>)
 8001ed4:	6093      	str	r3, [r2, #8]
				traj[1] = Amax*t;
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <Trajectory+0x4d0>)
 8001ed8:	ed93 7a00 	vldr	s14, [r3]
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <Trajectory+0x4cc>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee6:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <Trajectory+0x4d4>)
 8001ee8:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (Amax/2.0)*t*t + pos;
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <Trajectory+0x4d0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe faf5 	bl	80004e0 <__aeabi_f2d>
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001efe:	f7fe fc71 	bl	80007e4 <__aeabi_ddiv>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4614      	mov	r4, r2
 8001f08:	461d      	mov	r5, r3
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <Trajectory+0x4cc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fae6 	bl	80004e0 <__aeabi_f2d>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4620      	mov	r0, r4
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	f7fe fb38 	bl	8000590 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4614      	mov	r4, r2
 8001f26:	461d      	mov	r5, r3
 8001f28:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <Trajectory+0x4cc>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fad7 	bl	80004e0 <__aeabi_f2d>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7fe fb29 	bl	8000590 <__aeabi_dmul>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4614      	mov	r4, r2
 8001f44:	461d      	mov	r5, r3
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <Trajectory+0x500>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fac8 	bl	80004e0 <__aeabi_f2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe f964 	bl	8000224 <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7fe fdc4 	bl	8000af0 <__aeabi_d2f>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <Trajectory+0x4d4>)
 8001f6c:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <Trajectory+0x4d4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <Trajectory+0x4ec>)
 8001f74:	6013      	str	r3, [r2, #0]
				temp_v_acc = traj[1];
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <Trajectory+0x4d4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <Trajectory+0x504>)
 8001f7c:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8001f7e:	e3d3      	b.n	8002728 <Trajectory+0xc68>
 8001f80:	20000384 	.word	0x20000384
 8001f84:	20000378 	.word	0x20000378
 8001f88:	20000380 	.word	0x20000380
 8001f8c:	20000350 	.word	0x20000350
 8001f90:	20000008 	.word	0x20000008
 8001f94:	20000364 	.word	0x20000364
 8001f98:	20000004 	.word	0x20000004
 8001f9c:	20000358 	.word	0x20000358
 8001fa0:	20000394 	.word	0x20000394
 8001fa4:	20000374 	.word	0x20000374
 8001fa8:	c1200000 	.word	0xc1200000
 8001fac:	20000354 	.word	0x20000354
 8001fb0:	20000360 	.word	0x20000360
 8001fb4:	20000395 	.word	0x20000395
 8001fb8:	2000034c 	.word	0x2000034c
 8001fbc:	2000037c 	.word	0x2000037c
 8001fc0:	20000370 	.word	0x20000370
 8001fc4:	2000035c 	.word	0x2000035c
			}
			else if(t < Time_acc_tri*2){
 8001fc8:	4bae      	ldr	r3, [pc, #696]	; (8002284 <Trajectory+0x7c4>)
 8001fca:	edd3 7a00 	vldr	s15, [r3]
 8001fce:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fd2:	4bad      	ldr	r3, [pc, #692]	; (8002288 <Trajectory+0x7c8>)
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe0:	f340 8088 	ble.w	80020f4 <Trajectory+0x634>
				traj[2] = -Amax;
 8001fe4:	4ba9      	ldr	r3, [pc, #676]	; (800228c <Trajectory+0x7cc>)
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	eef1 7a67 	vneg.f32	s15, s15
 8001fee:	4ba8      	ldr	r3, [pc, #672]	; (8002290 <Trajectory+0x7d0>)
 8001ff0:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = temp_v_acc - (Amax*(t-Time_acc_tri));
 8001ff4:	4ba7      	ldr	r3, [pc, #668]	; (8002294 <Trajectory+0x7d4>)
 8001ff6:	ed93 7a00 	vldr	s14, [r3]
 8001ffa:	4ba3      	ldr	r3, [pc, #652]	; (8002288 <Trajectory+0x7c8>)
 8001ffc:	edd3 6a00 	vldr	s13, [r3]
 8002000:	4ba0      	ldr	r3, [pc, #640]	; (8002284 <Trajectory+0x7c4>)
 8002002:	edd3 7a00 	vldr	s15, [r3]
 8002006:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800200a:	4ba0      	ldr	r3, [pc, #640]	; (800228c <Trajectory+0x7cc>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002018:	4b9d      	ldr	r3, [pc, #628]	; (8002290 <Trajectory+0x7d0>)
 800201a:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((Amax/2.0)*(t-Time_acc_tri)*(t-Time_acc_tri))+(traj[1]*(t-Time_acc_tri))+temp_pos_acc;
 800201e:	4b9b      	ldr	r3, [pc, #620]	; (800228c <Trajectory+0x7cc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fa5c 	bl	80004e0 <__aeabi_f2d>
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002030:	f7fe fbd8 	bl	80007e4 <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4614      	mov	r4, r2
 800203a:	461d      	mov	r5, r3
 800203c:	4b92      	ldr	r3, [pc, #584]	; (8002288 <Trajectory+0x7c8>)
 800203e:	ed93 7a00 	vldr	s14, [r3]
 8002042:	4b90      	ldr	r3, [pc, #576]	; (8002284 <Trajectory+0x7c4>)
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204c:	ee17 0a90 	vmov	r0, s15
 8002050:	f7fe fa46 	bl	80004e0 <__aeabi_f2d>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4620      	mov	r0, r4
 800205a:	4629      	mov	r1, r5
 800205c:	f7fe fa98 	bl	8000590 <__aeabi_dmul>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4614      	mov	r4, r2
 8002066:	461d      	mov	r5, r3
 8002068:	4b87      	ldr	r3, [pc, #540]	; (8002288 <Trajectory+0x7c8>)
 800206a:	ed93 7a00 	vldr	s14, [r3]
 800206e:	4b85      	ldr	r3, [pc, #532]	; (8002284 <Trajectory+0x7c4>)
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002078:	ee17 0a90 	vmov	r0, s15
 800207c:	f7fe fa30 	bl	80004e0 <__aeabi_f2d>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4620      	mov	r0, r4
 8002086:	4629      	mov	r1, r5
 8002088:	f7fe fa82 	bl	8000590 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4614      	mov	r4, r2
 8002092:	461d      	mov	r5, r3
 8002094:	4b7e      	ldr	r3, [pc, #504]	; (8002290 <Trajectory+0x7d0>)
 8002096:	ed93 7a01 	vldr	s14, [r3, #4]
 800209a:	4b7b      	ldr	r3, [pc, #492]	; (8002288 <Trajectory+0x7c8>)
 800209c:	edd3 6a00 	vldr	s13, [r3]
 80020a0:	4b78      	ldr	r3, [pc, #480]	; (8002284 <Trajectory+0x7c4>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ae:	ee17 0a90 	vmov	r0, s15
 80020b2:	f7fe fa15 	bl	80004e0 <__aeabi_f2d>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4620      	mov	r0, r4
 80020bc:	4629      	mov	r1, r5
 80020be:	f7fe f8b1 	bl	8000224 <__adddf3>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4614      	mov	r4, r2
 80020c8:	461d      	mov	r5, r3
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <Trajectory+0x7d8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa06 	bl	80004e0 <__aeabi_f2d>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4620      	mov	r0, r4
 80020da:	4629      	mov	r1, r5
 80020dc:	f7fe f8a2 	bl	8000224 <__adddf3>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fd02 	bl	8000af0 <__aeabi_d2f>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4a68      	ldr	r2, [pc, #416]	; (8002290 <Trajectory+0x7d0>)
 80020f0:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 80020f2:	e319      	b.n	8002728 <Trajectory+0xc68>
			}
			else{
				trajec_state = 0;
 80020f4:	4b69      	ldr	r3, [pc, #420]	; (800229c <Trajectory+0x7dc>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 80020fa:	4b69      	ldr	r3, [pc, #420]	; (80022a0 <Trajectory+0x7e0>)
 80020fc:	4a69      	ldr	r2, [pc, #420]	; (80022a4 <Trajectory+0x7e4>)
 80020fe:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 8002100:	4b63      	ldr	r3, [pc, #396]	; (8002290 <Trajectory+0x7d0>)
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
				Time_acc_tri = 0;
 8002108:	4b5e      	ldr	r3, [pc, #376]	; (8002284 <Trajectory+0x7c4>)
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
				temp_pos_acc = 0;
 8002110:	4b61      	ldr	r3, [pc, #388]	; (8002298 <Trajectory+0x7d8>)
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
				temp_v_acc = 0;
 8002118:	4b5e      	ldr	r3, [pc, #376]	; (8002294 <Trajectory+0x7d4>)
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8002120:	e302      	b.n	8002728 <Trajectory+0xc68>
			}
		}
	}
	else if(Distance < 0 && trajec_state == 1){        		// Run Down
 8002122:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <Trajectory+0x7e8>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800212c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002130:	d400      	bmi.n	8002134 <Trajectory+0x674>
				temp_pos_acc = 0;
				temp_v_acc = 0;
			}
		}
	}
}
 8002132:	e2f9      	b.n	8002728 <Trajectory+0xc68>
	else if(Distance < 0 && trajec_state == 1){        		// Run Down
 8002134:	4b59      	ldr	r3, [pc, #356]	; (800229c <Trajectory+0x7dc>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	f040 82f5 	bne.w	8002728 <Trajectory+0xc68>
		Distance_Velo_Max = (Vmax*Time_acc) + Distance ;
 800213e:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <Trajectory+0x7ec>)
 8002140:	ed93 7a00 	vldr	s14, [r3]
 8002144:	4b5a      	ldr	r3, [pc, #360]	; (80022b0 <Trajectory+0x7f0>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214e:	4b56      	ldr	r3, [pc, #344]	; (80022a8 <Trajectory+0x7e8>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002158:	4b56      	ldr	r3, [pc, #344]	; (80022b4 <Trajectory+0x7f4>)
 800215a:	edc3 7a00 	vstr	s15, [r3]
		t = (time_now - Timestamp)/1000000.0;  //s
 800215e:	4b56      	ldr	r3, [pc, #344]	; (80022b8 <Trajectory+0x7f8>)
 8002160:	ed93 7a00 	vldr	s14, [r3]
 8002164:	4b55      	ldr	r3, [pc, #340]	; (80022bc <Trajectory+0x7fc>)
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800216e:	eddf 6a54 	vldr	s13, [pc, #336]	; 80022c0 <Trajectory+0x800>
 8002172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002176:	4b44      	ldr	r3, [pc, #272]	; (8002288 <Trajectory+0x7c8>)
 8002178:	edc3 7a00 	vstr	s15, [r3]
		if(Distance_Velo_Max < 0){							//Trapezoi
 800217c:	4b4d      	ldr	r3, [pc, #308]	; (80022b4 <Trajectory+0x7f4>)
 800217e:	edd3 7a00 	vldr	s15, [r3]
 8002182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218a:	f140 8161 	bpl.w	8002450 <Trajectory+0x990>
			temp_check = 3;
 800218e:	4b4d      	ldr	r3, [pc, #308]	; (80022c4 <Trajectory+0x804>)
 8002190:	2203      	movs	r2, #3
 8002192:	701a      	strb	r2, [r3, #0]
			Time_const = Distance_Velo_Max/Vmax;
 8002194:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <Trajectory+0x7f4>)
 8002196:	edd3 6a00 	vldr	s13, [r3]
 800219a:	4b44      	ldr	r3, [pc, #272]	; (80022ac <Trajectory+0x7ec>)
 800219c:	ed93 7a00 	vldr	s14, [r3]
 80021a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021a4:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <Trajectory+0x808>)
 80021a6:	edc3 7a00 	vstr	s15, [r3]
			if(t < Time_acc){
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <Trajectory+0x7c8>)
 80021ac:	ed93 7a00 	vldr	s14, [r3]
 80021b0:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <Trajectory+0x7f0>)
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	f140 8087 	bpl.w	80022d0 <Trajectory+0x810>
				traj[2] = -Amax;
 80021c2:	4b32      	ldr	r3, [pc, #200]	; (800228c <Trajectory+0x7cc>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	eef1 7a67 	vneg.f32	s15, s15
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <Trajectory+0x7d0>)
 80021ce:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = -Amax*t;
 80021d2:	4b2e      	ldr	r3, [pc, #184]	; (800228c <Trajectory+0x7cc>)
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	eeb1 7a67 	vneg.f32	s14, s15
 80021dc:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <Trajectory+0x7c8>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <Trajectory+0x7d0>)
 80021e8:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (-Amax/2.0)*t*t + pos;
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <Trajectory+0x7cc>)
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	eef1 7a67 	vneg.f32	s15, s15
 80021f6:	ee17 3a90 	vmov	r3, s15
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f970 	bl	80004e0 <__aeabi_f2d>
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002208:	f7fe faec 	bl	80007e4 <__aeabi_ddiv>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4614      	mov	r4, r2
 8002212:	461d      	mov	r5, r3
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <Trajectory+0x7c8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe f961 	bl	80004e0 <__aeabi_f2d>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4620      	mov	r0, r4
 8002224:	4629      	mov	r1, r5
 8002226:	f7fe f9b3 	bl	8000590 <__aeabi_dmul>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4614      	mov	r4, r2
 8002230:	461d      	mov	r5, r3
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <Trajectory+0x7c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f952 	bl	80004e0 <__aeabi_f2d>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4620      	mov	r0, r4
 8002242:	4629      	mov	r1, r5
 8002244:	f7fe f9a4 	bl	8000590 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4614      	mov	r4, r2
 800224e:	461d      	mov	r5, r3
 8002250:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <Trajectory+0x80c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f943 	bl	80004e0 <__aeabi_f2d>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4620      	mov	r0, r4
 8002260:	4629      	mov	r1, r5
 8002262:	f7fd ffdf 	bl	8000224 <__adddf3>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	f7fe fc3f 	bl	8000af0 <__aeabi_d2f>
 8002272:	4603      	mov	r3, r0
 8002274:	4a06      	ldr	r2, [pc, #24]	; (8002290 <Trajectory+0x7d0>)
 8002276:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <Trajectory+0x7d0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a06      	ldr	r2, [pc, #24]	; (8002298 <Trajectory+0x7d8>)
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	e252      	b.n	8002728 <Trajectory+0xc68>
 8002282:	bf00      	nop
 8002284:	2000037c 	.word	0x2000037c
 8002288:	20000350 	.word	0x20000350
 800228c:	20000008 	.word	0x20000008
 8002290:	20000364 	.word	0x20000364
 8002294:	2000035c 	.word	0x2000035c
 8002298:	20000354 	.word	0x20000354
 800229c:	20000394 	.word	0x20000394
 80022a0:	20000374 	.word	0x20000374
 80022a4:	c1200000 	.word	0xc1200000
 80022a8:	2000034c 	.word	0x2000034c
 80022ac:	20000004 	.word	0x20000004
 80022b0:	20000378 	.word	0x20000378
 80022b4:	20000360 	.word	0x20000360
 80022b8:	20000388 	.word	0x20000388
 80022bc:	2000038c 	.word	0x2000038c
 80022c0:	49742400 	.word	0x49742400
 80022c4:	20000395 	.word	0x20000395
 80022c8:	20000384 	.word	0x20000384
 80022cc:	20000370 	.word	0x20000370
			else if(t < Time_const+Time_acc){
 80022d0:	4bac      	ldr	r3, [pc, #688]	; (8002584 <Trajectory+0xac4>)
 80022d2:	ed93 7a00 	vldr	s14, [r3]
 80022d6:	4bac      	ldr	r3, [pc, #688]	; (8002588 <Trajectory+0xac8>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e0:	4baa      	ldr	r3, [pc, #680]	; (800258c <Trajectory+0xacc>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ee:	dd27      	ble.n	8002340 <Trajectory+0x880>
				traj[2] = 0;
 80022f0:	4ba7      	ldr	r3, [pc, #668]	; (8002590 <Trajectory+0xad0>)
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
				traj[1] = -Vmax;
 80022f8:	4ba6      	ldr	r3, [pc, #664]	; (8002594 <Trajectory+0xad4>)
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	eef1 7a67 	vneg.f32	s15, s15
 8002302:	4ba3      	ldr	r3, [pc, #652]	; (8002590 <Trajectory+0xad0>)
 8002304:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (-Vmax*(t-Time_acc)) + temp_pos_acc;
 8002308:	4ba2      	ldr	r3, [pc, #648]	; (8002594 <Trajectory+0xad4>)
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	eeb1 7a67 	vneg.f32	s14, s15
 8002312:	4b9e      	ldr	r3, [pc, #632]	; (800258c <Trajectory+0xacc>)
 8002314:	edd3 6a00 	vldr	s13, [r3]
 8002318:	4b9b      	ldr	r3, [pc, #620]	; (8002588 <Trajectory+0xac8>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002322:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002326:	4b9c      	ldr	r3, [pc, #624]	; (8002598 <Trajectory+0xad8>)
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002330:	4b97      	ldr	r3, [pc, #604]	; (8002590 <Trajectory+0xad0>)
 8002332:	edc3 7a00 	vstr	s15, [r3]
				temp_pos_const = traj[0];
 8002336:	4b96      	ldr	r3, [pc, #600]	; (8002590 <Trajectory+0xad0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a98      	ldr	r2, [pc, #608]	; (800259c <Trajectory+0xadc>)
 800233c:	6013      	str	r3, [r2, #0]
}
 800233e:	e1f3      	b.n	8002728 <Trajectory+0xc68>
			else if(t < Time_const+Time_acc+Time_dec){
 8002340:	4b90      	ldr	r3, [pc, #576]	; (8002584 <Trajectory+0xac4>)
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	4b90      	ldr	r3, [pc, #576]	; (8002588 <Trajectory+0xac8>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002350:	4b93      	ldr	r3, [pc, #588]	; (80025a0 <Trajectory+0xae0>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800235a:	4b8c      	ldr	r3, [pc, #560]	; (800258c <Trajectory+0xacc>)
 800235c:	edd3 7a00 	vldr	s15, [r3]
 8002360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002368:	dd5f      	ble.n	800242a <Trajectory+0x96a>
				traj[2] = Amax;
 800236a:	4b8e      	ldr	r3, [pc, #568]	; (80025a4 <Trajectory+0xae4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a88      	ldr	r2, [pc, #544]	; (8002590 <Trajectory+0xad0>)
 8002370:	6093      	str	r3, [r2, #8]
				traj[1] = (traj[2]*(t-Time_const-Time_acc)) - Vmax;
 8002372:	4b87      	ldr	r3, [pc, #540]	; (8002590 <Trajectory+0xad0>)
 8002374:	ed93 7a02 	vldr	s14, [r3, #8]
 8002378:	4b84      	ldr	r3, [pc, #528]	; (800258c <Trajectory+0xacc>)
 800237a:	edd3 6a00 	vldr	s13, [r3]
 800237e:	4b81      	ldr	r3, [pc, #516]	; (8002584 <Trajectory+0xac4>)
 8002380:	edd3 7a00 	vldr	s15, [r3]
 8002384:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002388:	4b7f      	ldr	r3, [pc, #508]	; (8002588 <Trajectory+0xac8>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002396:	4b7f      	ldr	r3, [pc, #508]	; (8002594 <Trajectory+0xad4>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a0:	4b7b      	ldr	r3, [pc, #492]	; (8002590 <Trajectory+0xad0>)
 80023a2:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((Amax/2)*(t-Time_const-Time_acc)*(t-Time_const-Time_acc))+(traj[1]*(t-Time_const-Time_acc))+temp_pos_const;
 80023a6:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <Trajectory+0xae4>)
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023b4:	4b75      	ldr	r3, [pc, #468]	; (800258c <Trajectory+0xacc>)
 80023b6:	edd3 6a00 	vldr	s13, [r3]
 80023ba:	4b72      	ldr	r3, [pc, #456]	; (8002584 <Trajectory+0xac4>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80023c4:	4b70      	ldr	r3, [pc, #448]	; (8002588 <Trajectory+0xac8>)
 80023c6:	edd3 7a00 	vldr	s15, [r3]
 80023ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d2:	4b6e      	ldr	r3, [pc, #440]	; (800258c <Trajectory+0xacc>)
 80023d4:	edd3 6a00 	vldr	s13, [r3]
 80023d8:	4b6a      	ldr	r3, [pc, #424]	; (8002584 <Trajectory+0xac4>)
 80023da:	edd3 7a00 	vldr	s15, [r3]
 80023de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80023e2:	4b69      	ldr	r3, [pc, #420]	; (8002588 <Trajectory+0xac8>)
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f0:	4b67      	ldr	r3, [pc, #412]	; (8002590 <Trajectory+0xad0>)
 80023f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80023f6:	4b65      	ldr	r3, [pc, #404]	; (800258c <Trajectory+0xacc>)
 80023f8:	ed93 6a00 	vldr	s12, [r3]
 80023fc:	4b61      	ldr	r3, [pc, #388]	; (8002584 <Trajectory+0xac4>)
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002406:	4b60      	ldr	r3, [pc, #384]	; (8002588 <Trajectory+0xac8>)
 8002408:	edd3 7a00 	vldr	s15, [r3]
 800240c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002414:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002418:	4b60      	ldr	r3, [pc, #384]	; (800259c <Trajectory+0xadc>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	4b5b      	ldr	r3, [pc, #364]	; (8002590 <Trajectory+0xad0>)
 8002424:	edc3 7a00 	vstr	s15, [r3]
}
 8002428:	e17e      	b.n	8002728 <Trajectory+0xc68>
				trajec_state = 0;
 800242a:	4b5f      	ldr	r3, [pc, #380]	; (80025a8 <Trajectory+0xae8>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 8002430:	4b5e      	ldr	r3, [pc, #376]	; (80025ac <Trajectory+0xaec>)
 8002432:	4a5f      	ldr	r2, [pc, #380]	; (80025b0 <Trajectory+0xaf0>)
 8002434:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 8002436:	4b56      	ldr	r3, [pc, #344]	; (8002590 <Trajectory+0xad0>)
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
				temp_pos_acc = 0;
 800243e:	4b56      	ldr	r3, [pc, #344]	; (8002598 <Trajectory+0xad8>)
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
				temp_pos_const = 0;
 8002446:	4b55      	ldr	r3, [pc, #340]	; (800259c <Trajectory+0xadc>)
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
}
 800244e:	e16b      	b.n	8002728 <Trajectory+0xc68>
		else if(Distance_Velo_Max >= 0){					//Triangle
 8002450:	4b58      	ldr	r3, [pc, #352]	; (80025b4 <Trajectory+0xaf4>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245e:	da00      	bge.n	8002462 <Trajectory+0x9a2>
}
 8002460:	e162      	b.n	8002728 <Trajectory+0xc68>
			temp_check = 4;
 8002462:	4b55      	ldr	r3, [pc, #340]	; (80025b8 <Trajectory+0xaf8>)
 8002464:	2204      	movs	r2, #4
 8002466:	701a      	strb	r2, [r3, #0]
			Time_acc_tri = sqrt(-Distance/Amax);
 8002468:	4b54      	ldr	r3, [pc, #336]	; (80025bc <Trajectory+0xafc>)
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	eeb1 7a67 	vneg.f32	s14, s15
 8002472:	4b4c      	ldr	r3, [pc, #304]	; (80025a4 <Trajectory+0xae4>)
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800247c:	ee16 0a90 	vmov	r0, s13
 8002480:	f7fe f82e 	bl	80004e0 <__aeabi_f2d>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	ec43 2b10 	vmov	d0, r2, r3
 800248c:	f006 fc2c 	bl	8008ce8 <sqrt>
 8002490:	ec53 2b10 	vmov	r2, r3, d0
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe fb2a 	bl	8000af0 <__aeabi_d2f>
 800249c:	4603      	mov	r3, r0
 800249e:	4a48      	ldr	r2, [pc, #288]	; (80025c0 <Trajectory+0xb00>)
 80024a0:	6013      	str	r3, [r2, #0]
			if(t < Time_acc_tri){
 80024a2:	4b3a      	ldr	r3, [pc, #232]	; (800258c <Trajectory+0xacc>)
 80024a4:	ed93 7a00 	vldr	s14, [r3]
 80024a8:	4b45      	ldr	r3, [pc, #276]	; (80025c0 <Trajectory+0xb00>)
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	f140 8089 	bpl.w	80025cc <Trajectory+0xb0c>
				traj[2] = -Amax;
 80024ba:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <Trajectory+0xae4>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	eef1 7a67 	vneg.f32	s15, s15
 80024c4:	4b32      	ldr	r3, [pc, #200]	; (8002590 <Trajectory+0xad0>)
 80024c6:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = -Amax*t;
 80024ca:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <Trajectory+0xae4>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	eeb1 7a67 	vneg.f32	s14, s15
 80024d4:	4b2d      	ldr	r3, [pc, #180]	; (800258c <Trajectory+0xacc>)
 80024d6:	edd3 7a00 	vldr	s15, [r3]
 80024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024de:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <Trajectory+0xad0>)
 80024e0:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (-Amax/2.0)*t*t + pos;
 80024e4:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <Trajectory+0xae4>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	eef1 7a67 	vneg.f32	s15, s15
 80024ee:	ee17 3a90 	vmov	r3, s15
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fd fff4 	bl	80004e0 <__aeabi_f2d>
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002500:	f7fe f970 	bl	80007e4 <__aeabi_ddiv>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <Trajectory+0xacc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd ffe5 	bl	80004e0 <__aeabi_f2d>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4620      	mov	r0, r4
 800251c:	4629      	mov	r1, r5
 800251e:	f7fe f837 	bl	8000590 <__aeabi_dmul>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4614      	mov	r4, r2
 8002528:	461d      	mov	r5, r3
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <Trajectory+0xacc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fd ffd6 	bl	80004e0 <__aeabi_f2d>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4620      	mov	r0, r4
 800253a:	4629      	mov	r1, r5
 800253c:	f7fe f828 	bl	8000590 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4614      	mov	r4, r2
 8002546:	461d      	mov	r5, r3
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <Trajectory+0xb04>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fd ffc7 	bl	80004e0 <__aeabi_f2d>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4620      	mov	r0, r4
 8002558:	4629      	mov	r1, r5
 800255a:	f7fd fe63 	bl	8000224 <__adddf3>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	f7fe fac3 	bl	8000af0 <__aeabi_d2f>
 800256a:	4603      	mov	r3, r0
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <Trajectory+0xad0>)
 800256e:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <Trajectory+0xad0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a08      	ldr	r2, [pc, #32]	; (8002598 <Trajectory+0xad8>)
 8002576:	6013      	str	r3, [r2, #0]
				temp_v_acc = traj[1];
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <Trajectory+0xad0>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <Trajectory+0xb08>)
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	e0d2      	b.n	8002728 <Trajectory+0xc68>
 8002582:	bf00      	nop
 8002584:	20000384 	.word	0x20000384
 8002588:	20000378 	.word	0x20000378
 800258c:	20000350 	.word	0x20000350
 8002590:	20000364 	.word	0x20000364
 8002594:	20000004 	.word	0x20000004
 8002598:	20000354 	.word	0x20000354
 800259c:	20000358 	.word	0x20000358
 80025a0:	20000380 	.word	0x20000380
 80025a4:	20000008 	.word	0x20000008
 80025a8:	20000394 	.word	0x20000394
 80025ac:	20000374 	.word	0x20000374
 80025b0:	c1200000 	.word	0xc1200000
 80025b4:	20000360 	.word	0x20000360
 80025b8:	20000395 	.word	0x20000395
 80025bc:	2000034c 	.word	0x2000034c
 80025c0:	2000037c 	.word	0x2000037c
 80025c4:	20000370 	.word	0x20000370
 80025c8:	2000035c 	.word	0x2000035c
			else if(t < Time_acc_tri*2){
 80025cc:	4b57      	ldr	r3, [pc, #348]	; (800272c <Trajectory+0xc6c>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80025d6:	4b56      	ldr	r3, [pc, #344]	; (8002730 <Trajectory+0xc70>)
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e4:	f340 8089 	ble.w	80026fa <Trajectory+0xc3a>
				traj[2] = Amax;
 80025e8:	4b52      	ldr	r3, [pc, #328]	; (8002734 <Trajectory+0xc74>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <Trajectory+0xc78>)
 80025ee:	6093      	str	r3, [r2, #8]
				traj[1] = temp_v_acc + (Amax*(t-Time_acc_tri));
 80025f0:	4b4f      	ldr	r3, [pc, #316]	; (8002730 <Trajectory+0xc70>)
 80025f2:	ed93 7a00 	vldr	s14, [r3]
 80025f6:	4b4d      	ldr	r3, [pc, #308]	; (800272c <Trajectory+0xc6c>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002600:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <Trajectory+0xc74>)
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800260a:	4b4c      	ldr	r3, [pc, #304]	; (800273c <Trajectory+0xc7c>)
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002614:	4b48      	ldr	r3, [pc, #288]	; (8002738 <Trajectory+0xc78>)
 8002616:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((-Amax/2.0)*(t-Time_acc_tri)*(t-Time_acc_tri))+(traj[1]*(t-Time_acc_tri))+temp_pos_acc;
 800261a:	4b46      	ldr	r3, [pc, #280]	; (8002734 <Trajectory+0xc74>)
 800261c:	edd3 7a00 	vldr	s15, [r3]
 8002620:	eef1 7a67 	vneg.f32	s15, s15
 8002624:	ee17 3a90 	vmov	r3, s15
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd ff59 	bl	80004e0 <__aeabi_f2d>
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002636:	f7fe f8d5 	bl	80007e4 <__aeabi_ddiv>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4614      	mov	r4, r2
 8002640:	461d      	mov	r5, r3
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <Trajectory+0xc70>)
 8002644:	ed93 7a00 	vldr	s14, [r3]
 8002648:	4b38      	ldr	r3, [pc, #224]	; (800272c <Trajectory+0xc6c>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002652:	ee17 0a90 	vmov	r0, s15
 8002656:	f7fd ff43 	bl	80004e0 <__aeabi_f2d>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4620      	mov	r0, r4
 8002660:	4629      	mov	r1, r5
 8002662:	f7fd ff95 	bl	8000590 <__aeabi_dmul>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4614      	mov	r4, r2
 800266c:	461d      	mov	r5, r3
 800266e:	4b30      	ldr	r3, [pc, #192]	; (8002730 <Trajectory+0xc70>)
 8002670:	ed93 7a00 	vldr	s14, [r3]
 8002674:	4b2d      	ldr	r3, [pc, #180]	; (800272c <Trajectory+0xc6c>)
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267e:	ee17 0a90 	vmov	r0, s15
 8002682:	f7fd ff2d 	bl	80004e0 <__aeabi_f2d>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4620      	mov	r0, r4
 800268c:	4629      	mov	r1, r5
 800268e:	f7fd ff7f 	bl	8000590 <__aeabi_dmul>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4614      	mov	r4, r2
 8002698:	461d      	mov	r5, r3
 800269a:	4b27      	ldr	r3, [pc, #156]	; (8002738 <Trajectory+0xc78>)
 800269c:	ed93 7a01 	vldr	s14, [r3, #4]
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <Trajectory+0xc70>)
 80026a2:	edd3 6a00 	vldr	s13, [r3]
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <Trajectory+0xc6c>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80026b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b4:	ee17 0a90 	vmov	r0, s15
 80026b8:	f7fd ff12 	bl	80004e0 <__aeabi_f2d>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4620      	mov	r0, r4
 80026c2:	4629      	mov	r1, r5
 80026c4:	f7fd fdae 	bl	8000224 <__adddf3>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4614      	mov	r4, r2
 80026ce:	461d      	mov	r5, r3
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <Trajectory+0xc80>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd ff03 	bl	80004e0 <__aeabi_f2d>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4620      	mov	r0, r4
 80026e0:	4629      	mov	r1, r5
 80026e2:	f7fd fd9f 	bl	8000224 <__adddf3>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	f7fe f9ff 	bl	8000af0 <__aeabi_d2f>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4a10      	ldr	r2, [pc, #64]	; (8002738 <Trajectory+0xc78>)
 80026f6:	6013      	str	r3, [r2, #0]
}
 80026f8:	e016      	b.n	8002728 <Trajectory+0xc68>
				trajec_state = 0;
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <Trajectory+0xc84>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <Trajectory+0xc88>)
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <Trajectory+0xc8c>)
 8002704:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <Trajectory+0xc78>)
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
				Time_acc_tri = 0;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <Trajectory+0xc6c>)
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
				temp_pos_acc = 0;
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <Trajectory+0xc80>)
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
				temp_v_acc = 0;
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <Trajectory+0xc7c>)
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
}
 8002726:	e7ff      	b.n	8002728 <Trajectory+0xc68>
 8002728:	bf00      	nop
 800272a:	bdb0      	pop	{r4, r5, r7, pc}
 800272c:	2000037c 	.word	0x2000037c
 8002730:	20000350 	.word	0x20000350
 8002734:	20000008 	.word	0x20000008
 8002738:	20000364 	.word	0x20000364
 800273c:	2000035c 	.word	0x2000035c
 8002740:	20000354 	.word	0x20000354
 8002744:	20000394 	.word	0x20000394
 8002748:	20000374 	.word	0x20000374
 800274c:	c1200000 	.word	0xc1200000

08002750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002754:	b672      	cpsid	i
}
 8002756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002758:	e7fe      	b.n	8002758 <Error_Handler+0x8>
	...

0800275c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <HAL_MspInit+0x44>)
 8002764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002766:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <HAL_MspInit+0x44>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6613      	str	r3, [r2, #96]	; 0x60
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <HAL_MspInit+0x44>)
 8002770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_MspInit+0x44>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <HAL_MspInit+0x44>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	6593      	str	r3, [r2, #88]	; 0x58
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_MspInit+0x44>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002792:	f002 ffe5 	bl	8005760 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0a0      	sub	sp, #128	; 0x80
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027bc:	f107 0318 	add.w	r3, r7, #24
 80027c0:	2254      	movs	r2, #84	; 0x54
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f006 fa5d 	bl	8008c84 <memset>
  if(hadc->Instance==ADC1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027d2:	f040 8081 	bne.w	80028d8 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80027d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80027dc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80027e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027e2:	f107 0318 	add.w	r3, r7, #24
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 fcf8 	bl	80061dc <HAL_RCCEx_PeriphCLKConfig>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80027f2:	f7ff ffad 	bl	8002750 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80027f6:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <HAL_ADC_MspInit+0x13c>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a39      	ldr	r2, [pc, #228]	; (80028e0 <HAL_ADC_MspInit+0x13c>)
 80027fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002802:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <HAL_ADC_MspInit+0x13c>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	4b34      	ldr	r3, [pc, #208]	; (80028e0 <HAL_ADC_MspInit+0x13c>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	4a33      	ldr	r2, [pc, #204]	; (80028e0 <HAL_ADC_MspInit+0x13c>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281a:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <HAL_ADC_MspInit+0x13c>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <HAL_ADC_MspInit+0x13c>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	4a2d      	ldr	r2, [pc, #180]	; (80028e0 <HAL_ADC_MspInit+0x13c>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_ADC_MspInit+0x13c>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800283e:	2301      	movs	r3, #1
 8002840:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002842:	2303      	movs	r3, #3
 8002844:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800284e:	4619      	mov	r1, r3
 8002850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002854:	f002 fd2e 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_14;
 8002858:	f244 0302 	movw	r3, #16386	; 0x4002
 800285c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800285e:	2303      	movs	r3, #3
 8002860:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002866:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800286a:	4619      	mov	r1, r3
 800286c:	481d      	ldr	r0, [pc, #116]	; (80028e4 <HAL_ADC_MspInit+0x140>)
 800286e:	f002 fd21 	bl	80052b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_ADC_MspInit+0x144>)
 8002874:	4a1d      	ldr	r2, [pc, #116]	; (80028ec <HAL_ADC_MspInit+0x148>)
 8002876:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_ADC_MspInit+0x144>)
 800287a:	2205      	movs	r2, #5
 800287c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800287e:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_ADC_MspInit+0x144>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_ADC_MspInit+0x144>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <HAL_ADC_MspInit+0x144>)
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_ADC_MspInit+0x144>)
 8002892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002896:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <HAL_ADC_MspInit+0x144>)
 800289a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800289e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_ADC_MspInit+0x144>)
 80028a2:	2220      	movs	r2, #32
 80028a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_ADC_MspInit+0x144>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028ac:	480e      	ldr	r0, [pc, #56]	; (80028e8 <HAL_ADC_MspInit+0x144>)
 80028ae:	f002 fa8f 	bl	8004dd0 <HAL_DMA_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_ADC_MspInit+0x118>
    {
      Error_Handler();
 80028b8:	f7ff ff4a 	bl	8002750 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_ADC_MspInit+0x144>)
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
 80028c2:	4a09      	ldr	r2, [pc, #36]	; (80028e8 <HAL_ADC_MspInit+0x144>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2100      	movs	r1, #0
 80028cc:	2012      	movs	r0, #18
 80028ce:	f002 fa4a 	bl	8004d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80028d2:	2012      	movs	r0, #18
 80028d4:	f002 fa61 	bl	8004d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028d8:	bf00      	nop
 80028da:	3780      	adds	r7, #128	; 0x80
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	48000400 	.word	0x48000400
 80028e8:	20000100 	.word	0x20000100
 80028ec:	40020008 	.word	0x40020008

080028f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b09e      	sub	sp, #120	; 0x78
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	2254      	movs	r2, #84	; 0x54
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f006 f9b7 	bl	8008c84 <memset>
  if(huart->Instance==LPUART1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_UART_MspInit+0xa8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d136      	bne.n	800298e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002920:	2320      	movs	r3, #32
 8002922:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002924:	2300      	movs	r3, #0
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002928:	f107 0310 	add.w	r3, r7, #16
 800292c:	4618      	mov	r0, r3
 800292e:	f003 fc55 	bl	80061dc <HAL_RCCEx_PeriphCLKConfig>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002938:	f7ff ff0a 	bl	8002750 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <HAL_UART_MspInit+0xac>)
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_UART_MspInit+0xac>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <HAL_UART_MspInit+0xac>)
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_UART_MspInit+0xac>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_UART_MspInit+0xac>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002960:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_UART_MspInit+0xac>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800296c:	230c      	movs	r3, #12
 800296e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800297c:	230c      	movs	r3, #12
 800297e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002980:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002984:	4619      	mov	r1, r3
 8002986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800298a:	f002 fc93 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800298e:	bf00      	nop
 8002990:	3778      	adds	r7, #120	; 0x78
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40008000 	.word	0x40008000
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_TIM_Encoder_MspInit+0x80>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d129      	bne.n	8002a16 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_TIM_Encoder_MspInit+0x84>)
 80029c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_TIM_Encoder_MspInit+0x84>)
 80029c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029cc:	6613      	str	r3, [r2, #96]	; 0x60
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_TIM_Encoder_MspInit+0x84>)
 80029d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_TIM_Encoder_MspInit+0x84>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <HAL_TIM_Encoder_MspInit+0x84>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_TIM_Encoder_MspInit+0x84>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002a04:	2306      	movs	r3, #6
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a12:	f002 fc4f 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a16:	bf00      	nop
 8002a18:	3728      	adds	r7, #40	; 0x28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40021000 	.word	0x40021000

08002a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d114      	bne.n	8002a64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_TIM_Base_MspInit+0x68>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <HAL_TIM_Base_MspInit+0x68>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6593      	str	r3, [r2, #88]	; 0x58
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_TIM_Base_MspInit+0x68>)
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	201c      	movs	r0, #28
 8002a58:	f002 f985 	bl	8004d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a5c:	201c      	movs	r0, #28
 8002a5e:	f002 f99c 	bl	8004d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002a62:	e010      	b.n	8002a86 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <HAL_TIM_Base_MspInit+0x6c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10b      	bne.n	8002a86 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_TIM_Base_MspInit+0x68>)
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_TIM_Base_MspInit+0x68>)
 8002a74:	f043 0308 	orr.w	r3, r3, #8
 8002a78:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_TIM_Base_MspInit+0x68>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40000c00 	.word	0x40000c00

08002a98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 030c 	add.w	r3, r7, #12
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a11      	ldr	r2, [pc, #68]	; (8002afc <HAL_TIM_MspPostInit+0x64>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d11c      	bne.n	8002af4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <HAL_TIM_MspPostInit+0x68>)
 8002abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abe:	4a10      	ldr	r2, [pc, #64]	; (8002b00 <HAL_TIM_MspPostInit+0x68>)
 8002ac0:	f043 0304 	orr.w	r3, r3, #4
 8002ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <HAL_TIM_MspPostInit+0x68>)
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae8:	f107 030c 	add.w	r3, r7, #12
 8002aec:	4619      	mov	r1, r3
 8002aee:	4805      	ldr	r0, [pc, #20]	; (8002b04 <HAL_TIM_MspPostInit+0x6c>)
 8002af0:	f002 fbe0 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002af4:	bf00      	nop
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40000c00 	.word	0x40000c00
 8002b00:	40021000 	.word	0x40021000
 8002b04:	48000800 	.word	0x48000800

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b0c:	e7fe      	b.n	8002b0c <NMI_Handler+0x4>

08002b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler+0x4>

08002b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <MemManage_Handler+0x4>

08002b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b54:	f000 f8b6 	bl	8002cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <DMA1_Channel1_IRQHandler+0x10>)
 8002b62:	f002 fa58 	bl	8005016 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000100 	.word	0x20000100

08002b70 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <ADC1_2_IRQHandler+0x10>)
 8002b76:	f000 fddb 	bl	8003730 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000094 	.word	0x20000094

08002b84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <TIM2_IRQHandler+0x10>)
 8002b8a:	f004 f8e5 	bl	8006d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000240 	.word	0x20000240

08002b98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002b9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ba0:	f002 fd22 	bl	80055e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <SystemInit+0x20>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <SystemInit+0x20>)
 8002bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bd0:	f7ff ffea 	bl	8002ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bd4:	480c      	ldr	r0, [pc, #48]	; (8002c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bd6:	490d      	ldr	r1, [pc, #52]	; (8002c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <LoopForever+0xe>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002bdc:	e002      	b.n	8002be4 <LoopCopyDataInit>

08002bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be2:	3304      	adds	r3, #4

08002be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be8:	d3f9      	bcc.n	8002bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bec:	4c0a      	ldr	r4, [pc, #40]	; (8002c18 <LoopForever+0x16>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf0:	e001      	b.n	8002bf6 <LoopFillZerobss>

08002bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf4:	3204      	adds	r2, #4

08002bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf8:	d3fb      	bcc.n	8002bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bfa:	f006 f851 	bl	8008ca0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bfe:	f7fe f945 	bl	8000e8c <main>

08002c02 <LoopForever>:

LoopForever:
    b LoopForever
 8002c02:	e7fe      	b.n	8002c02 <LoopForever>
  ldr   r0, =_estack
 8002c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c0c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002c10:	08008f5c 	.word	0x08008f5c
  ldr r2, =_sbss
 8002c14:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002c18:	200004d8 	.word	0x200004d8

08002c1c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c1c:	e7fe      	b.n	8002c1c <ADC3_IRQHandler>

08002c1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c28:	2003      	movs	r0, #3
 8002c2a:	f002 f891 	bl	8004d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f000 f80e 	bl	8002c50 <HAL_InitTick>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	71fb      	strb	r3, [r7, #7]
 8002c3e:	e001      	b.n	8002c44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c40:	f7ff fd8c 	bl	800275c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c44:	79fb      	ldrb	r3, [r7, #7]

}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_InitTick+0x68>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d022      	beq.n	8002caa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_InitTick+0x6c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <HAL_InitTick+0x68>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 f89c 	bl	8004db6 <HAL_SYSTICK_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10f      	bne.n	8002ca4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	d809      	bhi.n	8002c9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c92:	f002 f868 	bl	8004d66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_InitTick+0x70>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	e007      	b.n	8002cae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	e004      	b.n	8002cae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e001      	b.n	8002cae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000014 	.word	0x20000014
 8002cbc:	2000000c 	.word	0x2000000c
 8002cc0:	20000010 	.word	0x20000010

08002cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_IncTick+0x1c>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4a03      	ldr	r2, [pc, #12]	; (8002ce0 <HAL_IncTick+0x1c>)
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	2000039c 	.word	0x2000039c
 8002ce4:	20000014 	.word	0x20000014

08002ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return uwTick;
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <HAL_GetTick+0x14>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	2000039c 	.word	0x2000039c

08002d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff ffee 	bl	8002ce8 <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d004      	beq.n	8002d24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_Delay+0x40>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4413      	add	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d24:	bf00      	nop
 8002d26:	f7ff ffdf 	bl	8002ce8 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d8f7      	bhi.n	8002d26 <HAL_Delay+0x26>
  {
  }
}
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000014 	.word	0x20000014

08002d44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	609a      	str	r2, [r3, #8]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3360      	adds	r3, #96	; 0x60
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <LL_ADC_SetOffset+0x44>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	03fff000 	.word	0x03fff000

08002df4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3360      	adds	r3, #96	; 0x60
 8002e02:	461a      	mov	r2, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3360      	adds	r3, #96	; 0x60
 8002e30:	461a      	mov	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b087      	sub	sp, #28
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3360      	adds	r3, #96	; 0x60
 8002e66:	461a      	mov	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002e80:	bf00      	nop
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3360      	adds	r3, #96	; 0x60
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	615a      	str	r2, [r3, #20]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b087      	sub	sp, #28
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3330      	adds	r3, #48	; 0x30
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	4413      	add	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	211f      	movs	r1, #31
 8002f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	401a      	ands	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	0e9b      	lsrs	r3, r3, #26
 8002f46:	f003 011f 	and.w	r1, r3, #31
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	431a      	orrs	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3314      	adds	r3, #20
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	0e5b      	lsrs	r3, r3, #25
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	4413      	add	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	0d1b      	lsrs	r3, r3, #20
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	2107      	movs	r1, #7
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	0d1b      	lsrs	r3, r3, #20
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	401a      	ands	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0318 	and.w	r3, r3, #24
 8003006:	4908      	ldr	r1, [pc, #32]	; (8003028 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003008:	40d9      	lsrs	r1, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	400b      	ands	r3, r1
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	431a      	orrs	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	0007ffff 	.word	0x0007ffff

0800302c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 031f 	and.w	r3, r3, #31
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6093      	str	r3, [r2, #8]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800309c:	d101      	bne.n	80030a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80030c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ec:	d101      	bne.n	80030f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003114:	f043 0201 	orr.w	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800313c:	f043 0202 	orr.w	r2, r3, #2
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <LL_ADC_IsEnabled+0x18>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <LL_ADC_IsEnabled+0x1a>
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b02      	cmp	r3, #2
 8003188:	d101      	bne.n	800318e <LL_ADC_IsDisableOngoing+0x18>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <LL_ADC_IsDisableOngoing+0x1a>
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031b0:	f043 0204 	orr.w	r2, r3, #4
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d101      	bne.n	80031dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d101      	bne.n	8003202 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e1a9      	b.n	800357e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff fab3 	bl	80027a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff19 	bl	8003088 <LL_ADC_IsDeepPowerDownEnabled>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff feff 	bl	8003064 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ff34 	bl	80030d8 <LL_ADC_IsInternalRegulatorEnabled>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d115      	bne.n	80032a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff18 	bl	80030b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003280:	4b9c      	ldr	r3, [pc, #624]	; (80034f4 <HAL_ADC_Init+0x2e4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	099b      	lsrs	r3, r3, #6
 8003286:	4a9c      	ldr	r2, [pc, #624]	; (80034f8 <HAL_ADC_Init+0x2e8>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	099b      	lsrs	r3, r3, #6
 800328e:	3301      	adds	r3, #1
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003294:	e002      	b.n	800329c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	3b01      	subs	r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f9      	bne.n	8003296 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff16 	bl	80030d8 <LL_ADC_IsInternalRegulatorEnabled>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10d      	bne.n	80032ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	f043 0210 	orr.w	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c2:	f043 0201 	orr.w	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ff76 	bl	80031c4 <LL_ADC_REG_IsConversionOngoing>
 80032d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f040 8142 	bne.w	800356c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 813e 	bne.w	800356c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032f8:	f043 0202 	orr.w	r2, r3, #2
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff23 	bl	8003150 <LL_ADC_IsEnabled>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d141      	bne.n	8003394 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003318:	d004      	beq.n	8003324 <HAL_ADC_Init+0x114>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a77      	ldr	r2, [pc, #476]	; (80034fc <HAL_ADC_Init+0x2ec>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10f      	bne.n	8003344 <HAL_ADC_Init+0x134>
 8003324:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003328:	f7ff ff12 	bl	8003150 <LL_ADC_IsEnabled>
 800332c:	4604      	mov	r4, r0
 800332e:	4873      	ldr	r0, [pc, #460]	; (80034fc <HAL_ADC_Init+0x2ec>)
 8003330:	f7ff ff0e 	bl	8003150 <LL_ADC_IsEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	4323      	orrs	r3, r4
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e012      	b.n	800336a <HAL_ADC_Init+0x15a>
 8003344:	486e      	ldr	r0, [pc, #440]	; (8003500 <HAL_ADC_Init+0x2f0>)
 8003346:	f7ff ff03 	bl	8003150 <LL_ADC_IsEnabled>
 800334a:	4604      	mov	r4, r0
 800334c:	486d      	ldr	r0, [pc, #436]	; (8003504 <HAL_ADC_Init+0x2f4>)
 800334e:	f7ff feff 	bl	8003150 <LL_ADC_IsEnabled>
 8003352:	4603      	mov	r3, r0
 8003354:	431c      	orrs	r4, r3
 8003356:	486c      	ldr	r0, [pc, #432]	; (8003508 <HAL_ADC_Init+0x2f8>)
 8003358:	f7ff fefa 	bl	8003150 <LL_ADC_IsEnabled>
 800335c:	4603      	mov	r3, r0
 800335e:	4323      	orrs	r3, r4
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d012      	beq.n	8003394 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003376:	d004      	beq.n	8003382 <HAL_ADC_Init+0x172>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a5f      	ldr	r2, [pc, #380]	; (80034fc <HAL_ADC_Init+0x2ec>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d101      	bne.n	8003386 <HAL_ADC_Init+0x176>
 8003382:	4a62      	ldr	r2, [pc, #392]	; (800350c <HAL_ADC_Init+0x2fc>)
 8003384:	e000      	b.n	8003388 <HAL_ADC_Init+0x178>
 8003386:	4a62      	ldr	r2, [pc, #392]	; (8003510 <HAL_ADC_Init+0x300>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f7ff fcd8 	bl	8002d44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7f5b      	ldrb	r3, [r3, #29]
 8003398:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800339e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80033a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80033aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d106      	bne.n	80033d0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	3b01      	subs	r3, #1
 80033c8:	045b      	lsls	r3, r3, #17
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	4b48      	ldr	r3, [pc, #288]	; (8003514 <HAL_ADC_Init+0x304>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	69b9      	ldr	r1, [r7, #24]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fee5 	bl	80031ea <LL_ADC_INJ_IsConversionOngoing>
 8003420:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d17f      	bne.n	8003528 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d17c      	bne.n	8003528 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003432:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800343a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800344a:	f023 0302 	bic.w	r3, r3, #2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	69b9      	ldr	r1, [r7, #24]
 8003454:	430b      	orrs	r3, r1
 8003456:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d017      	beq.n	8003490 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800346e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003478:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800347c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6911      	ldr	r1, [r2, #16]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	430b      	orrs	r3, r1
 800348a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800348e:	e013      	b.n	80034b8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800349e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80034b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034b4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d12a      	bne.n	8003518 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80034cc:	f023 0304 	bic.w	r3, r3, #4
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034d8:	4311      	orrs	r1, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80034de:	4311      	orrs	r1, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034e4:	430a      	orrs	r2, r1
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	611a      	str	r2, [r3, #16]
 80034f2:	e019      	b.n	8003528 <HAL_ADC_Init+0x318>
 80034f4:	2000000c 	.word	0x2000000c
 80034f8:	053e2d63 	.word	0x053e2d63
 80034fc:	50000100 	.word	0x50000100
 8003500:	50000400 	.word	0x50000400
 8003504:	50000500 	.word	0x50000500
 8003508:	50000600 	.word	0x50000600
 800350c:	50000300 	.word	0x50000300
 8003510:	50000700 	.word	0x50000700
 8003514:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d10c      	bne.n	800354a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f023 010f 	bic.w	r1, r3, #15
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
 8003548:	e007      	b.n	800355a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 020f 	bic.w	r2, r2, #15
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	f023 0303 	bic.w	r3, r3, #3
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	65da      	str	r2, [r3, #92]	; 0x5c
 800356a:	e007      	b.n	800357c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003570:	f043 0210 	orr.w	r2, r3, #16
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800357c:	7ffb      	ldrb	r3, [r7, #31]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3724      	adds	r7, #36	; 0x24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd90      	pop	{r4, r7, pc}
 8003586:	bf00      	nop

08003588 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800359c:	d004      	beq.n	80035a8 <HAL_ADC_Start_DMA+0x20>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a5a      	ldr	r2, [pc, #360]	; (800370c <HAL_ADC_Start_DMA+0x184>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d101      	bne.n	80035ac <HAL_ADC_Start_DMA+0x24>
 80035a8:	4b59      	ldr	r3, [pc, #356]	; (8003710 <HAL_ADC_Start_DMA+0x188>)
 80035aa:	e000      	b.n	80035ae <HAL_ADC_Start_DMA+0x26>
 80035ac:	4b59      	ldr	r3, [pc, #356]	; (8003714 <HAL_ADC_Start_DMA+0x18c>)
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fd3c 	bl	800302c <LL_ADC_GetMultimode>
 80035b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fe02 	bl	80031c4 <LL_ADC_REG_IsConversionOngoing>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 809b 	bne.w	80036fe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_Start_DMA+0x4e>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e096      	b.n	8003704 <HAL_ADC_Start_DMA+0x17c>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a4d      	ldr	r2, [pc, #308]	; (8003718 <HAL_ADC_Start_DMA+0x190>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d008      	beq.n	80035fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d002      	beq.n	80035fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b09      	cmp	r3, #9
 80035f8:	d17a      	bne.n	80036f0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 ff60 	bl	80044c0 <ADC_Enable>
 8003600:	4603      	mov	r3, r0
 8003602:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d16d      	bne.n	80036e6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a3a      	ldr	r2, [pc, #232]	; (800370c <HAL_ADC_Start_DMA+0x184>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d009      	beq.n	800363c <HAL_ADC_Start_DMA+0xb4>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a3b      	ldr	r2, [pc, #236]	; (800371c <HAL_ADC_Start_DMA+0x194>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d002      	beq.n	8003638 <HAL_ADC_Start_DMA+0xb0>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	e003      	b.n	8003640 <HAL_ADC_Start_DMA+0xb8>
 8003638:	4b39      	ldr	r3, [pc, #228]	; (8003720 <HAL_ADC_Start_DMA+0x198>)
 800363a:	e001      	b.n	8003640 <HAL_ADC_Start_DMA+0xb8>
 800363c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	4293      	cmp	r3, r2
 8003646:	d002      	beq.n	800364e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366a:	f023 0206 	bic.w	r2, r3, #6
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	661a      	str	r2, [r3, #96]	; 0x60
 8003672:	e002      	b.n	800367a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367e:	4a29      	ldr	r2, [pc, #164]	; (8003724 <HAL_ADC_Start_DMA+0x19c>)
 8003680:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	4a28      	ldr	r2, [pc, #160]	; (8003728 <HAL_ADC_Start_DMA+0x1a0>)
 8003688:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	4a27      	ldr	r2, [pc, #156]	; (800372c <HAL_ADC_Start_DMA+0x1a4>)
 8003690:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	221c      	movs	r2, #28
 8003698:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0210 	orr.w	r2, r2, #16
 80036b0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3340      	adds	r3, #64	; 0x40
 80036cc:	4619      	mov	r1, r3
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f001 fc25 	bl	8004f20 <HAL_DMA_Start_IT>
 80036d6:	4603      	mov	r3, r0
 80036d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fd5c 	bl	800319c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80036e4:	e00d      	b.n	8003702 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80036ee:	e008      	b.n	8003702 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80036fc:	e001      	b.n	8003702 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
 8003700:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003702:	7dfb      	ldrb	r3, [r7, #23]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	50000100 	.word	0x50000100
 8003710:	50000300 	.word	0x50000300
 8003714:	50000700 	.word	0x50000700
 8003718:	50000600 	.word	0x50000600
 800371c:	50000500 	.word	0x50000500
 8003720:	50000400 	.word	0x50000400
 8003724:	080046ab 	.word	0x080046ab
 8003728:	08004783 	.word	0x08004783
 800372c:	0800479f 	.word	0x0800479f

08003730 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	; 0x28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003738:	2300      	movs	r3, #0
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003754:	d004      	beq.n	8003760 <HAL_ADC_IRQHandler+0x30>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a8e      	ldr	r2, [pc, #568]	; (8003994 <HAL_ADC_IRQHandler+0x264>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_ADC_IRQHandler+0x34>
 8003760:	4b8d      	ldr	r3, [pc, #564]	; (8003998 <HAL_ADC_IRQHandler+0x268>)
 8003762:	e000      	b.n	8003766 <HAL_ADC_IRQHandler+0x36>
 8003764:	4b8d      	ldr	r3, [pc, #564]	; (800399c <HAL_ADC_IRQHandler+0x26c>)
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fc60 	bl	800302c <LL_ADC_GetMultimode>
 800376c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d017      	beq.n	80037a8 <HAL_ADC_IRQHandler+0x78>
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d012      	beq.n	80037a8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b00      	cmp	r3, #0
 800378c:	d105      	bne.n	800379a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f001 f8f6 	bl	800498c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2202      	movs	r2, #2
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d004      	beq.n	80037bc <HAL_ADC_IRQHandler+0x8c>
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8094 	beq.w	80038f0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 808e 	beq.w	80038f0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d105      	bne.n	80037ec <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fb79 	bl	8002ee8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d072      	beq.n	80038e2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a64      	ldr	r2, [pc, #400]	; (8003994 <HAL_ADC_IRQHandler+0x264>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d009      	beq.n	800381a <HAL_ADC_IRQHandler+0xea>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <HAL_ADC_IRQHandler+0x270>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d002      	beq.n	8003816 <HAL_ADC_IRQHandler+0xe6>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	e003      	b.n	800381e <HAL_ADC_IRQHandler+0xee>
 8003816:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <HAL_ADC_IRQHandler+0x274>)
 8003818:	e001      	b.n	800381e <HAL_ADC_IRQHandler+0xee>
 800381a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	4293      	cmp	r3, r2
 8003824:	d008      	beq.n	8003838 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b05      	cmp	r3, #5
 8003830:	d002      	beq.n	8003838 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b09      	cmp	r3, #9
 8003836:	d104      	bne.n	8003842 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	623b      	str	r3, [r7, #32]
 8003840:	e014      	b.n	800386c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a53      	ldr	r2, [pc, #332]	; (8003994 <HAL_ADC_IRQHandler+0x264>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_ADC_IRQHandler+0x130>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a53      	ldr	r2, [pc, #332]	; (80039a0 <HAL_ADC_IRQHandler+0x270>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d002      	beq.n	800385c <HAL_ADC_IRQHandler+0x12c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	e003      	b.n	8003864 <HAL_ADC_IRQHandler+0x134>
 800385c:	4b51      	ldr	r3, [pc, #324]	; (80039a4 <HAL_ADC_IRQHandler+0x274>)
 800385e:	e001      	b.n	8003864 <HAL_ADC_IRQHandler+0x134>
 8003860:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003864:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d135      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b08      	cmp	r3, #8
 8003882:	d12e      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff fc9b 	bl	80031c4 <LL_ADC_REG_IsConversionOngoing>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d11a      	bne.n	80038ca <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 020c 	bic.w	r2, r2, #12
 80038a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d112      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c0:	f043 0201 	orr.w	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80038c8:	e00b      	b.n	80038e2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	f043 0210 	orr.w	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f984 	bl	8003bf0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	220c      	movs	r2, #12
 80038ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <HAL_ADC_IRQHandler+0x1d4>
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80b3 	beq.w	8003a76 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80ad 	beq.w	8003a76 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fb14 	bl	8002f66 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800393e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff facf 	bl	8002ee8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800394a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a10      	ldr	r2, [pc, #64]	; (8003994 <HAL_ADC_IRQHandler+0x264>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_ADC_IRQHandler+0x23a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <HAL_ADC_IRQHandler+0x270>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d002      	beq.n	8003966 <HAL_ADC_IRQHandler+0x236>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	e003      	b.n	800396e <HAL_ADC_IRQHandler+0x23e>
 8003966:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <HAL_ADC_IRQHandler+0x274>)
 8003968:	e001      	b.n	800396e <HAL_ADC_IRQHandler+0x23e>
 800396a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6812      	ldr	r2, [r2, #0]
 8003972:	4293      	cmp	r3, r2
 8003974:	d008      	beq.n	8003988 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b06      	cmp	r3, #6
 8003980:	d002      	beq.n	8003988 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b07      	cmp	r3, #7
 8003986:	d10f      	bne.n	80039a8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	e01f      	b.n	80039d2 <HAL_ADC_IRQHandler+0x2a2>
 8003992:	bf00      	nop
 8003994:	50000100 	.word	0x50000100
 8003998:	50000300 	.word	0x50000300
 800399c:	50000700 	.word	0x50000700
 80039a0:	50000500 	.word	0x50000500
 80039a4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a8b      	ldr	r2, [pc, #556]	; (8003bdc <HAL_ADC_IRQHandler+0x4ac>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x296>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a8a      	ldr	r2, [pc, #552]	; (8003be0 <HAL_ADC_IRQHandler+0x4b0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d002      	beq.n	80039c2 <HAL_ADC_IRQHandler+0x292>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	e003      	b.n	80039ca <HAL_ADC_IRQHandler+0x29a>
 80039c2:	4b88      	ldr	r3, [pc, #544]	; (8003be4 <HAL_ADC_IRQHandler+0x4b4>)
 80039c4:	e001      	b.n	80039ca <HAL_ADC_IRQHandler+0x29a>
 80039c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039ca:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d047      	beq.n	8003a68 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <HAL_ADC_IRQHandler+0x2c2>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d03f      	beq.n	8003a68 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d13a      	bne.n	8003a68 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d133      	bne.n	8003a68 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d12e      	bne.n	8003a68 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fbeb 	bl	80031ea <LL_ADC_INJ_IsConversionOngoing>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11a      	bne.n	8003a50 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a28:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d112      	bne.n	8003a68 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	f043 0201 	orr.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a4e:	e00b      	b.n	8003a68 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	f043 0210 	orr.w	r2, r3, #16
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a60:	f043 0201 	orr.w	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 ff67 	bl	800493c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2260      	movs	r2, #96	; 0x60
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d011      	beq.n	8003aa4 <HAL_ADC_IRQHandler+0x374>
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00c      	beq.n	8003aa4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8be 	bl	8003c18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2280      	movs	r2, #128	; 0x80
 8003aa2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d012      	beq.n	8003ad4 <HAL_ADC_IRQHandler+0x3a4>
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 ff4d 	bl	8004964 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ad2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d012      	beq.n	8003b04 <HAL_ADC_IRQHandler+0x3d4>
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00d      	beq.n	8003b04 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 ff3f 	bl	8004978 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d043      	beq.n	8003b96 <HAL_ADC_IRQHandler+0x466>
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d03e      	beq.n	8003b96 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d102      	bne.n	8003b26 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003b20:	2301      	movs	r3, #1
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
 8003b24:	e021      	b.n	8003b6a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d015      	beq.n	8003b58 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b34:	d004      	beq.n	8003b40 <HAL_ADC_IRQHandler+0x410>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a28      	ldr	r2, [pc, #160]	; (8003bdc <HAL_ADC_IRQHandler+0x4ac>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <HAL_ADC_IRQHandler+0x414>
 8003b40:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <HAL_ADC_IRQHandler+0x4b8>)
 8003b42:	e000      	b.n	8003b46 <HAL_ADC_IRQHandler+0x416>
 8003b44:	4b29      	ldr	r3, [pc, #164]	; (8003bec <HAL_ADC_IRQHandler+0x4bc>)
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fa7e 	bl	8003048 <LL_ADC_GetMultiDMATransfer>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b52:	2301      	movs	r3, #1
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
 8003b56:	e008      	b.n	8003b6a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b66:	2301      	movs	r3, #1
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10e      	bne.n	8003b8e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b80:	f043 0202 	orr.w	r2, r3, #2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f84f 	bl	8003c2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2210      	movs	r2, #16
 8003b94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d018      	beq.n	8003bd2 <HAL_ADC_IRQHandler+0x4a2>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d013      	beq.n	8003bd2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bba:	f043 0208 	orr.w	r2, r3, #8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bca:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 febf 	bl	8004950 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003bd2:	bf00      	nop
 8003bd4:	3728      	adds	r7, #40	; 0x28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	50000100 	.word	0x50000100
 8003be0:	50000500 	.word	0x50000500
 8003be4:	50000400 	.word	0x50000400
 8003be8:	50000300 	.word	0x50000300
 8003bec:	50000700 	.word	0x50000700

08003bf0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b0b6      	sub	sp, #216	; 0xd8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d102      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x24>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	f000 bc13 	b.w	800448a <HAL_ADC_ConfigChannel+0x84a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff faa7 	bl	80031c4 <LL_ADC_REG_IsConversionOngoing>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f040 83f3 	bne.w	8004464 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f7ff f93f 	bl	8002f0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fa95 	bl	80031c4 <LL_ADC_REG_IsConversionOngoing>
 8003c9a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff faa1 	bl	80031ea <LL_ADC_INJ_IsConversionOngoing>
 8003ca8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f040 81d9 	bne.w	8004068 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 81d4 	bne.w	8004068 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cc8:	d10f      	bne.n	8003cea <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f7ff f959 	bl	8002f8c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff f8ed 	bl	8002ec2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ce8:	e00e      	b.n	8003d08 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6819      	ldr	r1, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f7ff f948 	bl	8002f8c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff f8dd 	bl	8002ec2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	08db      	lsrs	r3, r3, #3
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d022      	beq.n	8003d70 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6919      	ldr	r1, [r3, #16]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d3a:	f7ff f837 	bl	8002dac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6919      	ldr	r1, [r3, #16]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f7ff f883 	bl	8002e56 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d102      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x126>
 8003d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d64:	e000      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x128>
 8003d66:	2300      	movs	r3, #0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f7ff f88f 	bl	8002e8c <LL_ADC_SetOffsetSaturation>
 8003d6e:	e17b      	b.n	8004068 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff f83c 	bl	8002df4 <LL_ADC_GetOffsetChannel>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x15c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff f831 	bl	8002df4 <LL_ADC_GetOffsetChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	0e9b      	lsrs	r3, r3, #26
 8003d96:	f003 021f 	and.w	r2, r3, #31
 8003d9a:	e01e      	b.n	8003dda <HAL_ADC_ConfigChannel+0x19a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff f826 	bl	8002df4 <LL_ADC_GetOffsetChannel>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003dba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003dc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003dca:	2320      	movs	r3, #32
 8003dcc:	e004      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003dce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d105      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x1b2>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	0e9b      	lsrs	r3, r3, #26
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	e018      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x1e4>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003e0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003e16:	2320      	movs	r3, #32
 8003e18:	e004      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d106      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fff5 	bl	8002e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe ffd9 	bl	8002df4 <LL_ADC_GetOffsetChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x222>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2101      	movs	r1, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe ffce 	bl	8002df4 <LL_ADC_GetOffsetChannel>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	0e9b      	lsrs	r3, r3, #26
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	e01e      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x260>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2101      	movs	r1, #1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe ffc3 	bl	8002df4 <LL_ADC_GetOffsetChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003e80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003e88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003e90:	2320      	movs	r3, #32
 8003e92:	e004      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003e94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e98:	fab3 f383 	clz	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x278>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0e9b      	lsrs	r3, r3, #26
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	e018      	b.n	8003eea <HAL_ADC_ConfigChannel+0x2aa>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003edc:	2320      	movs	r3, #32
 8003ede:	e004      	b.n	8003eea <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d106      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe ff92 	bl	8002e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2102      	movs	r1, #2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe ff76 	bl	8002df4 <LL_ADC_GetOffsetChannel>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x2e8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2102      	movs	r1, #2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe ff6b 	bl	8002df4 <LL_ADC_GetOffsetChannel>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	0e9b      	lsrs	r3, r3, #26
 8003f22:	f003 021f 	and.w	r2, r3, #31
 8003f26:	e01e      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x326>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe ff60 	bl	8002df4 <LL_ADC_GetOffsetChannel>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f3e:	fa93 f3a3 	rbit	r3, r3
 8003f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003f4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003f56:	2320      	movs	r3, #32
 8003f58:	e004      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003f5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x33e>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	0e9b      	lsrs	r3, r3, #26
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	e016      	b.n	8003fac <HAL_ADC_ConfigChannel+0x36c>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f8a:	fa93 f3a3 	rbit	r3, r3
 8003f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003f90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	e004      	b.n	8003fac <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003fa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d106      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe ff31 	bl	8002e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2103      	movs	r1, #3
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe ff15 	bl	8002df4 <LL_ADC_GetOffsetChannel>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <HAL_ADC_ConfigChannel+0x3aa>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2103      	movs	r1, #3
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe ff0a 	bl	8002df4 <LL_ADC_GetOffsetChannel>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	0e9b      	lsrs	r3, r3, #26
 8003fe4:	f003 021f 	and.w	r2, r3, #31
 8003fe8:	e017      	b.n	800401a <HAL_ADC_ConfigChannel+0x3da>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2103      	movs	r1, #3
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe feff 	bl	8002df4 <LL_ADC_GetOffsetChannel>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004004:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800400c:	2320      	movs	r3, #32
 800400e:	e003      	b.n	8004018 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004022:	2b00      	cmp	r3, #0
 8004024:	d105      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x3f2>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	0e9b      	lsrs	r3, r3, #26
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	e011      	b.n	8004056 <HAL_ADC_ConfigChannel+0x416>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004042:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800404a:	2320      	movs	r3, #32
 800404c:	e003      	b.n	8004056 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800404e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004050:	fab3 f383 	clz	r3, r3
 8004054:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004056:	429a      	cmp	r2, r3
 8004058:	d106      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2200      	movs	r2, #0
 8004060:	2103      	movs	r1, #3
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fedc 	bl	8002e20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff f86f 	bl	8003150 <LL_ADC_IsEnabled>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	f040 813d 	bne.w	80042f4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6819      	ldr	r1, [r3, #0]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	461a      	mov	r2, r3
 8004088:	f7fe ffac 	bl	8002fe4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4aa2      	ldr	r2, [pc, #648]	; (800431c <HAL_ADC_ConfigChannel+0x6dc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	f040 812e 	bne.w	80042f4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x480>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	0e9b      	lsrs	r3, r3, #26
 80040ae:	3301      	adds	r3, #1
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	2b09      	cmp	r3, #9
 80040b6:	bf94      	ite	ls
 80040b8:	2301      	movls	r3, #1
 80040ba:	2300      	movhi	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e019      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x4b4>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80040ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80040d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80040d8:	2320      	movs	r3, #32
 80040da:	e003      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80040dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	3301      	adds	r3, #1
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	2b09      	cmp	r3, #9
 80040ec:	bf94      	ite	ls
 80040ee:	2301      	movls	r3, #1
 80040f0:	2300      	movhi	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d079      	beq.n	80041ec <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004100:	2b00      	cmp	r3, #0
 8004102:	d107      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x4d4>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	0e9b      	lsrs	r3, r3, #26
 800410a:	3301      	adds	r3, #1
 800410c:	069b      	lsls	r3, r3, #26
 800410e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004112:	e015      	b.n	8004140 <HAL_ADC_ConfigChannel+0x500>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411c:	fa93 f3a3 	rbit	r3, r3
 8004120:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004124:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800412c:	2320      	movs	r3, #32
 800412e:	e003      	b.n	8004138 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	3301      	adds	r3, #1
 800413a:	069b      	lsls	r3, r3, #26
 800413c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004148:	2b00      	cmp	r3, #0
 800414a:	d109      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x520>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0e9b      	lsrs	r3, r3, #26
 8004152:	3301      	adds	r3, #1
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	2101      	movs	r1, #1
 800415a:	fa01 f303 	lsl.w	r3, r1, r3
 800415e:	e017      	b.n	8004190 <HAL_ADC_ConfigChannel+0x550>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800416e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004170:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004178:	2320      	movs	r3, #32
 800417a:	e003      	b.n	8004184 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800417c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	3301      	adds	r3, #1
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	2101      	movs	r1, #1
 800418c:	fa01 f303 	lsl.w	r3, r1, r3
 8004190:	ea42 0103 	orr.w	r1, r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x576>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0e9b      	lsrs	r3, r3, #26
 80041a6:	3301      	adds	r3, #1
 80041a8:	f003 021f 	and.w	r2, r3, #31
 80041ac:	4613      	mov	r3, r2
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4413      	add	r3, r2
 80041b2:	051b      	lsls	r3, r3, #20
 80041b4:	e018      	b.n	80041e8 <HAL_ADC_ConfigChannel+0x5a8>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80041c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80041ce:	2320      	movs	r3, #32
 80041d0:	e003      	b.n	80041da <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80041d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d4:	fab3 f383 	clz	r3, r3
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	3301      	adds	r3, #1
 80041dc:	f003 021f 	and.w	r2, r3, #31
 80041e0:	4613      	mov	r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	4413      	add	r3, r2
 80041e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041e8:	430b      	orrs	r3, r1
 80041ea:	e07e      	b.n	80042ea <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d107      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x5c8>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	0e9b      	lsrs	r3, r3, #26
 80041fe:	3301      	adds	r3, #1
 8004200:	069b      	lsls	r3, r3, #26
 8004202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004206:	e015      	b.n	8004234 <HAL_ADC_ConfigChannel+0x5f4>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004220:	2320      	movs	r3, #32
 8004222:	e003      	b.n	800422c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3301      	adds	r3, #1
 800422e:	069b      	lsls	r3, r3, #26
 8004230:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x614>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	0e9b      	lsrs	r3, r3, #26
 8004246:	3301      	adds	r3, #1
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	e017      	b.n	8004284 <HAL_ADC_ConfigChannel+0x644>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	fa93 f3a3 	rbit	r3, r3
 8004260:	61fb      	str	r3, [r7, #28]
  return result;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800426c:	2320      	movs	r3, #32
 800426e:	e003      	b.n	8004278 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3301      	adds	r3, #1
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	2101      	movs	r1, #1
 8004280:	fa01 f303 	lsl.w	r3, r1, r3
 8004284:	ea42 0103 	orr.w	r1, r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10d      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x670>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	0e9b      	lsrs	r3, r3, #26
 800429a:	3301      	adds	r3, #1
 800429c:	f003 021f 	and.w	r2, r3, #31
 80042a0:	4613      	mov	r3, r2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4413      	add	r3, r2
 80042a6:	3b1e      	subs	r3, #30
 80042a8:	051b      	lsls	r3, r3, #20
 80042aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042ae:	e01b      	b.n	80042e8 <HAL_ADC_ConfigChannel+0x6a8>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	613b      	str	r3, [r7, #16]
  return result;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80042c8:	2320      	movs	r3, #32
 80042ca:	e003      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	fab3 f383 	clz	r3, r3
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	3301      	adds	r3, #1
 80042d6:	f003 021f 	and.w	r2, r3, #31
 80042da:	4613      	mov	r3, r2
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	4413      	add	r3, r2
 80042e0:	3b1e      	subs	r3, #30
 80042e2:	051b      	lsls	r3, r3, #20
 80042e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042ee:	4619      	mov	r1, r3
 80042f0:	f7fe fe4c 	bl	8002f8c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b09      	ldr	r3, [pc, #36]	; (8004320 <HAL_ADC_ConfigChannel+0x6e0>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80be 	beq.w	800447e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800430a:	d004      	beq.n	8004316 <HAL_ADC_ConfigChannel+0x6d6>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a04      	ldr	r2, [pc, #16]	; (8004324 <HAL_ADC_ConfigChannel+0x6e4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d10a      	bne.n	800432c <HAL_ADC_ConfigChannel+0x6ec>
 8004316:	4b04      	ldr	r3, [pc, #16]	; (8004328 <HAL_ADC_ConfigChannel+0x6e8>)
 8004318:	e009      	b.n	800432e <HAL_ADC_ConfigChannel+0x6ee>
 800431a:	bf00      	nop
 800431c:	407f0000 	.word	0x407f0000
 8004320:	80080000 	.word	0x80080000
 8004324:	50000100 	.word	0x50000100
 8004328:	50000300 	.word	0x50000300
 800432c:	4b59      	ldr	r3, [pc, #356]	; (8004494 <HAL_ADC_ConfigChannel+0x854>)
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fd2e 	bl	8002d90 <LL_ADC_GetCommonPathInternalCh>
 8004334:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a56      	ldr	r2, [pc, #344]	; (8004498 <HAL_ADC_ConfigChannel+0x858>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_ADC_ConfigChannel+0x70c>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a55      	ldr	r2, [pc, #340]	; (800449c <HAL_ADC_ConfigChannel+0x85c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d13a      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800434c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d134      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004360:	d005      	beq.n	800436e <HAL_ADC_ConfigChannel+0x72e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a4e      	ldr	r2, [pc, #312]	; (80044a0 <HAL_ADC_ConfigChannel+0x860>)
 8004368:	4293      	cmp	r3, r2
 800436a:	f040 8085 	bne.w	8004478 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004376:	d004      	beq.n	8004382 <HAL_ADC_ConfigChannel+0x742>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a49      	ldr	r2, [pc, #292]	; (80044a4 <HAL_ADC_ConfigChannel+0x864>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d101      	bne.n	8004386 <HAL_ADC_ConfigChannel+0x746>
 8004382:	4a49      	ldr	r2, [pc, #292]	; (80044a8 <HAL_ADC_ConfigChannel+0x868>)
 8004384:	e000      	b.n	8004388 <HAL_ADC_ConfigChannel+0x748>
 8004386:	4a43      	ldr	r2, [pc, #268]	; (8004494 <HAL_ADC_ConfigChannel+0x854>)
 8004388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800438c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f7fe fce9 	bl	8002d6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004398:	4b44      	ldr	r3, [pc, #272]	; (80044ac <HAL_ADC_ConfigChannel+0x86c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	099b      	lsrs	r3, r3, #6
 800439e:	4a44      	ldr	r2, [pc, #272]	; (80044b0 <HAL_ADC_ConfigChannel+0x870>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	099b      	lsrs	r3, r3, #6
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	4613      	mov	r3, r2
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043b2:	e002      	b.n	80043ba <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f9      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043c0:	e05a      	b.n	8004478 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a3b      	ldr	r2, [pc, #236]	; (80044b4 <HAL_ADC_ConfigChannel+0x874>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d125      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11f      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a31      	ldr	r2, [pc, #196]	; (80044a4 <HAL_ADC_ConfigChannel+0x864>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d104      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x7ac>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a34      	ldr	r2, [pc, #208]	; (80044b8 <HAL_ADC_ConfigChannel+0x878>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d047      	beq.n	800447c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043f4:	d004      	beq.n	8004400 <HAL_ADC_ConfigChannel+0x7c0>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <HAL_ADC_ConfigChannel+0x864>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d101      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x7c4>
 8004400:	4a29      	ldr	r2, [pc, #164]	; (80044a8 <HAL_ADC_ConfigChannel+0x868>)
 8004402:	e000      	b.n	8004406 <HAL_ADC_ConfigChannel+0x7c6>
 8004404:	4a23      	ldr	r2, [pc, #140]	; (8004494 <HAL_ADC_ConfigChannel+0x854>)
 8004406:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800440a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f7fe fcaa 	bl	8002d6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004416:	e031      	b.n	800447c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a27      	ldr	r2, [pc, #156]	; (80044bc <HAL_ADC_ConfigChannel+0x87c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d12d      	bne.n	800447e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004422:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d127      	bne.n	800447e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1c      	ldr	r2, [pc, #112]	; (80044a4 <HAL_ADC_ConfigChannel+0x864>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d022      	beq.n	800447e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004440:	d004      	beq.n	800444c <HAL_ADC_ConfigChannel+0x80c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <HAL_ADC_ConfigChannel+0x864>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d101      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x810>
 800444c:	4a16      	ldr	r2, [pc, #88]	; (80044a8 <HAL_ADC_ConfigChannel+0x868>)
 800444e:	e000      	b.n	8004452 <HAL_ADC_ConfigChannel+0x812>
 8004450:	4a10      	ldr	r2, [pc, #64]	; (8004494 <HAL_ADC_ConfigChannel+0x854>)
 8004452:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004456:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f7fe fc84 	bl	8002d6a <LL_ADC_SetCommonPathInternalCh>
 8004462:	e00c      	b.n	800447e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004476:	e002      	b.n	800447e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004478:	bf00      	nop
 800447a:	e000      	b.n	800447e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800447c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004486:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800448a:	4618      	mov	r0, r3
 800448c:	37d8      	adds	r7, #216	; 0xd8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	50000700 	.word	0x50000700
 8004498:	c3210000 	.word	0xc3210000
 800449c:	90c00010 	.word	0x90c00010
 80044a0:	50000600 	.word	0x50000600
 80044a4:	50000100 	.word	0x50000100
 80044a8:	50000300 	.word	0x50000300
 80044ac:	2000000c 	.word	0x2000000c
 80044b0:	053e2d63 	.word	0x053e2d63
 80044b4:	c7520000 	.word	0xc7520000
 80044b8:	50000500 	.word	0x50000500
 80044bc:	cb840000 	.word	0xcb840000

080044c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fe fe3d 	bl	8003150 <LL_ADC_IsEnabled>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d176      	bne.n	80045ca <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	4b3c      	ldr	r3, [pc, #240]	; (80045d4 <ADC_Enable+0x114>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00d      	beq.n	8004506 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	f043 0210 	orr.w	r2, r3, #16
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fa:	f043 0201 	orr.w	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e062      	b.n	80045cc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fdf8 	bl	8003100 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004518:	d004      	beq.n	8004524 <ADC_Enable+0x64>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2e      	ldr	r2, [pc, #184]	; (80045d8 <ADC_Enable+0x118>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d101      	bne.n	8004528 <ADC_Enable+0x68>
 8004524:	4b2d      	ldr	r3, [pc, #180]	; (80045dc <ADC_Enable+0x11c>)
 8004526:	e000      	b.n	800452a <ADC_Enable+0x6a>
 8004528:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <ADC_Enable+0x120>)
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe fc30 	bl	8002d90 <LL_ADC_GetCommonPathInternalCh>
 8004530:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004536:	2b00      	cmp	r3, #0
 8004538:	d013      	beq.n	8004562 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800453a:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <ADC_Enable+0x124>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	099b      	lsrs	r3, r3, #6
 8004540:	4a29      	ldr	r2, [pc, #164]	; (80045e8 <ADC_Enable+0x128>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	4613      	mov	r3, r2
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004554:	e002      	b.n	800455c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3b01      	subs	r3, #1
 800455a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f9      	bne.n	8004556 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004562:	f7fe fbc1 	bl	8002ce8 <HAL_GetTick>
 8004566:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004568:	e028      	b.n	80045bc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe fdee 	bl	8003150 <LL_ADC_IsEnabled>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d104      	bne.n	8004584 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fdbe 	bl	8003100 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004584:	f7fe fbb0 	bl	8002ce8 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d914      	bls.n	80045bc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d00d      	beq.n	80045bc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a4:	f043 0210 	orr.w	r2, r3, #16
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b0:	f043 0201 	orr.w	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e007      	b.n	80045cc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d1cf      	bne.n	800456a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	8000003f 	.word	0x8000003f
 80045d8:	50000100 	.word	0x50000100
 80045dc:	50000300 	.word	0x50000300
 80045e0:	50000700 	.word	0x50000700
 80045e4:	2000000c 	.word	0x2000000c
 80045e8:	053e2d63 	.word	0x053e2d63

080045ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe fdbc 	bl	8003176 <LL_ADC_IsDisableOngoing>
 80045fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe fda3 	bl	8003150 <LL_ADC_IsEnabled>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d047      	beq.n	80046a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d144      	bne.n	80046a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 030d 	and.w	r3, r3, #13
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10c      	bne.n	800463e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe fd7d 	bl	8003128 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2203      	movs	r2, #3
 8004634:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004636:	f7fe fb57 	bl	8002ce8 <HAL_GetTick>
 800463a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800463c:	e029      	b.n	8004692 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004642:	f043 0210 	orr.w	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e023      	b.n	80046a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800465a:	f7fe fb45 	bl	8002ce8 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d914      	bls.n	8004692 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00d      	beq.n	8004692 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	f043 0210 	orr.w	r2, r3, #16
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e007      	b.n	80046a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1dc      	bne.n	800465a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d14b      	bne.n	800475c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d021      	beq.n	8004722 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe fc00 	bl	8002ee8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d032      	beq.n	8004754 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d12b      	bne.n	8004754 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004700:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d11f      	bne.n	8004754 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004718:	f043 0201 	orr.w	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004720:	e018      	b.n	8004754 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d111      	bne.n	8004754 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004734:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	f043 0201 	orr.w	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff fa4b 	bl	8003bf0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800475a:	e00e      	b.n	800477a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff fa5f 	bl	8003c2c <HAL_ADC_ErrorCallback>
}
 800476e:	e004      	b.n	800477a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff fa37 	bl	8003c04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047bc:	f043 0204 	orr.w	r2, r3, #4
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7ff fa31 	bl	8003c2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <LL_ADC_IsEnabled>:
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <LL_ADC_IsEnabled+0x18>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <LL_ADC_IsEnabled+0x1a>
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <LL_ADC_StartCalibration>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800480a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004814:	4313      	orrs	r3, r2
 8004816:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	609a      	str	r2, [r3, #8]
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <LL_ADC_IsCalibrationOnGoing>:
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800483a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800483e:	d101      	bne.n	8004844 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <LL_ADC_REG_IsConversionOngoing>:
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b04      	cmp	r3, #4
 8004864:	d101      	bne.n	800486a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_ADCEx_Calibration_Start+0x1c>
 8004890:	2302      	movs	r3, #2
 8004892:	e04d      	b.n	8004930 <HAL_ADCEx_Calibration_Start+0xb8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fea5 	bl	80045ec <ADC_Disable>
 80048a2:	4603      	mov	r3, r0
 80048a4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d136      	bne.n	800491a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048b4:	f023 0302 	bic.w	r3, r3, #2
 80048b8:	f043 0202 	orr.w	r2, r3, #2
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff ff96 	bl	80047f8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048cc:	e014      	b.n	80048f8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	3301      	adds	r3, #1
 80048d2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4a18      	ldr	r2, [pc, #96]	; (8004938 <HAL_ADCEx_Calibration_Start+0xc0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d90d      	bls.n	80048f8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e0:	f023 0312 	bic.w	r3, r3, #18
 80048e4:	f043 0210 	orr.w	r2, r3, #16
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e01b      	b.n	8004930 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff ff94 	bl	800482a <LL_ADC_IsCalibrationOnGoing>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e2      	bne.n	80048ce <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490c:	f023 0303 	bic.w	r3, r3, #3
 8004910:	f043 0201 	orr.w	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	65da      	str	r2, [r3, #92]	; 0x5c
 8004918:	e005      	b.n	8004926 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	f043 0210 	orr.w	r2, r3, #16
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800492e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	0004de01 	.word	0x0004de01

0800493c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b0a1      	sub	sp, #132	; 0x84
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e0e7      	b.n	8004b8e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80049c6:	2300      	movs	r3, #0
 80049c8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80049ca:	2300      	movs	r3, #0
 80049cc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049d6:	d102      	bne.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049d8:	4b6f      	ldr	r3, [pc, #444]	; (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	e009      	b.n	80049f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a6e      	ldr	r2, [pc, #440]	; (8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d102      	bne.n	80049ee <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80049e8:	4b6d      	ldr	r3, [pc, #436]	; (8004ba0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	e001      	b.n	80049f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049ee:	2300      	movs	r3, #0
 80049f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10b      	bne.n	8004a10 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fc:	f043 0220 	orr.w	r2, r3, #32
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0be      	b.n	8004b8e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff ff1d 	bl	8004852 <LL_ADC_REG_IsConversionOngoing>
 8004a18:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff ff17 	bl	8004852 <LL_ADC_REG_IsConversionOngoing>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f040 80a0 	bne.w	8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 809c 	bne.w	8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a3c:	d004      	beq.n	8004a48 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a55      	ldr	r2, [pc, #340]	; (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004a48:	4b56      	ldr	r3, [pc, #344]	; (8004ba4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004a4a:	e000      	b.n	8004a4e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004a4c:	4b56      	ldr	r3, [pc, #344]	; (8004ba8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004a4e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d04b      	beq.n	8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	6859      	ldr	r1, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a6a:	035b      	lsls	r3, r3, #13
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a72:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a7c:	d004      	beq.n	8004a88 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a45      	ldr	r2, [pc, #276]	; (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d10f      	bne.n	8004aa8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004a88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004a8c:	f7ff fea1 	bl	80047d2 <LL_ADC_IsEnabled>
 8004a90:	4604      	mov	r4, r0
 8004a92:	4841      	ldr	r0, [pc, #260]	; (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a94:	f7ff fe9d 	bl	80047d2 <LL_ADC_IsEnabled>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4323      	orrs	r3, r4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	e012      	b.n	8004ace <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004aa8:	483c      	ldr	r0, [pc, #240]	; (8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004aaa:	f7ff fe92 	bl	80047d2 <LL_ADC_IsEnabled>
 8004aae:	4604      	mov	r4, r0
 8004ab0:	483b      	ldr	r0, [pc, #236]	; (8004ba0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004ab2:	f7ff fe8e 	bl	80047d2 <LL_ADC_IsEnabled>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	431c      	orrs	r4, r3
 8004aba:	483c      	ldr	r0, [pc, #240]	; (8004bac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004abc:	f7ff fe89 	bl	80047d2 <LL_ADC_IsEnabled>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4323      	orrs	r3, r4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d056      	beq.n	8004b80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ada:	f023 030f 	bic.w	r3, r3, #15
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	6811      	ldr	r1, [r2, #0]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	6892      	ldr	r2, [r2, #8]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aec:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004aee:	e047      	b.n	8004b80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004afa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b04:	d004      	beq.n	8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d10f      	bne.n	8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004b10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004b14:	f7ff fe5d 	bl	80047d2 <LL_ADC_IsEnabled>
 8004b18:	4604      	mov	r4, r0
 8004b1a:	481f      	ldr	r0, [pc, #124]	; (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b1c:	f7ff fe59 	bl	80047d2 <LL_ADC_IsEnabled>
 8004b20:	4603      	mov	r3, r0
 8004b22:	4323      	orrs	r3, r4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e012      	b.n	8004b56 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004b30:	481a      	ldr	r0, [pc, #104]	; (8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b32:	f7ff fe4e 	bl	80047d2 <LL_ADC_IsEnabled>
 8004b36:	4604      	mov	r4, r0
 8004b38:	4819      	ldr	r0, [pc, #100]	; (8004ba0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b3a:	f7ff fe4a 	bl	80047d2 <LL_ADC_IsEnabled>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	431c      	orrs	r4, r3
 8004b42:	481a      	ldr	r0, [pc, #104]	; (8004bac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004b44:	f7ff fe45 	bl	80047d2 <LL_ADC_IsEnabled>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4323      	orrs	r3, r4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d012      	beq.n	8004b80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004b62:	f023 030f 	bic.w	r3, r3, #15
 8004b66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004b68:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b6a:	e009      	b.n	8004b80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b70:	f043 0220 	orr.w	r2, r3, #32
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004b7e:	e000      	b.n	8004b82 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3784      	adds	r7, #132	; 0x84
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd90      	pop	{r4, r7, pc}
 8004b96:	bf00      	nop
 8004b98:	50000100 	.word	0x50000100
 8004b9c:	50000400 	.word	0x50000400
 8004ba0:	50000500 	.word	0x50000500
 8004ba4:	50000300 	.word	0x50000300
 8004ba8:	50000700 	.word	0x50000700
 8004bac:	50000600 	.word	0x50000600

08004bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bcc:	4013      	ands	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004be2:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	60d3      	str	r3, [r2, #12]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	e000ed00 	.word	0xe000ed00

08004bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <__NVIC_GetPriorityGrouping+0x18>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	0a1b      	lsrs	r3, r3, #8
 8004c02:	f003 0307 	and.w	r3, r3, #7
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	e000ed00 	.word	0xe000ed00

08004c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	db0b      	blt.n	8004c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	f003 021f 	and.w	r2, r3, #31
 8004c2c:	4907      	ldr	r1, [pc, #28]	; (8004c4c <__NVIC_EnableIRQ+0x38>)
 8004c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	2001      	movs	r0, #1
 8004c36:	fa00 f202 	lsl.w	r2, r0, r2
 8004c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	e000e100 	.word	0xe000e100

08004c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	6039      	str	r1, [r7, #0]
 8004c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	db0a      	blt.n	8004c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	490c      	ldr	r1, [pc, #48]	; (8004c9c <__NVIC_SetPriority+0x4c>)
 8004c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6e:	0112      	lsls	r2, r2, #4
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	440b      	add	r3, r1
 8004c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c78:	e00a      	b.n	8004c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	4908      	ldr	r1, [pc, #32]	; (8004ca0 <__NVIC_SetPriority+0x50>)
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	3b04      	subs	r3, #4
 8004c88:	0112      	lsls	r2, r2, #4
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	761a      	strb	r2, [r3, #24]
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	e000e100 	.word	0xe000e100
 8004ca0:	e000ed00 	.word	0xe000ed00

08004ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b089      	sub	sp, #36	; 0x24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f1c3 0307 	rsb	r3, r3, #7
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	bf28      	it	cs
 8004cc2:	2304      	movcs	r3, #4
 8004cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d902      	bls.n	8004cd4 <NVIC_EncodePriority+0x30>
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3b03      	subs	r3, #3
 8004cd2:	e000      	b.n	8004cd6 <NVIC_EncodePriority+0x32>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43da      	mvns	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cec:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf6:	43d9      	mvns	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cfc:	4313      	orrs	r3, r2
         );
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3724      	adds	r7, #36	; 0x24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d1c:	d301      	bcc.n	8004d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e00f      	b.n	8004d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d22:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <SysTick_Config+0x40>)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d2a:	210f      	movs	r1, #15
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	f7ff ff8e 	bl	8004c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <SysTick_Config+0x40>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d3a:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <SysTick_Config+0x40>)
 8004d3c:	2207      	movs	r2, #7
 8004d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	e000e010 	.word	0xe000e010

08004d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff ff29 	bl	8004bb0 <__NVIC_SetPriorityGrouping>
}
 8004d5e:	bf00      	nop
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b086      	sub	sp, #24
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d74:	f7ff ff40 	bl	8004bf8 <__NVIC_GetPriorityGrouping>
 8004d78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	6978      	ldr	r0, [r7, #20]
 8004d80:	f7ff ff90 	bl	8004ca4 <NVIC_EncodePriority>
 8004d84:	4602      	mov	r2, r0
 8004d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff ff5f 	bl	8004c50 <__NVIC_SetPriority>
}
 8004d92:	bf00      	nop
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	4603      	mov	r3, r0
 8004da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff ff33 	bl	8004c14 <__NVIC_EnableIRQ>
}
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff ffa4 	bl	8004d0c <SysTick_Config>
 8004dc4:	4603      	mov	r3, r0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e08d      	b.n	8004efe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	4b47      	ldr	r3, [pc, #284]	; (8004f08 <HAL_DMA_Init+0x138>)
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d80f      	bhi.n	8004e0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	4b45      	ldr	r3, [pc, #276]	; (8004f0c <HAL_DMA_Init+0x13c>)
 8004df6:	4413      	add	r3, r2
 8004df8:	4a45      	ldr	r2, [pc, #276]	; (8004f10 <HAL_DMA_Init+0x140>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	091b      	lsrs	r3, r3, #4
 8004e00:	009a      	lsls	r2, r3, #2
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a42      	ldr	r2, [pc, #264]	; (8004f14 <HAL_DMA_Init+0x144>)
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40
 8004e0c:	e00e      	b.n	8004e2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b40      	ldr	r3, [pc, #256]	; (8004f18 <HAL_DMA_Init+0x148>)
 8004e16:	4413      	add	r3, r2
 8004e18:	4a3d      	ldr	r2, [pc, #244]	; (8004f10 <HAL_DMA_Init+0x140>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	009a      	lsls	r2, r3, #2
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a3c      	ldr	r2, [pc, #240]	; (8004f1c <HAL_DMA_Init+0x14c>)
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f9b6 	bl	80051f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e8c:	d102      	bne.n	8004e94 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ea8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d010      	beq.n	8004ed4 <HAL_DMA_Init+0x104>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d80c      	bhi.n	8004ed4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f9d6 	bl	800526c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	e008      	b.n	8004ee6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40020407 	.word	0x40020407
 8004f0c:	bffdfff8 	.word	0xbffdfff8
 8004f10:	cccccccd 	.word	0xcccccccd
 8004f14:	40020000 	.word	0x40020000
 8004f18:	bffdfbf8 	.word	0xbffdfbf8
 8004f1c:	40020400 	.word	0x40020400

08004f20 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_DMA_Start_IT+0x20>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e066      	b.n	800500e <HAL_DMA_Start_IT+0xee>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d155      	bne.n	8005000 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f8fb 	bl	8005174 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 020e 	orr.w	r2, r2, #14
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e00f      	b.n	8004fb8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0204 	bic.w	r2, r2, #4
 8004fa6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 020a 	orr.w	r2, r2, #10
 8004fb6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	e005      	b.n	800500c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005008:	2302      	movs	r3, #2
 800500a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800500c:	7dfb      	ldrb	r3, [r7, #23]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2204      	movs	r2, #4
 8005038:	409a      	lsls	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4013      	ands	r3, r2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d026      	beq.n	8005090 <HAL_DMA_IRQHandler+0x7a>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d021      	beq.n	8005090 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d107      	bne.n	800506a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0204 	bic.w	r2, r2, #4
 8005068:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	f003 021f 	and.w	r2, r3, #31
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	2104      	movs	r1, #4
 8005078:	fa01 f202 	lsl.w	r2, r1, r2
 800507c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	2b00      	cmp	r3, #0
 8005084:	d071      	beq.n	800516a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800508e:	e06c      	b.n	800516a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005094:	f003 031f 	and.w	r3, r3, #31
 8005098:	2202      	movs	r2, #2
 800509a:	409a      	lsls	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4013      	ands	r3, r2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d02e      	beq.n	8005102 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d029      	beq.n	8005102 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 020a 	bic.w	r2, r2, #10
 80050ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d8:	f003 021f 	and.w	r2, r3, #31
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	2102      	movs	r1, #2
 80050e2:	fa01 f202 	lsl.w	r2, r1, r2
 80050e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d038      	beq.n	800516a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005100:	e033      	b.n	800516a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	2208      	movs	r2, #8
 800510c:	409a      	lsls	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4013      	ands	r3, r2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d02a      	beq.n	800516c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d025      	beq.n	800516c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 020e 	bic.w	r2, r2, #14
 800512e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005134:	f003 021f 	and.w	r2, r3, #31
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	2101      	movs	r1, #1
 800513e:	fa01 f202 	lsl.w	r2, r1, r2
 8005142:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515e:	2b00      	cmp	r3, #0
 8005160:	d004      	beq.n	800516c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800516a:	bf00      	nop
 800516c:	bf00      	nop
}
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800518a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005190:	2b00      	cmp	r3, #0
 8005192:	d004      	beq.n	800519e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800519c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	f003 021f 	and.w	r2, r3, #31
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	2101      	movs	r1, #1
 80051ac:	fa01 f202 	lsl.w	r2, r1, r2
 80051b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d108      	bne.n	80051d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80051d2:	e007      	b.n	80051e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	4b16      	ldr	r3, [pc, #88]	; (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005200:	429a      	cmp	r2, r3
 8005202:	d802      	bhi.n	800520a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005204:	4b15      	ldr	r3, [pc, #84]	; (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	e001      	b.n	800520e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800520a:	4b15      	ldr	r3, [pc, #84]	; (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800520c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	3b08      	subs	r3, #8
 800521a:	4a12      	ldr	r2, [pc, #72]	; (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005228:	089b      	lsrs	r3, r3, #2
 800522a:	009a      	lsls	r2, r3, #2
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	461a      	mov	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a0b      	ldr	r2, [pc, #44]	; (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800523a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2201      	movs	r2, #1
 8005244:	409a      	lsls	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	651a      	str	r2, [r3, #80]	; 0x50
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40020407 	.word	0x40020407
 800525c:	40020800 	.word	0x40020800
 8005260:	40020820 	.word	0x40020820
 8005264:	cccccccd 	.word	0xcccccccd
 8005268:	40020880 	.word	0x40020880

0800526c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	461a      	mov	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800528e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3b01      	subs	r3, #1
 8005294:	f003 031f 	and.w	r3, r3, #31
 8005298:	2201      	movs	r2, #1
 800529a:	409a      	lsls	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	1000823f 	.word	0x1000823f
 80052b0:	40020940 	.word	0x40020940

080052b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052c2:	e15a      	b.n	800557a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	2101      	movs	r1, #1
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	fa01 f303 	lsl.w	r3, r1, r3
 80052d0:	4013      	ands	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 814c 	beq.w	8005574 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d005      	beq.n	80052f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d130      	bne.n	8005356 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	2203      	movs	r2, #3
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	43db      	mvns	r3, r3
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4013      	ands	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800532a:	2201      	movs	r2, #1
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4013      	ands	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	091b      	lsrs	r3, r3, #4
 8005340:	f003 0201 	and.w	r2, r3, #1
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	2b03      	cmp	r3, #3
 8005360:	d017      	beq.n	8005392 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	2203      	movs	r2, #3
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	43db      	mvns	r3, r3
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4013      	ands	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d123      	bne.n	80053e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	08da      	lsrs	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3208      	adds	r2, #8
 80053a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	220f      	movs	r2, #15
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4013      	ands	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	08da      	lsrs	r2, r3, #3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3208      	adds	r2, #8
 80053e0:	6939      	ldr	r1, [r7, #16]
 80053e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	2203      	movs	r2, #3
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	43db      	mvns	r3, r3
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4013      	ands	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0203 	and.w	r2, r3, #3
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 80a6 	beq.w	8005574 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005428:	4b5b      	ldr	r3, [pc, #364]	; (8005598 <HAL_GPIO_Init+0x2e4>)
 800542a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542c:	4a5a      	ldr	r2, [pc, #360]	; (8005598 <HAL_GPIO_Init+0x2e4>)
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	6613      	str	r3, [r2, #96]	; 0x60
 8005434:	4b58      	ldr	r3, [pc, #352]	; (8005598 <HAL_GPIO_Init+0x2e4>)
 8005436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005440:	4a56      	ldr	r2, [pc, #344]	; (800559c <HAL_GPIO_Init+0x2e8>)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	089b      	lsrs	r3, r3, #2
 8005446:	3302      	adds	r3, #2
 8005448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	220f      	movs	r2, #15
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	43db      	mvns	r3, r3
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4013      	ands	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800546a:	d01f      	beq.n	80054ac <HAL_GPIO_Init+0x1f8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a4c      	ldr	r2, [pc, #304]	; (80055a0 <HAL_GPIO_Init+0x2ec>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d019      	beq.n	80054a8 <HAL_GPIO_Init+0x1f4>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a4b      	ldr	r2, [pc, #300]	; (80055a4 <HAL_GPIO_Init+0x2f0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d013      	beq.n	80054a4 <HAL_GPIO_Init+0x1f0>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a4a      	ldr	r2, [pc, #296]	; (80055a8 <HAL_GPIO_Init+0x2f4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00d      	beq.n	80054a0 <HAL_GPIO_Init+0x1ec>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a49      	ldr	r2, [pc, #292]	; (80055ac <HAL_GPIO_Init+0x2f8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <HAL_GPIO_Init+0x1e8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a48      	ldr	r2, [pc, #288]	; (80055b0 <HAL_GPIO_Init+0x2fc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d101      	bne.n	8005498 <HAL_GPIO_Init+0x1e4>
 8005494:	2305      	movs	r3, #5
 8005496:	e00a      	b.n	80054ae <HAL_GPIO_Init+0x1fa>
 8005498:	2306      	movs	r3, #6
 800549a:	e008      	b.n	80054ae <HAL_GPIO_Init+0x1fa>
 800549c:	2304      	movs	r3, #4
 800549e:	e006      	b.n	80054ae <HAL_GPIO_Init+0x1fa>
 80054a0:	2303      	movs	r3, #3
 80054a2:	e004      	b.n	80054ae <HAL_GPIO_Init+0x1fa>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e002      	b.n	80054ae <HAL_GPIO_Init+0x1fa>
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <HAL_GPIO_Init+0x1fa>
 80054ac:	2300      	movs	r3, #0
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	f002 0203 	and.w	r2, r2, #3
 80054b4:	0092      	lsls	r2, r2, #2
 80054b6:	4093      	lsls	r3, r2
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054be:	4937      	ldr	r1, [pc, #220]	; (800559c <HAL_GPIO_Init+0x2e8>)
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	089b      	lsrs	r3, r3, #2
 80054c4:	3302      	adds	r3, #2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054cc:	4b39      	ldr	r3, [pc, #228]	; (80055b4 <HAL_GPIO_Init+0x300>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	43db      	mvns	r3, r3
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4013      	ands	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054f0:	4a30      	ldr	r2, [pc, #192]	; (80055b4 <HAL_GPIO_Init+0x300>)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80054f6:	4b2f      	ldr	r3, [pc, #188]	; (80055b4 <HAL_GPIO_Init+0x300>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	43db      	mvns	r3, r3
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4013      	ands	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800551a:	4a26      	ldr	r2, [pc, #152]	; (80055b4 <HAL_GPIO_Init+0x300>)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005520:	4b24      	ldr	r3, [pc, #144]	; (80055b4 <HAL_GPIO_Init+0x300>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	43db      	mvns	r3, r3
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4013      	ands	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005544:	4a1b      	ldr	r2, [pc, #108]	; (80055b4 <HAL_GPIO_Init+0x300>)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800554a:	4b1a      	ldr	r3, [pc, #104]	; (80055b4 <HAL_GPIO_Init+0x300>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	43db      	mvns	r3, r3
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4013      	ands	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800556e:	4a11      	ldr	r2, [pc, #68]	; (80055b4 <HAL_GPIO_Init+0x300>)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	3301      	adds	r3, #1
 8005578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	f47f ae9d 	bne.w	80052c4 <HAL_GPIO_Init+0x10>
  }
}
 800558a:	bf00      	nop
 800558c:	bf00      	nop
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	40021000 	.word	0x40021000
 800559c:	40010000 	.word	0x40010000
 80055a0:	48000400 	.word	0x48000400
 80055a4:	48000800 	.word	0x48000800
 80055a8:	48000c00 	.word	0x48000c00
 80055ac:	48001000 	.word	0x48001000
 80055b0:	48001400 	.word	0x48001400
 80055b4:	40010400 	.word	0x40010400

080055b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	807b      	strh	r3, [r7, #2]
 80055c4:	4613      	mov	r3, r2
 80055c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055c8:	787b      	ldrb	r3, [r7, #1]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055ce:	887a      	ldrh	r2, [r7, #2]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055d4:	e002      	b.n	80055dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055d6:	887a      	ldrh	r2, [r7, #2]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055f2:	4b08      	ldr	r3, [pc, #32]	; (8005614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d006      	beq.n	800560c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055fe:	4a05      	ldr	r2, [pc, #20]	; (8005614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005604:	88fb      	ldrh	r3, [r7, #6]
 8005606:	4618      	mov	r0, r3
 8005608:	f7fc f852 	bl	80016b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40010400 	.word	0x40010400

08005618 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d141      	bne.n	80056aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005626:	4b4b      	ldr	r3, [pc, #300]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800562e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005632:	d131      	bne.n	8005698 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005634:	4b47      	ldr	r3, [pc, #284]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563a:	4a46      	ldr	r2, [pc, #280]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800563c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005640:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005644:	4b43      	ldr	r3, [pc, #268]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800564c:	4a41      	ldr	r2, [pc, #260]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005652:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005654:	4b40      	ldr	r3, [pc, #256]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2232      	movs	r2, #50	; 0x32
 800565a:	fb02 f303 	mul.w	r3, r2, r3
 800565e:	4a3f      	ldr	r2, [pc, #252]	; (800575c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005660:	fba2 2303 	umull	r2, r3, r2, r3
 8005664:	0c9b      	lsrs	r3, r3, #18
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800566a:	e002      	b.n	8005672 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3b01      	subs	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005672:	4b38      	ldr	r3, [pc, #224]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800567a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567e:	d102      	bne.n	8005686 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f2      	bne.n	800566c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005686:	4b33      	ldr	r3, [pc, #204]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005692:	d158      	bne.n	8005746 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e057      	b.n	8005748 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005698:	4b2e      	ldr	r3, [pc, #184]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800569e:	4a2d      	ldr	r2, [pc, #180]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80056a8:	e04d      	b.n	8005746 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b0:	d141      	bne.n	8005736 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056b2:	4b28      	ldr	r3, [pc, #160]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056be:	d131      	bne.n	8005724 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056c0:	4b24      	ldr	r3, [pc, #144]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c6:	4a23      	ldr	r2, [pc, #140]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056d0:	4b20      	ldr	r3, [pc, #128]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056d8:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056e0:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2232      	movs	r2, #50	; 0x32
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
 80056ea:	4a1c      	ldr	r2, [pc, #112]	; (800575c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	0c9b      	lsrs	r3, r3, #18
 80056f2:	3301      	adds	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056f6:	e002      	b.n	80056fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056fe:	4b15      	ldr	r3, [pc, #84]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570a:	d102      	bne.n	8005712 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f2      	bne.n	80056f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005712:	4b10      	ldr	r3, [pc, #64]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800571a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571e:	d112      	bne.n	8005746 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e011      	b.n	8005748 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800572a:	4a0a      	ldr	r2, [pc, #40]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800572c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005730:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005734:	e007      	b.n	8005746 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005736:	4b07      	ldr	r3, [pc, #28]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800573e:	4a05      	ldr	r2, [pc, #20]	; (8005754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005740:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005744:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40007000 	.word	0x40007000
 8005758:	2000000c 	.word	0x2000000c
 800575c:	431bde83 	.word	0x431bde83

08005760 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	4a04      	ldr	r2, [pc, #16]	; (800577c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800576a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800576e:	6093      	str	r3, [r2, #8]
}
 8005770:	bf00      	nop
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40007000 	.word	0x40007000

08005780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e2fe      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d075      	beq.n	800588a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800579e:	4b97      	ldr	r3, [pc, #604]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 030c 	and.w	r3, r3, #12
 80057a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057a8:	4b94      	ldr	r3, [pc, #592]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	d102      	bne.n	80057be <HAL_RCC_OscConfig+0x3e>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d002      	beq.n	80057c4 <HAL_RCC_OscConfig+0x44>
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d10b      	bne.n	80057dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c4:	4b8d      	ldr	r3, [pc, #564]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d05b      	beq.n	8005888 <HAL_RCC_OscConfig+0x108>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d157      	bne.n	8005888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e2d9      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e4:	d106      	bne.n	80057f4 <HAL_RCC_OscConfig+0x74>
 80057e6:	4b85      	ldr	r3, [pc, #532]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a84      	ldr	r2, [pc, #528]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80057ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e01d      	b.n	8005830 <HAL_RCC_OscConfig+0xb0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057fc:	d10c      	bne.n	8005818 <HAL_RCC_OscConfig+0x98>
 80057fe:	4b7f      	ldr	r3, [pc, #508]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a7e      	ldr	r2, [pc, #504]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 8005804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	4b7c      	ldr	r3, [pc, #496]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a7b      	ldr	r2, [pc, #492]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e00b      	b.n	8005830 <HAL_RCC_OscConfig+0xb0>
 8005818:	4b78      	ldr	r3, [pc, #480]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a77      	ldr	r2, [pc, #476]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 800581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b75      	ldr	r3, [pc, #468]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a74      	ldr	r2, [pc, #464]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 800582a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fd fa56 	bl	8002ce8 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005840:	f7fd fa52 	bl	8002ce8 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	; 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e29e      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005852:	4b6a      	ldr	r3, [pc, #424]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0xc0>
 800585e:	e014      	b.n	800588a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7fd fa42 	bl	8002ce8 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005868:	f7fd fa3e 	bl	8002ce8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	; 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e28a      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800587a:	4b60      	ldr	r3, [pc, #384]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0xe8>
 8005886:	e000      	b.n	800588a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d075      	beq.n	8005982 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005896:	4b59      	ldr	r3, [pc, #356]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058a0:	4b56      	ldr	r3, [pc, #344]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b0c      	cmp	r3, #12
 80058ae:	d102      	bne.n	80058b6 <HAL_RCC_OscConfig+0x136>
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d002      	beq.n	80058bc <HAL_RCC_OscConfig+0x13c>
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d11f      	bne.n	80058fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058bc:	4b4f      	ldr	r3, [pc, #316]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <HAL_RCC_OscConfig+0x154>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e25d      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d4:	4b49      	ldr	r3, [pc, #292]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	061b      	lsls	r3, r3, #24
 80058e2:	4946      	ldr	r1, [pc, #280]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058e8:	4b45      	ldr	r3, [pc, #276]	; (8005a00 <HAL_RCC_OscConfig+0x280>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fd f9af 	bl	8002c50 <HAL_InitTick>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d043      	beq.n	8005980 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e249      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d023      	beq.n	800594c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005904:	4b3d      	ldr	r3, [pc, #244]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a3c      	ldr	r2, [pc, #240]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 800590a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fd f9ea 	bl	8002ce8 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005918:	f7fd f9e6 	bl	8002ce8 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e232      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800592a:	4b34      	ldr	r3, [pc, #208]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005936:	4b31      	ldr	r3, [pc, #196]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	061b      	lsls	r3, r3, #24
 8005944:	492d      	ldr	r1, [pc, #180]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 8005946:	4313      	orrs	r3, r2
 8005948:	604b      	str	r3, [r1, #4]
 800594a:	e01a      	b.n	8005982 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800594c:	4b2b      	ldr	r3, [pc, #172]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a2a      	ldr	r2, [pc, #168]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 8005952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005958:	f7fd f9c6 	bl	8002ce8 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005960:	f7fd f9c2 	bl	8002ce8 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e20e      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005972:	4b22      	ldr	r3, [pc, #136]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0x1e0>
 800597e:	e000      	b.n	8005982 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005980:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d041      	beq.n	8005a12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d01c      	beq.n	80059d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005996:	4b19      	ldr	r3, [pc, #100]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 8005998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800599c:	4a17      	ldr	r2, [pc, #92]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 800599e:	f043 0301 	orr.w	r3, r3, #1
 80059a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a6:	f7fd f99f 	bl	8002ce8 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ae:	f7fd f99b 	bl	8002ce8 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e1e7      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059c0:	4b0e      	ldr	r3, [pc, #56]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80059c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0ef      	beq.n	80059ae <HAL_RCC_OscConfig+0x22e>
 80059ce:	e020      	b.n	8005a12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80059d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d6:	4a09      	ldr	r2, [pc, #36]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e0:	f7fd f982 	bl	8002ce8 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059e6:	e00d      	b.n	8005a04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e8:	f7fd f97e 	bl	8002ce8 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d906      	bls.n	8005a04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e1ca      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
 80059fa:	bf00      	nop
 80059fc:	40021000 	.word	0x40021000
 8005a00:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a04:	4b8c      	ldr	r3, [pc, #560]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1ea      	bne.n	80059e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80a6 	beq.w	8005b6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a20:	2300      	movs	r3, #0
 8005a22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a24:	4b84      	ldr	r3, [pc, #528]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCC_OscConfig+0x2b4>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <HAL_RCC_OscConfig+0x2b6>
 8005a34:	2300      	movs	r3, #0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00d      	beq.n	8005a56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a3a:	4b7f      	ldr	r3, [pc, #508]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3e:	4a7e      	ldr	r2, [pc, #504]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a44:	6593      	str	r3, [r2, #88]	; 0x58
 8005a46:	4b7c      	ldr	r3, [pc, #496]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a52:	2301      	movs	r3, #1
 8005a54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a56:	4b79      	ldr	r3, [pc, #484]	; (8005c3c <HAL_RCC_OscConfig+0x4bc>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d118      	bne.n	8005a94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a62:	4b76      	ldr	r3, [pc, #472]	; (8005c3c <HAL_RCC_OscConfig+0x4bc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a75      	ldr	r2, [pc, #468]	; (8005c3c <HAL_RCC_OscConfig+0x4bc>)
 8005a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a6e:	f7fd f93b 	bl	8002ce8 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a76:	f7fd f937 	bl	8002ce8 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e183      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a88:	4b6c      	ldr	r3, [pc, #432]	; (8005c3c <HAL_RCC_OscConfig+0x4bc>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d108      	bne.n	8005aae <HAL_RCC_OscConfig+0x32e>
 8005a9c:	4b66      	ldr	r3, [pc, #408]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa2:	4a65      	ldr	r2, [pc, #404]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005aac:	e024      	b.n	8005af8 <HAL_RCC_OscConfig+0x378>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2b05      	cmp	r3, #5
 8005ab4:	d110      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x358>
 8005ab6:	4b60      	ldr	r3, [pc, #384]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abc:	4a5e      	ldr	r2, [pc, #376]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005abe:	f043 0304 	orr.w	r3, r3, #4
 8005ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ac6:	4b5c      	ldr	r3, [pc, #368]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005acc:	4a5a      	ldr	r2, [pc, #360]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ad6:	e00f      	b.n	8005af8 <HAL_RCC_OscConfig+0x378>
 8005ad8:	4b57      	ldr	r3, [pc, #348]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	4a56      	ldr	r2, [pc, #344]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005ae0:	f023 0301 	bic.w	r3, r3, #1
 8005ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ae8:	4b53      	ldr	r3, [pc, #332]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aee:	4a52      	ldr	r2, [pc, #328]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005af0:	f023 0304 	bic.w	r3, r3, #4
 8005af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d016      	beq.n	8005b2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fd f8f2 	bl	8002ce8 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b06:	e00a      	b.n	8005b1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b08:	f7fd f8ee 	bl	8002ce8 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e138      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b1e:	4b46      	ldr	r3, [pc, #280]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0ed      	beq.n	8005b08 <HAL_RCC_OscConfig+0x388>
 8005b2c:	e015      	b.n	8005b5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b2e:	f7fd f8db 	bl	8002ce8 <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b34:	e00a      	b.n	8005b4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b36:	f7fd f8d7 	bl	8002ce8 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e121      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b4c:	4b3a      	ldr	r3, [pc, #232]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1ed      	bne.n	8005b36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b5a:	7ffb      	ldrb	r3, [r7, #31]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d105      	bne.n	8005b6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b60:	4b35      	ldr	r3, [pc, #212]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b64:	4a34      	ldr	r2, [pc, #208]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d03c      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01c      	beq.n	8005bba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b80:	4b2d      	ldr	r3, [pc, #180]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b86:	4a2c      	ldr	r2, [pc, #176]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b90:	f7fd f8aa 	bl	8002ce8 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b98:	f7fd f8a6 	bl	8002ce8 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e0f2      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005baa:	4b23      	ldr	r3, [pc, #140]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0ef      	beq.n	8005b98 <HAL_RCC_OscConfig+0x418>
 8005bb8:	e01b      	b.n	8005bf2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005bba:	4b1f      	ldr	r3, [pc, #124]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005bc2:	f023 0301 	bic.w	r3, r3, #1
 8005bc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bca:	f7fd f88d 	bl	8002ce8 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bd2:	f7fd f889 	bl	8002ce8 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e0d5      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005be4:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1ef      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 80c9 	beq.w	8005d8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bfc:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 030c 	and.w	r3, r3, #12
 8005c04:	2b0c      	cmp	r3, #12
 8005c06:	f000 8083 	beq.w	8005d10 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d15e      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a08      	ldr	r2, [pc, #32]	; (8005c38 <HAL_RCC_OscConfig+0x4b8>)
 8005c18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fd f863 	bl	8002ce8 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c24:	e00c      	b.n	8005c40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c26:	f7fd f85f 	bl	8002ce8 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d905      	bls.n	8005c40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e0ab      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c40:	4b55      	ldr	r3, [pc, #340]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1ec      	bne.n	8005c26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c4c:	4b52      	ldr	r3, [pc, #328]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	4b52      	ldr	r3, [pc, #328]	; (8005d9c <HAL_RCC_OscConfig+0x61c>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6a11      	ldr	r1, [r2, #32]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c5c:	3a01      	subs	r2, #1
 8005c5e:	0112      	lsls	r2, r2, #4
 8005c60:	4311      	orrs	r1, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005c66:	0212      	lsls	r2, r2, #8
 8005c68:	4311      	orrs	r1, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c6e:	0852      	lsrs	r2, r2, #1
 8005c70:	3a01      	subs	r2, #1
 8005c72:	0552      	lsls	r2, r2, #21
 8005c74:	4311      	orrs	r1, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c7a:	0852      	lsrs	r2, r2, #1
 8005c7c:	3a01      	subs	r2, #1
 8005c7e:	0652      	lsls	r2, r2, #25
 8005c80:	4311      	orrs	r1, r2
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c86:	06d2      	lsls	r2, r2, #27
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	4943      	ldr	r1, [pc, #268]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c90:	4b41      	ldr	r3, [pc, #260]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a40      	ldr	r2, [pc, #256]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c9c:	4b3e      	ldr	r3, [pc, #248]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	4a3d      	ldr	r2, [pc, #244]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ca6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca8:	f7fd f81e 	bl	8002ce8 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb0:	f7fd f81a 	bl	8002ce8 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e066      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cc2:	4b35      	ldr	r3, [pc, #212]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0f0      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x530>
 8005cce:	e05e      	b.n	8005d8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd0:	4b31      	ldr	r3, [pc, #196]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a30      	ldr	r2, [pc, #192]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fd f804 	bl	8002ce8 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce4:	f7fd f800 	bl	8002ce8 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e04c      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cf6:	4b28      	ldr	r3, [pc, #160]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1f0      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d02:	4b25      	ldr	r3, [pc, #148]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	4924      	ldr	r1, [pc, #144]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005d08:	4b25      	ldr	r3, [pc, #148]	; (8005da0 <HAL_RCC_OscConfig+0x620>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	60cb      	str	r3, [r1, #12]
 8005d0e:	e03e      	b.n	8005d8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e039      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d1c:	4b1e      	ldr	r3, [pc, #120]	; (8005d98 <HAL_RCC_OscConfig+0x618>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f003 0203 	and.w	r2, r3, #3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d12c      	bne.n	8005d8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d123      	bne.n	8005d8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d11b      	bne.n	8005d8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d113      	bne.n	8005d8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d109      	bne.n	8005d8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d80:	085b      	lsrs	r3, r3, #1
 8005d82:	3b01      	subs	r3, #1
 8005d84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d001      	beq.n	8005d8e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3720      	adds	r7, #32
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	019f800c 	.word	0x019f800c
 8005da0:	feeefffc 	.word	0xfeeefffc

08005da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e11e      	b.n	8005ffa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dbc:	4b91      	ldr	r3, [pc, #580]	; (8006004 <HAL_RCC_ClockConfig+0x260>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 030f 	and.w	r3, r3, #15
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d910      	bls.n	8005dec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dca:	4b8e      	ldr	r3, [pc, #568]	; (8006004 <HAL_RCC_ClockConfig+0x260>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 020f 	bic.w	r2, r3, #15
 8005dd2:	498c      	ldr	r1, [pc, #560]	; (8006004 <HAL_RCC_ClockConfig+0x260>)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dda:	4b8a      	ldr	r3, [pc, #552]	; (8006004 <HAL_RCC_ClockConfig+0x260>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d001      	beq.n	8005dec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e106      	b.n	8005ffa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d073      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d129      	bne.n	8005e54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e00:	4b81      	ldr	r3, [pc, #516]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e0f4      	b.n	8005ffa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e10:	f000 f99e 	bl	8006150 <RCC_GetSysClockFreqFromPLLSource>
 8005e14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	4a7c      	ldr	r2, [pc, #496]	; (800600c <HAL_RCC_ClockConfig+0x268>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d93f      	bls.n	8005e9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e1e:	4b7a      	ldr	r3, [pc, #488]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d033      	beq.n	8005e9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d12f      	bne.n	8005e9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e3e:	4b72      	ldr	r3, [pc, #456]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e46:	4a70      	ldr	r2, [pc, #448]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e4e:	2380      	movs	r3, #128	; 0x80
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	e024      	b.n	8005e9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d107      	bne.n	8005e6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e5c:	4b6a      	ldr	r3, [pc, #424]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d109      	bne.n	8005e7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0c6      	b.n	8005ffa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e6c:	4b66      	ldr	r3, [pc, #408]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0be      	b.n	8005ffa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005e7c:	f000 f8ce 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8005e80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4a61      	ldr	r2, [pc, #388]	; (800600c <HAL_RCC_ClockConfig+0x268>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d909      	bls.n	8005e9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e8a:	4b5f      	ldr	r3, [pc, #380]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e92:	4a5d      	ldr	r2, [pc, #372]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e9e:	4b5a      	ldr	r3, [pc, #360]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f023 0203 	bic.w	r2, r3, #3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	4957      	ldr	r1, [pc, #348]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb0:	f7fc ff1a 	bl	8002ce8 <HAL_GetTick>
 8005eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eb6:	e00a      	b.n	8005ece <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb8:	f7fc ff16 	bl	8002ce8 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e095      	b.n	8005ffa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ece:	4b4e      	ldr	r3, [pc, #312]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 020c 	and.w	r2, r3, #12
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d1eb      	bne.n	8005eb8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d023      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ef8:	4b43      	ldr	r3, [pc, #268]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	4a42      	ldr	r2, [pc, #264]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d007      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f10:	4b3d      	ldr	r3, [pc, #244]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f18:	4a3b      	ldr	r2, [pc, #236]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f20:	4b39      	ldr	r3, [pc, #228]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4936      	ldr	r1, [pc, #216]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	608b      	str	r3, [r1, #8]
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b80      	cmp	r3, #128	; 0x80
 8005f38:	d105      	bne.n	8005f46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f3a:	4b33      	ldr	r3, [pc, #204]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	4a32      	ldr	r2, [pc, #200]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005f40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f46:	4b2f      	ldr	r3, [pc, #188]	; (8006004 <HAL_RCC_ClockConfig+0x260>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d21d      	bcs.n	8005f90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f54:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <HAL_RCC_ClockConfig+0x260>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f023 020f 	bic.w	r2, r3, #15
 8005f5c:	4929      	ldr	r1, [pc, #164]	; (8006004 <HAL_RCC_ClockConfig+0x260>)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f64:	f7fc fec0 	bl	8002ce8 <HAL_GetTick>
 8005f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6a:	e00a      	b.n	8005f82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f6c:	f7fc febc 	bl	8002ce8 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e03b      	b.n	8005ffa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f82:	4b20      	ldr	r3, [pc, #128]	; (8006004 <HAL_RCC_ClockConfig+0x260>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d1ed      	bne.n	8005f6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f9c:	4b1a      	ldr	r3, [pc, #104]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4917      	ldr	r1, [pc, #92]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d009      	beq.n	8005fce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fba:	4b13      	ldr	r3, [pc, #76]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	490f      	ldr	r1, [pc, #60]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fce:	f000 f825 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <HAL_RCC_ClockConfig+0x264>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	091b      	lsrs	r3, r3, #4
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	490c      	ldr	r1, [pc, #48]	; (8006010 <HAL_RCC_ClockConfig+0x26c>)
 8005fe0:	5ccb      	ldrb	r3, [r1, r3]
 8005fe2:	f003 031f 	and.w	r3, r3, #31
 8005fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fea:	4a0a      	ldr	r2, [pc, #40]	; (8006014 <HAL_RCC_ClockConfig+0x270>)
 8005fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <HAL_RCC_ClockConfig+0x274>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fc fe2c 	bl	8002c50 <HAL_InitTick>
 8005ff8:	4603      	mov	r3, r0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	40022000 	.word	0x40022000
 8006008:	40021000 	.word	0x40021000
 800600c:	04c4b400 	.word	0x04c4b400
 8006010:	08008f0c 	.word	0x08008f0c
 8006014:	2000000c 	.word	0x2000000c
 8006018:	20000010 	.word	0x20000010

0800601c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006022:	4b2c      	ldr	r3, [pc, #176]	; (80060d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 030c 	and.w	r3, r3, #12
 800602a:	2b04      	cmp	r3, #4
 800602c:	d102      	bne.n	8006034 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800602e:	4b2a      	ldr	r3, [pc, #168]	; (80060d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006030:	613b      	str	r3, [r7, #16]
 8006032:	e047      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006034:	4b27      	ldr	r3, [pc, #156]	; (80060d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 030c 	and.w	r3, r3, #12
 800603c:	2b08      	cmp	r3, #8
 800603e:	d102      	bne.n	8006046 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006040:	4b26      	ldr	r3, [pc, #152]	; (80060dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006042:	613b      	str	r3, [r7, #16]
 8006044:	e03e      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006046:	4b23      	ldr	r3, [pc, #140]	; (80060d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 030c 	and.w	r3, r3, #12
 800604e:	2b0c      	cmp	r3, #12
 8006050:	d136      	bne.n	80060c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006052:	4b20      	ldr	r3, [pc, #128]	; (80060d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800605c:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	091b      	lsrs	r3, r3, #4
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	3301      	adds	r3, #1
 8006068:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b03      	cmp	r3, #3
 800606e:	d10c      	bne.n	800608a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006070:	4a1a      	ldr	r2, [pc, #104]	; (80060dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	fbb2 f3f3 	udiv	r3, r2, r3
 8006078:	4a16      	ldr	r2, [pc, #88]	; (80060d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800607a:	68d2      	ldr	r2, [r2, #12]
 800607c:	0a12      	lsrs	r2, r2, #8
 800607e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006082:	fb02 f303 	mul.w	r3, r2, r3
 8006086:	617b      	str	r3, [r7, #20]
      break;
 8006088:	e00c      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800608a:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006092:	4a10      	ldr	r2, [pc, #64]	; (80060d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006094:	68d2      	ldr	r2, [r2, #12]
 8006096:	0a12      	lsrs	r2, r2, #8
 8006098:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800609c:	fb02 f303 	mul.w	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]
      break;
 80060a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060a4:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	0e5b      	lsrs	r3, r3, #25
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	3301      	adds	r3, #1
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	e001      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80060c4:	693b      	ldr	r3, [r7, #16]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40021000 	.word	0x40021000
 80060d8:	00f42400 	.word	0x00f42400
 80060dc:	016e3600 	.word	0x016e3600

080060e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060e4:	4b03      	ldr	r3, [pc, #12]	; (80060f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80060e6:	681b      	ldr	r3, [r3, #0]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	2000000c 	.word	0x2000000c

080060f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80060fc:	f7ff fff0 	bl	80060e0 <HAL_RCC_GetHCLKFreq>
 8006100:	4602      	mov	r2, r0
 8006102:	4b06      	ldr	r3, [pc, #24]	; (800611c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	0a1b      	lsrs	r3, r3, #8
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	4904      	ldr	r1, [pc, #16]	; (8006120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800610e:	5ccb      	ldrb	r3, [r1, r3]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006118:	4618      	mov	r0, r3
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40021000 	.word	0x40021000
 8006120:	08008f1c 	.word	0x08008f1c

08006124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006128:	f7ff ffda 	bl	80060e0 <HAL_RCC_GetHCLKFreq>
 800612c:	4602      	mov	r2, r0
 800612e:	4b06      	ldr	r3, [pc, #24]	; (8006148 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	0adb      	lsrs	r3, r3, #11
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	4904      	ldr	r1, [pc, #16]	; (800614c <HAL_RCC_GetPCLK2Freq+0x28>)
 800613a:	5ccb      	ldrb	r3, [r1, r3]
 800613c:	f003 031f 	and.w	r3, r3, #31
 8006140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006144:	4618      	mov	r0, r3
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40021000 	.word	0x40021000
 800614c:	08008f1c 	.word	0x08008f1c

08006150 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006156:	4b1e      	ldr	r3, [pc, #120]	; (80061d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	091b      	lsrs	r3, r3, #4
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	3301      	adds	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b03      	cmp	r3, #3
 8006172:	d10c      	bne.n	800618e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006174:	4a17      	ldr	r2, [pc, #92]	; (80061d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	4a14      	ldr	r2, [pc, #80]	; (80061d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800617e:	68d2      	ldr	r2, [r2, #12]
 8006180:	0a12      	lsrs	r2, r2, #8
 8006182:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006186:	fb02 f303 	mul.w	r3, r2, r3
 800618a:	617b      	str	r3, [r7, #20]
    break;
 800618c:	e00c      	b.n	80061a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800618e:	4a12      	ldr	r2, [pc, #72]	; (80061d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	fbb2 f3f3 	udiv	r3, r2, r3
 8006196:	4a0e      	ldr	r2, [pc, #56]	; (80061d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006198:	68d2      	ldr	r2, [r2, #12]
 800619a:	0a12      	lsrs	r2, r2, #8
 800619c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061a0:	fb02 f303 	mul.w	r3, r2, r3
 80061a4:	617b      	str	r3, [r7, #20]
    break;
 80061a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061a8:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	0e5b      	lsrs	r3, r3, #25
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	3301      	adds	r3, #1
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80061c2:	687b      	ldr	r3, [r7, #4]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	40021000 	.word	0x40021000
 80061d4:	016e3600 	.word	0x016e3600
 80061d8:	00f42400 	.word	0x00f42400

080061dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061e4:	2300      	movs	r3, #0
 80061e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061e8:	2300      	movs	r3, #0
 80061ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8098 	beq.w	800632a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061fa:	2300      	movs	r3, #0
 80061fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061fe:	4b43      	ldr	r3, [pc, #268]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10d      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800620a:	4b40      	ldr	r3, [pc, #256]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800620c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620e:	4a3f      	ldr	r2, [pc, #252]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006214:	6593      	str	r3, [r2, #88]	; 0x58
 8006216:	4b3d      	ldr	r3, [pc, #244]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621e:	60bb      	str	r3, [r7, #8]
 8006220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006222:	2301      	movs	r3, #1
 8006224:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006226:	4b3a      	ldr	r3, [pc, #232]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a39      	ldr	r2, [pc, #228]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800622c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006230:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006232:	f7fc fd59 	bl	8002ce8 <HAL_GetTick>
 8006236:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006238:	e009      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800623a:	f7fc fd55 	bl	8002ce8 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d902      	bls.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	74fb      	strb	r3, [r7, #19]
        break;
 800624c:	e005      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800624e:	4b30      	ldr	r3, [pc, #192]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ef      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800625a:	7cfb      	ldrb	r3, [r7, #19]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d159      	bne.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006260:	4b2a      	ldr	r3, [pc, #168]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01e      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	429a      	cmp	r2, r3
 800627a:	d019      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800627c:	4b23      	ldr	r3, [pc, #140]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006286:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006288:	4b20      	ldr	r3, [pc, #128]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800628a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628e:	4a1f      	ldr	r2, [pc, #124]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006298:	4b1c      	ldr	r3, [pc, #112]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629e:	4a1b      	ldr	r2, [pc, #108]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062a8:	4a18      	ldr	r2, [pc, #96]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d016      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ba:	f7fc fd15 	bl	8002ce8 <HAL_GetTick>
 80062be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c0:	e00b      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c2:	f7fc fd11 	bl	8002ce8 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d902      	bls.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	74fb      	strb	r3, [r7, #19]
            break;
 80062d8:	e006      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062da:	4b0c      	ldr	r3, [pc, #48]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0ec      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80062e8:	7cfb      	ldrb	r3, [r7, #19]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10b      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062ee:	4b07      	ldr	r3, [pc, #28]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062fc:	4903      	ldr	r1, [pc, #12]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006304:	e008      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006306:	7cfb      	ldrb	r3, [r7, #19]
 8006308:	74bb      	strb	r3, [r7, #18]
 800630a:	e005      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800630c:	40021000 	.word	0x40021000
 8006310:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006314:	7cfb      	ldrb	r3, [r7, #19]
 8006316:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006318:	7c7b      	ldrb	r3, [r7, #17]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d105      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800631e:	4ba7      	ldr	r3, [pc, #668]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006322:	4aa6      	ldr	r2, [pc, #664]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006328:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006336:	4ba1      	ldr	r3, [pc, #644]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633c:	f023 0203 	bic.w	r2, r3, #3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	499d      	ldr	r1, [pc, #628]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00a      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006358:	4b98      	ldr	r3, [pc, #608]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635e:	f023 020c 	bic.w	r2, r3, #12
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	4995      	ldr	r1, [pc, #596]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006368:	4313      	orrs	r3, r2
 800636a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800637a:	4b90      	ldr	r3, [pc, #576]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006380:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	498c      	ldr	r1, [pc, #560]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800638a:	4313      	orrs	r3, r2
 800638c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800639c:	4b87      	ldr	r3, [pc, #540]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800639e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	4984      	ldr	r1, [pc, #528]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0310 	and.w	r3, r3, #16
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063be:	4b7f      	ldr	r3, [pc, #508]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	497b      	ldr	r1, [pc, #492]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063e0:	4b76      	ldr	r3, [pc, #472]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	4973      	ldr	r1, [pc, #460]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006402:	4b6e      	ldr	r3, [pc, #440]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006408:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	496a      	ldr	r1, [pc, #424]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006424:	4b65      	ldr	r3, [pc, #404]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	4962      	ldr	r1, [pc, #392]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006434:	4313      	orrs	r3, r2
 8006436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006446:	4b5d      	ldr	r3, [pc, #372]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	4959      	ldr	r1, [pc, #356]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006468:	4b54      	ldr	r3, [pc, #336]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800646a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800646e:	f023 0203 	bic.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	4951      	ldr	r1, [pc, #324]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800648a:	4b4c      	ldr	r3, [pc, #304]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006490:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	4948      	ldr	r1, [pc, #288]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d015      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064ac:	4b43      	ldr	r3, [pc, #268]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	4940      	ldr	r1, [pc, #256]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ca:	d105      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064cc:	4b3b      	ldr	r3, [pc, #236]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	4a3a      	ldr	r2, [pc, #232]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d015      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064e4:	4b35      	ldr	r3, [pc, #212]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f2:	4932      	ldr	r1, [pc, #200]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006502:	d105      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006504:	4b2d      	ldr	r3, [pc, #180]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4a2c      	ldr	r2, [pc, #176]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800650e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d015      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800651c:	4b27      	ldr	r3, [pc, #156]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006522:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	4924      	ldr	r1, [pc, #144]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800653a:	d105      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800653c:	4b1f      	ldr	r3, [pc, #124]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006546:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d015      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006554:	4b19      	ldr	r3, [pc, #100]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006562:	4916      	ldr	r1, [pc, #88]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006572:	d105      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006574:	4b11      	ldr	r3, [pc, #68]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4a10      	ldr	r2, [pc, #64]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800657e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d019      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800658c:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006592:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	4908      	ldr	r1, [pc, #32]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065aa:	d109      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065ac:	4b03      	ldr	r3, [pc, #12]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4a02      	ldr	r2, [pc, #8]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065b6:	60d3      	str	r3, [r2, #12]
 80065b8:	e002      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80065ba:	bf00      	nop
 80065bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d015      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80065cc:	4b29      	ldr	r3, [pc, #164]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065da:	4926      	ldr	r1, [pc, #152]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ea:	d105      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065ec:	4b21      	ldr	r3, [pc, #132]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	4a20      	ldr	r2, [pc, #128]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d015      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006604:	4b1b      	ldr	r3, [pc, #108]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006612:	4918      	ldr	r1, [pc, #96]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800661e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006622:	d105      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006624:	4b13      	ldr	r3, [pc, #76]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	4a12      	ldr	r2, [pc, #72]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800662a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800662e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d015      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800663c:	4b0d      	ldr	r3, [pc, #52]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800663e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006642:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664a:	490a      	ldr	r1, [pc, #40]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800664c:	4313      	orrs	r3, r2
 800664e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800665a:	d105      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800665c:	4b05      	ldr	r3, [pc, #20]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4a04      	ldr	r2, [pc, #16]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006666:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006668:	7cbb      	ldrb	r3, [r7, #18]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40021000 	.word	0x40021000

08006678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e049      	b.n	800671e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fc f9c2 	bl	8002a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f000 fefa 	bl	80074b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	d001      	beq.n	8006740 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e04c      	b.n	80067da <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a26      	ldr	r2, [pc, #152]	; (80067e8 <HAL_TIM_Base_Start+0xc0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d022      	beq.n	8006798 <HAL_TIM_Base_Start+0x70>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675a:	d01d      	beq.n	8006798 <HAL_TIM_Base_Start+0x70>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a22      	ldr	r2, [pc, #136]	; (80067ec <HAL_TIM_Base_Start+0xc4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d018      	beq.n	8006798 <HAL_TIM_Base_Start+0x70>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a21      	ldr	r2, [pc, #132]	; (80067f0 <HAL_TIM_Base_Start+0xc8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d013      	beq.n	8006798 <HAL_TIM_Base_Start+0x70>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1f      	ldr	r2, [pc, #124]	; (80067f4 <HAL_TIM_Base_Start+0xcc>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00e      	beq.n	8006798 <HAL_TIM_Base_Start+0x70>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1e      	ldr	r2, [pc, #120]	; (80067f8 <HAL_TIM_Base_Start+0xd0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d009      	beq.n	8006798 <HAL_TIM_Base_Start+0x70>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a1c      	ldr	r2, [pc, #112]	; (80067fc <HAL_TIM_Base_Start+0xd4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <HAL_TIM_Base_Start+0x70>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a1b      	ldr	r2, [pc, #108]	; (8006800 <HAL_TIM_Base_Start+0xd8>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d115      	bne.n	80067c4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	4b19      	ldr	r3, [pc, #100]	; (8006804 <HAL_TIM_Base_Start+0xdc>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b06      	cmp	r3, #6
 80067a8:	d015      	beq.n	80067d6 <HAL_TIM_Base_Start+0xae>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b0:	d011      	beq.n	80067d6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0201 	orr.w	r2, r2, #1
 80067c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c2:	e008      	b.n	80067d6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e000      	b.n	80067d8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40012c00 	.word	0x40012c00
 80067ec:	40000400 	.word	0x40000400
 80067f0:	40000800 	.word	0x40000800
 80067f4:	40000c00 	.word	0x40000c00
 80067f8:	40013400 	.word	0x40013400
 80067fc:	40014000 	.word	0x40014000
 8006800:	40015000 	.word	0x40015000
 8006804:	00010007 	.word	0x00010007

08006808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e049      	b.n	80068ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f841 	bl	80068b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3304      	adds	r3, #4
 8006844:	4619      	mov	r1, r3
 8006846:	4610      	mov	r0, r2
 8006848:	f000 fe32 	bl	80074b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d109      	bne.n	80068f0 <HAL_TIM_PWM_Start+0x24>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	bf14      	ite	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	2300      	moveq	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	e03c      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d109      	bne.n	800690a <HAL_TIM_PWM_Start+0x3e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b01      	cmp	r3, #1
 8006900:	bf14      	ite	ne
 8006902:	2301      	movne	r3, #1
 8006904:	2300      	moveq	r3, #0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	e02f      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b08      	cmp	r3, #8
 800690e:	d109      	bne.n	8006924 <HAL_TIM_PWM_Start+0x58>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	bf14      	ite	ne
 800691c:	2301      	movne	r3, #1
 800691e:	2300      	moveq	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	e022      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b0c      	cmp	r3, #12
 8006928:	d109      	bne.n	800693e <HAL_TIM_PWM_Start+0x72>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b01      	cmp	r3, #1
 8006934:	bf14      	ite	ne
 8006936:	2301      	movne	r3, #1
 8006938:	2300      	moveq	r3, #0
 800693a:	b2db      	uxtb	r3, r3
 800693c:	e015      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b10      	cmp	r3, #16
 8006942:	d109      	bne.n	8006958 <HAL_TIM_PWM_Start+0x8c>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	bf14      	ite	ne
 8006950:	2301      	movne	r3, #1
 8006952:	2300      	moveq	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	e008      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	bf14      	ite	ne
 8006964:	2301      	movne	r3, #1
 8006966:	2300      	moveq	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e0a6      	b.n	8006ac0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d104      	bne.n	8006982 <HAL_TIM_PWM_Start+0xb6>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006980:	e023      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b04      	cmp	r3, #4
 8006986:	d104      	bne.n	8006992 <HAL_TIM_PWM_Start+0xc6>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006990:	e01b      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b08      	cmp	r3, #8
 8006996:	d104      	bne.n	80069a2 <HAL_TIM_PWM_Start+0xd6>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069a0:	e013      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b0c      	cmp	r3, #12
 80069a6:	d104      	bne.n	80069b2 <HAL_TIM_PWM_Start+0xe6>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069b0:	e00b      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b10      	cmp	r3, #16
 80069b6:	d104      	bne.n	80069c2 <HAL_TIM_PWM_Start+0xf6>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069c0:	e003      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2202      	movs	r2, #2
 80069c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2201      	movs	r2, #1
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 f9e6 	bl	8007da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a3a      	ldr	r2, [pc, #232]	; (8006ac8 <HAL_TIM_PWM_Start+0x1fc>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d018      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x148>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a39      	ldr	r2, [pc, #228]	; (8006acc <HAL_TIM_PWM_Start+0x200>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d013      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x148>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a37      	ldr	r2, [pc, #220]	; (8006ad0 <HAL_TIM_PWM_Start+0x204>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00e      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x148>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a36      	ldr	r2, [pc, #216]	; (8006ad4 <HAL_TIM_PWM_Start+0x208>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d009      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x148>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a34      	ldr	r2, [pc, #208]	; (8006ad8 <HAL_TIM_PWM_Start+0x20c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x148>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a33      	ldr	r2, [pc, #204]	; (8006adc <HAL_TIM_PWM_Start+0x210>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d101      	bne.n	8006a18 <HAL_TIM_PWM_Start+0x14c>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <HAL_TIM_PWM_Start+0x14e>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a25      	ldr	r2, [pc, #148]	; (8006ac8 <HAL_TIM_PWM_Start+0x1fc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d022      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x1b2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a40:	d01d      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x1b2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a26      	ldr	r2, [pc, #152]	; (8006ae0 <HAL_TIM_PWM_Start+0x214>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d018      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x1b2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a24      	ldr	r2, [pc, #144]	; (8006ae4 <HAL_TIM_PWM_Start+0x218>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x1b2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a23      	ldr	r2, [pc, #140]	; (8006ae8 <HAL_TIM_PWM_Start+0x21c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00e      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x1b2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a19      	ldr	r2, [pc, #100]	; (8006acc <HAL_TIM_PWM_Start+0x200>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x1b2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a18      	ldr	r2, [pc, #96]	; (8006ad0 <HAL_TIM_PWM_Start+0x204>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x1b2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a18      	ldr	r2, [pc, #96]	; (8006adc <HAL_TIM_PWM_Start+0x210>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d115      	bne.n	8006aaa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	4b19      	ldr	r3, [pc, #100]	; (8006aec <HAL_TIM_PWM_Start+0x220>)
 8006a86:	4013      	ands	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b06      	cmp	r3, #6
 8006a8e:	d015      	beq.n	8006abc <HAL_TIM_PWM_Start+0x1f0>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a96:	d011      	beq.n	8006abc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa8:	e008      	b.n	8006abc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 0201 	orr.w	r2, r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	e000      	b.n	8006abe <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006abc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40013400 	.word	0x40013400
 8006ad0:	40014000 	.word	0x40014000
 8006ad4:	40014400 	.word	0x40014400
 8006ad8:	40014800 	.word	0x40014800
 8006adc:	40015000 	.word	0x40015000
 8006ae0:	40000400 	.word	0x40000400
 8006ae4:	40000800 	.word	0x40000800
 8006ae8:	40000c00 	.word	0x40000c00
 8006aec:	00010007 	.word	0x00010007

08006af0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e097      	b.n	8006c34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7fb ff41 	bl	80029a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6812      	ldr	r2, [r2, #0]
 8006b30:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006b34:	f023 0307 	bic.w	r3, r3, #7
 8006b38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3304      	adds	r3, #4
 8006b42:	4619      	mov	r1, r3
 8006b44:	4610      	mov	r0, r2
 8006b46:	f000 fcb3 	bl	80074b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b72:	f023 0303 	bic.w	r3, r3, #3
 8006b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	4313      	orrs	r3, r2
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b90:	f023 030c 	bic.w	r3, r3, #12
 8006b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	021b      	lsls	r3, r3, #8
 8006bac:	4313      	orrs	r3, r2
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	011a      	lsls	r2, r3, #4
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	031b      	lsls	r3, r3, #12
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006bce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	4313      	orrs	r3, r2
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d110      	bne.n	8006c8e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d102      	bne.n	8006c78 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c72:	7b7b      	ldrb	r3, [r7, #13]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d001      	beq.n	8006c7c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e069      	b.n	8006d50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c8c:	e031      	b.n	8006cf2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d110      	bne.n	8006cb6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d102      	bne.n	8006ca0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c9a:	7b3b      	ldrb	r3, [r7, #12]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d001      	beq.n	8006ca4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e055      	b.n	8006d50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cb4:	e01d      	b.n	8006cf2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d108      	bne.n	8006cce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d105      	bne.n	8006cce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cc2:	7b7b      	ldrb	r3, [r7, #13]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d102      	bne.n	8006cce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cc8:	7b3b      	ldrb	r3, [r7, #12]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d001      	beq.n	8006cd2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e03e      	b.n	8006d50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2202      	movs	r2, #2
 8006cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2202      	movs	r2, #2
 8006cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_TIM_Encoder_Start+0xc4>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d008      	beq.n	8006d10 <HAL_TIM_Encoder_Start+0xd4>
 8006cfe:	e00f      	b.n	8006d20 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2201      	movs	r2, #1
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 f84b 	bl	8007da4 <TIM_CCxChannelCmd>
      break;
 8006d0e:	e016      	b.n	8006d3e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2201      	movs	r2, #1
 8006d16:	2104      	movs	r1, #4
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f001 f843 	bl	8007da4 <TIM_CCxChannelCmd>
      break;
 8006d1e:	e00e      	b.n	8006d3e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2201      	movs	r2, #1
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 f83b 	bl	8007da4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2201      	movs	r2, #1
 8006d34:	2104      	movs	r1, #4
 8006d36:	4618      	mov	r0, r3
 8006d38:	f001 f834 	bl	8007da4 <TIM_CCxChannelCmd>
      break;
 8006d3c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0201 	orr.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d020      	beq.n	8006dbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01b      	beq.n	8006dbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f06f 0202 	mvn.w	r2, #2
 8006d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fb66 	bl	8007474 <HAL_TIM_IC_CaptureCallback>
 8006da8:	e005      	b.n	8006db6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fb58 	bl	8007460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fb69 	bl	8007488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d020      	beq.n	8006e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01b      	beq.n	8006e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f06f 0204 	mvn.w	r2, #4
 8006dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fb40 	bl	8007474 <HAL_TIM_IC_CaptureCallback>
 8006df4:	e005      	b.n	8006e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fb32 	bl	8007460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fb43 	bl	8007488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d020      	beq.n	8006e54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f003 0308 	and.w	r3, r3, #8
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01b      	beq.n	8006e54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0208 	mvn.w	r2, #8
 8006e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2204      	movs	r2, #4
 8006e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fb1a 	bl	8007474 <HAL_TIM_IC_CaptureCallback>
 8006e40:	e005      	b.n	8006e4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fb0c 	bl	8007460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fb1d 	bl	8007488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f003 0310 	and.w	r3, r3, #16
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d020      	beq.n	8006ea0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01b      	beq.n	8006ea0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0210 	mvn.w	r2, #16
 8006e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2208      	movs	r2, #8
 8006e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 faf4 	bl	8007474 <HAL_TIM_IC_CaptureCallback>
 8006e8c:	e005      	b.n	8006e9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fae6 	bl	8007460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 faf7 	bl	8007488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00c      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f06f 0201 	mvn.w	r2, #1
 8006ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fac4 	bl	800744c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00c      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 f81f 	bl	8007f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00c      	beq.n	8006f16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d007      	beq.n	8006f16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 f817 	bl	8007f44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00c      	beq.n	8006f3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d007      	beq.n	8006f3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fab1 	bl	800749c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f003 0320 	and.w	r3, r3, #32
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00c      	beq.n	8006f5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f003 0320 	and.w	r3, r3, #32
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d007      	beq.n	8006f5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f06f 0220 	mvn.w	r2, #32
 8006f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 ffdf 	bl	8007f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00c      	beq.n	8006f82 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d007      	beq.n	8006f82 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 ffeb 	bl	8007f58 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00c      	beq.n	8006fa6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d007      	beq.n	8006fa6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 ffe3 	bl	8007f6c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00c      	beq.n	8006fca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d007      	beq.n	8006fca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 ffdb 	bl	8007f80 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00c      	beq.n	8006fee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d007      	beq.n	8006fee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 ffd3 	bl	8007f94 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007012:	2302      	movs	r3, #2
 8007014:	e0ff      	b.n	8007216 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b14      	cmp	r3, #20
 8007022:	f200 80f0 	bhi.w	8007206 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007026:	a201      	add	r2, pc, #4	; (adr r2, 800702c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702c:	08007081 	.word	0x08007081
 8007030:	08007207 	.word	0x08007207
 8007034:	08007207 	.word	0x08007207
 8007038:	08007207 	.word	0x08007207
 800703c:	080070c1 	.word	0x080070c1
 8007040:	08007207 	.word	0x08007207
 8007044:	08007207 	.word	0x08007207
 8007048:	08007207 	.word	0x08007207
 800704c:	08007103 	.word	0x08007103
 8007050:	08007207 	.word	0x08007207
 8007054:	08007207 	.word	0x08007207
 8007058:	08007207 	.word	0x08007207
 800705c:	08007143 	.word	0x08007143
 8007060:	08007207 	.word	0x08007207
 8007064:	08007207 	.word	0x08007207
 8007068:	08007207 	.word	0x08007207
 800706c:	08007185 	.word	0x08007185
 8007070:	08007207 	.word	0x08007207
 8007074:	08007207 	.word	0x08007207
 8007078:	08007207 	.word	0x08007207
 800707c:	080071c5 	.word	0x080071c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fac6 	bl	8007618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699a      	ldr	r2, [r3, #24]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0208 	orr.w	r2, r2, #8
 800709a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0204 	bic.w	r2, r2, #4
 80070aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6999      	ldr	r1, [r3, #24]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	691a      	ldr	r2, [r3, #16]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	619a      	str	r2, [r3, #24]
      break;
 80070be:	e0a5      	b.n	800720c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fb40 	bl	800774c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699a      	ldr	r2, [r3, #24]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6999      	ldr	r1, [r3, #24]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	021a      	lsls	r2, r3, #8
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	619a      	str	r2, [r3, #24]
      break;
 8007100:	e084      	b.n	800720c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fbb3 	bl	8007874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69da      	ldr	r2, [r3, #28]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0208 	orr.w	r2, r2, #8
 800711c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69da      	ldr	r2, [r3, #28]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0204 	bic.w	r2, r2, #4
 800712c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69d9      	ldr	r1, [r3, #28]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	61da      	str	r2, [r3, #28]
      break;
 8007140:	e064      	b.n	800720c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fc25 	bl	8007998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69da      	ldr	r2, [r3, #28]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800715c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	69da      	ldr	r2, [r3, #28]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800716c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69d9      	ldr	r1, [r3, #28]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	021a      	lsls	r2, r3, #8
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	61da      	str	r2, [r3, #28]
      break;
 8007182:	e043      	b.n	800720c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fc98 	bl	8007ac0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0208 	orr.w	r2, r2, #8
 800719e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0204 	bic.w	r2, r2, #4
 80071ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	691a      	ldr	r2, [r3, #16]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80071c2:	e023      	b.n	800720c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fce2 	bl	8007b94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	021a      	lsls	r2, r3, #8
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007204:	e002      	b.n	800720c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	75fb      	strb	r3, [r7, #23]
      break;
 800720a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007214:	7dfb      	ldrb	r3, [r7, #23]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop

08007220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_TIM_ConfigClockSource+0x1c>
 8007238:	2302      	movs	r3, #2
 800723a:	e0f6      	b.n	800742a <HAL_TIM_ConfigClockSource+0x20a>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800725a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800725e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a6f      	ldr	r2, [pc, #444]	; (8007434 <HAL_TIM_ConfigClockSource+0x214>)
 8007276:	4293      	cmp	r3, r2
 8007278:	f000 80c1 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1de>
 800727c:	4a6d      	ldr	r2, [pc, #436]	; (8007434 <HAL_TIM_ConfigClockSource+0x214>)
 800727e:	4293      	cmp	r3, r2
 8007280:	f200 80c6 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 8007284:	4a6c      	ldr	r2, [pc, #432]	; (8007438 <HAL_TIM_ConfigClockSource+0x218>)
 8007286:	4293      	cmp	r3, r2
 8007288:	f000 80b9 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1de>
 800728c:	4a6a      	ldr	r2, [pc, #424]	; (8007438 <HAL_TIM_ConfigClockSource+0x218>)
 800728e:	4293      	cmp	r3, r2
 8007290:	f200 80be 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 8007294:	4a69      	ldr	r2, [pc, #420]	; (800743c <HAL_TIM_ConfigClockSource+0x21c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	f000 80b1 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1de>
 800729c:	4a67      	ldr	r2, [pc, #412]	; (800743c <HAL_TIM_ConfigClockSource+0x21c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	f200 80b6 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 80072a4:	4a66      	ldr	r2, [pc, #408]	; (8007440 <HAL_TIM_ConfigClockSource+0x220>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	f000 80a9 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1de>
 80072ac:	4a64      	ldr	r2, [pc, #400]	; (8007440 <HAL_TIM_ConfigClockSource+0x220>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	f200 80ae 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 80072b4:	4a63      	ldr	r2, [pc, #396]	; (8007444 <HAL_TIM_ConfigClockSource+0x224>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	f000 80a1 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1de>
 80072bc:	4a61      	ldr	r2, [pc, #388]	; (8007444 <HAL_TIM_ConfigClockSource+0x224>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	f200 80a6 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 80072c4:	4a60      	ldr	r2, [pc, #384]	; (8007448 <HAL_TIM_ConfigClockSource+0x228>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	f000 8099 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1de>
 80072cc:	4a5e      	ldr	r2, [pc, #376]	; (8007448 <HAL_TIM_ConfigClockSource+0x228>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	f200 809e 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 80072d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80072d8:	f000 8091 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1de>
 80072dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80072e0:	f200 8096 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 80072e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072e8:	f000 8089 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1de>
 80072ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072f0:	f200 808e 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 80072f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f8:	d03e      	beq.n	8007378 <HAL_TIM_ConfigClockSource+0x158>
 80072fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072fe:	f200 8087 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 8007302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007306:	f000 8086 	beq.w	8007416 <HAL_TIM_ConfigClockSource+0x1f6>
 800730a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730e:	d87f      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 8007310:	2b70      	cmp	r3, #112	; 0x70
 8007312:	d01a      	beq.n	800734a <HAL_TIM_ConfigClockSource+0x12a>
 8007314:	2b70      	cmp	r3, #112	; 0x70
 8007316:	d87b      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 8007318:	2b60      	cmp	r3, #96	; 0x60
 800731a:	d050      	beq.n	80073be <HAL_TIM_ConfigClockSource+0x19e>
 800731c:	2b60      	cmp	r3, #96	; 0x60
 800731e:	d877      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 8007320:	2b50      	cmp	r3, #80	; 0x50
 8007322:	d03c      	beq.n	800739e <HAL_TIM_ConfigClockSource+0x17e>
 8007324:	2b50      	cmp	r3, #80	; 0x50
 8007326:	d873      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 8007328:	2b40      	cmp	r3, #64	; 0x40
 800732a:	d058      	beq.n	80073de <HAL_TIM_ConfigClockSource+0x1be>
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	d86f      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 8007330:	2b30      	cmp	r3, #48	; 0x30
 8007332:	d064      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x1de>
 8007334:	2b30      	cmp	r3, #48	; 0x30
 8007336:	d86b      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 8007338:	2b20      	cmp	r3, #32
 800733a:	d060      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x1de>
 800733c:	2b20      	cmp	r3, #32
 800733e:	d867      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d05c      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x1de>
 8007344:	2b10      	cmp	r3, #16
 8007346:	d05a      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x1de>
 8007348:	e062      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800735a:	f000 fd03 	bl	8007d64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800736c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	609a      	str	r2, [r3, #8]
      break;
 8007376:	e04f      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007388:	f000 fcec 	bl	8007d64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800739a:	609a      	str	r2, [r3, #8]
      break;
 800739c:	e03c      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073aa:	461a      	mov	r2, r3
 80073ac:	f000 fc5e 	bl	8007c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2150      	movs	r1, #80	; 0x50
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fcb7 	bl	8007d2a <TIM_ITRx_SetConfig>
      break;
 80073bc:	e02c      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ca:	461a      	mov	r2, r3
 80073cc:	f000 fc7d 	bl	8007cca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2160      	movs	r1, #96	; 0x60
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fca7 	bl	8007d2a <TIM_ITRx_SetConfig>
      break;
 80073dc:	e01c      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ea:	461a      	mov	r2, r3
 80073ec:	f000 fc3e 	bl	8007c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2140      	movs	r1, #64	; 0x40
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fc97 	bl	8007d2a <TIM_ITRx_SetConfig>
      break;
 80073fc:	e00c      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4619      	mov	r1, r3
 8007408:	4610      	mov	r0, r2
 800740a:	f000 fc8e 	bl	8007d2a <TIM_ITRx_SetConfig>
      break;
 800740e:	e003      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
      break;
 8007414:	e000      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	00100070 	.word	0x00100070
 8007438:	00100060 	.word	0x00100060
 800743c:	00100050 	.word	0x00100050
 8007440:	00100040 	.word	0x00100040
 8007444:	00100030 	.word	0x00100030
 8007448:	00100020 	.word	0x00100020

0800744c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a4c      	ldr	r2, [pc, #304]	; (80075f4 <TIM_Base_SetConfig+0x144>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d017      	beq.n	80074f8 <TIM_Base_SetConfig+0x48>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ce:	d013      	beq.n	80074f8 <TIM_Base_SetConfig+0x48>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a49      	ldr	r2, [pc, #292]	; (80075f8 <TIM_Base_SetConfig+0x148>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00f      	beq.n	80074f8 <TIM_Base_SetConfig+0x48>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a48      	ldr	r2, [pc, #288]	; (80075fc <TIM_Base_SetConfig+0x14c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d00b      	beq.n	80074f8 <TIM_Base_SetConfig+0x48>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a47      	ldr	r2, [pc, #284]	; (8007600 <TIM_Base_SetConfig+0x150>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d007      	beq.n	80074f8 <TIM_Base_SetConfig+0x48>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a46      	ldr	r2, [pc, #280]	; (8007604 <TIM_Base_SetConfig+0x154>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d003      	beq.n	80074f8 <TIM_Base_SetConfig+0x48>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a45      	ldr	r2, [pc, #276]	; (8007608 <TIM_Base_SetConfig+0x158>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d108      	bne.n	800750a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a39      	ldr	r2, [pc, #228]	; (80075f4 <TIM_Base_SetConfig+0x144>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d023      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007518:	d01f      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a36      	ldr	r2, [pc, #216]	; (80075f8 <TIM_Base_SetConfig+0x148>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d01b      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a35      	ldr	r2, [pc, #212]	; (80075fc <TIM_Base_SetConfig+0x14c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d017      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a34      	ldr	r2, [pc, #208]	; (8007600 <TIM_Base_SetConfig+0x150>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d013      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a33      	ldr	r2, [pc, #204]	; (8007604 <TIM_Base_SetConfig+0x154>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00f      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a33      	ldr	r2, [pc, #204]	; (800760c <TIM_Base_SetConfig+0x15c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00b      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a32      	ldr	r2, [pc, #200]	; (8007610 <TIM_Base_SetConfig+0x160>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d007      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a31      	ldr	r2, [pc, #196]	; (8007614 <TIM_Base_SetConfig+0x164>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d003      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a2c      	ldr	r2, [pc, #176]	; (8007608 <TIM_Base_SetConfig+0x158>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d108      	bne.n	800756c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a18      	ldr	r2, [pc, #96]	; (80075f4 <TIM_Base_SetConfig+0x144>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d013      	beq.n	80075c0 <TIM_Base_SetConfig+0x110>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a1a      	ldr	r2, [pc, #104]	; (8007604 <TIM_Base_SetConfig+0x154>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00f      	beq.n	80075c0 <TIM_Base_SetConfig+0x110>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a1a      	ldr	r2, [pc, #104]	; (800760c <TIM_Base_SetConfig+0x15c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00b      	beq.n	80075c0 <TIM_Base_SetConfig+0x110>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a19      	ldr	r2, [pc, #100]	; (8007610 <TIM_Base_SetConfig+0x160>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d007      	beq.n	80075c0 <TIM_Base_SetConfig+0x110>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a18      	ldr	r2, [pc, #96]	; (8007614 <TIM_Base_SetConfig+0x164>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d003      	beq.n	80075c0 <TIM_Base_SetConfig+0x110>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a13      	ldr	r2, [pc, #76]	; (8007608 <TIM_Base_SetConfig+0x158>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d103      	bne.n	80075c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	691a      	ldr	r2, [r3, #16]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d105      	bne.n	80075e6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f023 0201 	bic.w	r2, r3, #1
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	611a      	str	r2, [r3, #16]
  }
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40000c00 	.word	0x40000c00
 8007604:	40013400 	.word	0x40013400
 8007608:	40015000 	.word	0x40015000
 800760c:	40014000 	.word	0x40014000
 8007610:	40014400 	.word	0x40014400
 8007614:	40014800 	.word	0x40014800

08007618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	f023 0201 	bic.w	r2, r3, #1
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0303 	bic.w	r3, r3, #3
 8007652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f023 0302 	bic.w	r3, r3, #2
 8007664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a30      	ldr	r2, [pc, #192]	; (8007734 <TIM_OC1_SetConfig+0x11c>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d013      	beq.n	80076a0 <TIM_OC1_SetConfig+0x88>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a2f      	ldr	r2, [pc, #188]	; (8007738 <TIM_OC1_SetConfig+0x120>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00f      	beq.n	80076a0 <TIM_OC1_SetConfig+0x88>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a2e      	ldr	r2, [pc, #184]	; (800773c <TIM_OC1_SetConfig+0x124>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00b      	beq.n	80076a0 <TIM_OC1_SetConfig+0x88>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a2d      	ldr	r2, [pc, #180]	; (8007740 <TIM_OC1_SetConfig+0x128>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d007      	beq.n	80076a0 <TIM_OC1_SetConfig+0x88>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a2c      	ldr	r2, [pc, #176]	; (8007744 <TIM_OC1_SetConfig+0x12c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d003      	beq.n	80076a0 <TIM_OC1_SetConfig+0x88>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a2b      	ldr	r2, [pc, #172]	; (8007748 <TIM_OC1_SetConfig+0x130>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d10c      	bne.n	80076ba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f023 0308 	bic.w	r3, r3, #8
 80076a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f023 0304 	bic.w	r3, r3, #4
 80076b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a1d      	ldr	r2, [pc, #116]	; (8007734 <TIM_OC1_SetConfig+0x11c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d013      	beq.n	80076ea <TIM_OC1_SetConfig+0xd2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a1c      	ldr	r2, [pc, #112]	; (8007738 <TIM_OC1_SetConfig+0x120>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00f      	beq.n	80076ea <TIM_OC1_SetConfig+0xd2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a1b      	ldr	r2, [pc, #108]	; (800773c <TIM_OC1_SetConfig+0x124>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00b      	beq.n	80076ea <TIM_OC1_SetConfig+0xd2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a1a      	ldr	r2, [pc, #104]	; (8007740 <TIM_OC1_SetConfig+0x128>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d007      	beq.n	80076ea <TIM_OC1_SetConfig+0xd2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a19      	ldr	r2, [pc, #100]	; (8007744 <TIM_OC1_SetConfig+0x12c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d003      	beq.n	80076ea <TIM_OC1_SetConfig+0xd2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a18      	ldr	r2, [pc, #96]	; (8007748 <TIM_OC1_SetConfig+0x130>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d111      	bne.n	800770e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	4313      	orrs	r3, r2
 800770c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	621a      	str	r2, [r3, #32]
}
 8007728:	bf00      	nop
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	40012c00 	.word	0x40012c00
 8007738:	40013400 	.word	0x40013400
 800773c:	40014000 	.word	0x40014000
 8007740:	40014400 	.word	0x40014400
 8007744:	40014800 	.word	0x40014800
 8007748:	40015000 	.word	0x40015000

0800774c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	f023 0210 	bic.w	r2, r3, #16
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800777a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	4313      	orrs	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f023 0320 	bic.w	r3, r3, #32
 800779a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	011b      	lsls	r3, r3, #4
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a2c      	ldr	r2, [pc, #176]	; (800785c <TIM_OC2_SetConfig+0x110>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d007      	beq.n	80077c0 <TIM_OC2_SetConfig+0x74>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a2b      	ldr	r2, [pc, #172]	; (8007860 <TIM_OC2_SetConfig+0x114>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d003      	beq.n	80077c0 <TIM_OC2_SetConfig+0x74>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a2a      	ldr	r2, [pc, #168]	; (8007864 <TIM_OC2_SetConfig+0x118>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d10d      	bne.n	80077dc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a1f      	ldr	r2, [pc, #124]	; (800785c <TIM_OC2_SetConfig+0x110>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d013      	beq.n	800780c <TIM_OC2_SetConfig+0xc0>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a1e      	ldr	r2, [pc, #120]	; (8007860 <TIM_OC2_SetConfig+0x114>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00f      	beq.n	800780c <TIM_OC2_SetConfig+0xc0>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a1e      	ldr	r2, [pc, #120]	; (8007868 <TIM_OC2_SetConfig+0x11c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00b      	beq.n	800780c <TIM_OC2_SetConfig+0xc0>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a1d      	ldr	r2, [pc, #116]	; (800786c <TIM_OC2_SetConfig+0x120>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d007      	beq.n	800780c <TIM_OC2_SetConfig+0xc0>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a1c      	ldr	r2, [pc, #112]	; (8007870 <TIM_OC2_SetConfig+0x124>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d003      	beq.n	800780c <TIM_OC2_SetConfig+0xc0>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a17      	ldr	r2, [pc, #92]	; (8007864 <TIM_OC2_SetConfig+0x118>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d113      	bne.n	8007834 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800781a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	621a      	str	r2, [r3, #32]
}
 800784e:	bf00      	nop
 8007850:	371c      	adds	r7, #28
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	40012c00 	.word	0x40012c00
 8007860:	40013400 	.word	0x40013400
 8007864:	40015000 	.word	0x40015000
 8007868:	40014000 	.word	0x40014000
 800786c:	40014400 	.word	0x40014400
 8007870:	40014800 	.word	0x40014800

08007874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a2b      	ldr	r2, [pc, #172]	; (8007980 <TIM_OC3_SetConfig+0x10c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d007      	beq.n	80078e6 <TIM_OC3_SetConfig+0x72>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a2a      	ldr	r2, [pc, #168]	; (8007984 <TIM_OC3_SetConfig+0x110>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d003      	beq.n	80078e6 <TIM_OC3_SetConfig+0x72>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a29      	ldr	r2, [pc, #164]	; (8007988 <TIM_OC3_SetConfig+0x114>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d10d      	bne.n	8007902 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a1e      	ldr	r2, [pc, #120]	; (8007980 <TIM_OC3_SetConfig+0x10c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d013      	beq.n	8007932 <TIM_OC3_SetConfig+0xbe>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a1d      	ldr	r2, [pc, #116]	; (8007984 <TIM_OC3_SetConfig+0x110>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00f      	beq.n	8007932 <TIM_OC3_SetConfig+0xbe>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a1d      	ldr	r2, [pc, #116]	; (800798c <TIM_OC3_SetConfig+0x118>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00b      	beq.n	8007932 <TIM_OC3_SetConfig+0xbe>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a1c      	ldr	r2, [pc, #112]	; (8007990 <TIM_OC3_SetConfig+0x11c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d007      	beq.n	8007932 <TIM_OC3_SetConfig+0xbe>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a1b      	ldr	r2, [pc, #108]	; (8007994 <TIM_OC3_SetConfig+0x120>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d003      	beq.n	8007932 <TIM_OC3_SetConfig+0xbe>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a16      	ldr	r2, [pc, #88]	; (8007988 <TIM_OC3_SetConfig+0x114>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d113      	bne.n	800795a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4313      	orrs	r3, r2
 800794c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	621a      	str	r2, [r3, #32]
}
 8007974:	bf00      	nop
 8007976:	371c      	adds	r7, #28
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	40012c00 	.word	0x40012c00
 8007984:	40013400 	.word	0x40013400
 8007988:	40015000 	.word	0x40015000
 800798c:	40014000 	.word	0x40014000
 8007990:	40014400 	.word	0x40014400
 8007994:	40014800 	.word	0x40014800

08007998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	031b      	lsls	r3, r3, #12
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a2c      	ldr	r2, [pc, #176]	; (8007aa8 <TIM_OC4_SetConfig+0x110>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d007      	beq.n	8007a0c <TIM_OC4_SetConfig+0x74>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a2b      	ldr	r2, [pc, #172]	; (8007aac <TIM_OC4_SetConfig+0x114>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d003      	beq.n	8007a0c <TIM_OC4_SetConfig+0x74>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a2a      	ldr	r2, [pc, #168]	; (8007ab0 <TIM_OC4_SetConfig+0x118>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d10d      	bne.n	8007a28 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	031b      	lsls	r3, r3, #12
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a1f      	ldr	r2, [pc, #124]	; (8007aa8 <TIM_OC4_SetConfig+0x110>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d013      	beq.n	8007a58 <TIM_OC4_SetConfig+0xc0>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a1e      	ldr	r2, [pc, #120]	; (8007aac <TIM_OC4_SetConfig+0x114>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00f      	beq.n	8007a58 <TIM_OC4_SetConfig+0xc0>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a1e      	ldr	r2, [pc, #120]	; (8007ab4 <TIM_OC4_SetConfig+0x11c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00b      	beq.n	8007a58 <TIM_OC4_SetConfig+0xc0>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a1d      	ldr	r2, [pc, #116]	; (8007ab8 <TIM_OC4_SetConfig+0x120>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d007      	beq.n	8007a58 <TIM_OC4_SetConfig+0xc0>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a1c      	ldr	r2, [pc, #112]	; (8007abc <TIM_OC4_SetConfig+0x124>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d003      	beq.n	8007a58 <TIM_OC4_SetConfig+0xc0>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a17      	ldr	r2, [pc, #92]	; (8007ab0 <TIM_OC4_SetConfig+0x118>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d113      	bne.n	8007a80 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a5e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a66:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	019b      	lsls	r3, r3, #6
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	019b      	lsls	r3, r3, #6
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	621a      	str	r2, [r3, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40012c00 	.word	0x40012c00
 8007aac:	40013400 	.word	0x40013400
 8007ab0:	40015000 	.word	0x40015000
 8007ab4:	40014000 	.word	0x40014000
 8007ab8:	40014400 	.word	0x40014400
 8007abc:	40014800 	.word	0x40014800

08007ac0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	041b      	lsls	r3, r3, #16
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a19      	ldr	r2, [pc, #100]	; (8007b7c <TIM_OC5_SetConfig+0xbc>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d013      	beq.n	8007b42 <TIM_OC5_SetConfig+0x82>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a18      	ldr	r2, [pc, #96]	; (8007b80 <TIM_OC5_SetConfig+0xc0>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d00f      	beq.n	8007b42 <TIM_OC5_SetConfig+0x82>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a17      	ldr	r2, [pc, #92]	; (8007b84 <TIM_OC5_SetConfig+0xc4>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d00b      	beq.n	8007b42 <TIM_OC5_SetConfig+0x82>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a16      	ldr	r2, [pc, #88]	; (8007b88 <TIM_OC5_SetConfig+0xc8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d007      	beq.n	8007b42 <TIM_OC5_SetConfig+0x82>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a15      	ldr	r2, [pc, #84]	; (8007b8c <TIM_OC5_SetConfig+0xcc>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d003      	beq.n	8007b42 <TIM_OC5_SetConfig+0x82>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a14      	ldr	r2, [pc, #80]	; (8007b90 <TIM_OC5_SetConfig+0xd0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d109      	bne.n	8007b56 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	021b      	lsls	r3, r3, #8
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	621a      	str	r2, [r3, #32]
}
 8007b70:	bf00      	nop
 8007b72:	371c      	adds	r7, #28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	40012c00 	.word	0x40012c00
 8007b80:	40013400 	.word	0x40013400
 8007b84:	40014000 	.word	0x40014000
 8007b88:	40014400 	.word	0x40014400
 8007b8c:	40014800 	.word	0x40014800
 8007b90:	40015000 	.word	0x40015000

08007b94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	051b      	lsls	r3, r3, #20
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a1a      	ldr	r2, [pc, #104]	; (8007c54 <TIM_OC6_SetConfig+0xc0>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d013      	beq.n	8007c18 <TIM_OC6_SetConfig+0x84>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a19      	ldr	r2, [pc, #100]	; (8007c58 <TIM_OC6_SetConfig+0xc4>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00f      	beq.n	8007c18 <TIM_OC6_SetConfig+0x84>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a18      	ldr	r2, [pc, #96]	; (8007c5c <TIM_OC6_SetConfig+0xc8>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d00b      	beq.n	8007c18 <TIM_OC6_SetConfig+0x84>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a17      	ldr	r2, [pc, #92]	; (8007c60 <TIM_OC6_SetConfig+0xcc>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d007      	beq.n	8007c18 <TIM_OC6_SetConfig+0x84>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a16      	ldr	r2, [pc, #88]	; (8007c64 <TIM_OC6_SetConfig+0xd0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d003      	beq.n	8007c18 <TIM_OC6_SetConfig+0x84>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a15      	ldr	r2, [pc, #84]	; (8007c68 <TIM_OC6_SetConfig+0xd4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d109      	bne.n	8007c2c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	029b      	lsls	r3, r3, #10
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	621a      	str	r2, [r3, #32]
}
 8007c46:	bf00      	nop
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	40012c00 	.word	0x40012c00
 8007c58:	40013400 	.word	0x40013400
 8007c5c:	40014000 	.word	0x40014000
 8007c60:	40014400 	.word	0x40014400
 8007c64:	40014800 	.word	0x40014800
 8007c68:	40015000 	.word	0x40015000

08007c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	f023 0201 	bic.w	r2, r3, #1
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f023 030a 	bic.w	r3, r3, #10
 8007ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	621a      	str	r2, [r3, #32]
}
 8007cbe:	bf00      	nop
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b087      	sub	sp, #28
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	f023 0210 	bic.w	r2, r3, #16
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	031b      	lsls	r3, r3, #12
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b085      	sub	sp, #20
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	f043 0307 	orr.w	r3, r3, #7
 8007d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	609a      	str	r2, [r3, #8]
}
 8007d58:	bf00      	nop
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	021a      	lsls	r2, r3, #8
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	431a      	orrs	r2, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	609a      	str	r2, [r3, #8]
}
 8007d98:	bf00      	nop
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f003 031f 	and.w	r3, r3, #31
 8007db6:	2201      	movs	r2, #1
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a1a      	ldr	r2, [r3, #32]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	43db      	mvns	r3, r3
 8007dc6:	401a      	ands	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a1a      	ldr	r2, [r3, #32]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d101      	bne.n	8007e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e074      	b.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a34      	ldr	r2, [pc, #208]	; (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d009      	beq.n	8007e46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a33      	ldr	r2, [pc, #204]	; (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d004      	beq.n	8007e46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a31      	ldr	r2, [pc, #196]	; (8007f08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d108      	bne.n	8007e58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a21      	ldr	r2, [pc, #132]	; (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d022      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e88:	d01d      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a1f      	ldr	r2, [pc, #124]	; (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d018      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1d      	ldr	r2, [pc, #116]	; (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d013      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1c      	ldr	r2, [pc, #112]	; (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d00e      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a15      	ldr	r2, [pc, #84]	; (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d009      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a18      	ldr	r2, [pc, #96]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d004      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a11      	ldr	r2, [pc, #68]	; (8007f08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d10c      	bne.n	8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	40012c00 	.word	0x40012c00
 8007f04:	40013400 	.word	0x40013400
 8007f08:	40015000 	.word	0x40015000
 8007f0c:	40000400 	.word	0x40000400
 8007f10:	40000800 	.word	0x40000800
 8007f14:	40000c00 	.word	0x40000c00
 8007f18:	40014000 	.word	0x40014000

08007f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e042      	b.n	8008040 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d106      	bne.n	8007fd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7fa fc8f 	bl	80028f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2224      	movs	r2, #36	; 0x24
 8007fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0201 	bic.w	r2, r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fb24 	bl	8008640 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f825 	bl	8008048 <UART_SetConfig>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e01b      	b.n	8008040 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fba3 	bl	8008784 <UART_CheckIdleState>
 800803e:	4603      	mov	r3, r0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800804c:	b08c      	sub	sp, #48	; 0x30
 800804e:	af00      	add	r7, sp, #0
 8008050:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	689a      	ldr	r2, [r3, #8]
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	431a      	orrs	r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	431a      	orrs	r2, r3
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	4313      	orrs	r3, r2
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4baa      	ldr	r3, [pc, #680]	; (8008320 <UART_SetConfig+0x2d8>)
 8008078:	4013      	ands	r3, r2
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	6812      	ldr	r2, [r2, #0]
 800807e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008080:	430b      	orrs	r3, r1
 8008082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a9f      	ldr	r2, [pc, #636]	; (8008324 <UART_SetConfig+0x2dc>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d004      	beq.n	80080b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080b0:	4313      	orrs	r3, r2
 80080b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80080be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	6812      	ldr	r2, [r2, #0]
 80080c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d2:	f023 010f 	bic.w	r1, r3, #15
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a90      	ldr	r2, [pc, #576]	; (8008328 <UART_SetConfig+0x2e0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d125      	bne.n	8008138 <UART_SetConfig+0xf0>
 80080ec:	4b8f      	ldr	r3, [pc, #572]	; (800832c <UART_SetConfig+0x2e4>)
 80080ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d81a      	bhi.n	8008130 <UART_SetConfig+0xe8>
 80080fa:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <UART_SetConfig+0xb8>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008111 	.word	0x08008111
 8008104:	08008121 	.word	0x08008121
 8008108:	08008119 	.word	0x08008119
 800810c:	08008129 	.word	0x08008129
 8008110:	2301      	movs	r3, #1
 8008112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008116:	e116      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008118:	2302      	movs	r3, #2
 800811a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811e:	e112      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008120:	2304      	movs	r3, #4
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008126:	e10e      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008128:	2308      	movs	r3, #8
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812e:	e10a      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008130:	2310      	movs	r3, #16
 8008132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008136:	e106      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a7c      	ldr	r2, [pc, #496]	; (8008330 <UART_SetConfig+0x2e8>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d138      	bne.n	80081b4 <UART_SetConfig+0x16c>
 8008142:	4b7a      	ldr	r3, [pc, #488]	; (800832c <UART_SetConfig+0x2e4>)
 8008144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008148:	f003 030c 	and.w	r3, r3, #12
 800814c:	2b0c      	cmp	r3, #12
 800814e:	d82d      	bhi.n	80081ac <UART_SetConfig+0x164>
 8008150:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <UART_SetConfig+0x110>)
 8008152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008156:	bf00      	nop
 8008158:	0800818d 	.word	0x0800818d
 800815c:	080081ad 	.word	0x080081ad
 8008160:	080081ad 	.word	0x080081ad
 8008164:	080081ad 	.word	0x080081ad
 8008168:	0800819d 	.word	0x0800819d
 800816c:	080081ad 	.word	0x080081ad
 8008170:	080081ad 	.word	0x080081ad
 8008174:	080081ad 	.word	0x080081ad
 8008178:	08008195 	.word	0x08008195
 800817c:	080081ad 	.word	0x080081ad
 8008180:	080081ad 	.word	0x080081ad
 8008184:	080081ad 	.word	0x080081ad
 8008188:	080081a5 	.word	0x080081a5
 800818c:	2300      	movs	r3, #0
 800818e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008192:	e0d8      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008194:	2302      	movs	r3, #2
 8008196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800819a:	e0d4      	b.n	8008346 <UART_SetConfig+0x2fe>
 800819c:	2304      	movs	r3, #4
 800819e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a2:	e0d0      	b.n	8008346 <UART_SetConfig+0x2fe>
 80081a4:	2308      	movs	r3, #8
 80081a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081aa:	e0cc      	b.n	8008346 <UART_SetConfig+0x2fe>
 80081ac:	2310      	movs	r3, #16
 80081ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081b2:	e0c8      	b.n	8008346 <UART_SetConfig+0x2fe>
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a5e      	ldr	r2, [pc, #376]	; (8008334 <UART_SetConfig+0x2ec>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d125      	bne.n	800820a <UART_SetConfig+0x1c2>
 80081be:	4b5b      	ldr	r3, [pc, #364]	; (800832c <UART_SetConfig+0x2e4>)
 80081c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081c8:	2b30      	cmp	r3, #48	; 0x30
 80081ca:	d016      	beq.n	80081fa <UART_SetConfig+0x1b2>
 80081cc:	2b30      	cmp	r3, #48	; 0x30
 80081ce:	d818      	bhi.n	8008202 <UART_SetConfig+0x1ba>
 80081d0:	2b20      	cmp	r3, #32
 80081d2:	d00a      	beq.n	80081ea <UART_SetConfig+0x1a2>
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	d814      	bhi.n	8008202 <UART_SetConfig+0x1ba>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <UART_SetConfig+0x19a>
 80081dc:	2b10      	cmp	r3, #16
 80081de:	d008      	beq.n	80081f2 <UART_SetConfig+0x1aa>
 80081e0:	e00f      	b.n	8008202 <UART_SetConfig+0x1ba>
 80081e2:	2300      	movs	r3, #0
 80081e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e8:	e0ad      	b.n	8008346 <UART_SetConfig+0x2fe>
 80081ea:	2302      	movs	r3, #2
 80081ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f0:	e0a9      	b.n	8008346 <UART_SetConfig+0x2fe>
 80081f2:	2304      	movs	r3, #4
 80081f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f8:	e0a5      	b.n	8008346 <UART_SetConfig+0x2fe>
 80081fa:	2308      	movs	r3, #8
 80081fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008200:	e0a1      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008202:	2310      	movs	r3, #16
 8008204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008208:	e09d      	b.n	8008346 <UART_SetConfig+0x2fe>
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a4a      	ldr	r2, [pc, #296]	; (8008338 <UART_SetConfig+0x2f0>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d125      	bne.n	8008260 <UART_SetConfig+0x218>
 8008214:	4b45      	ldr	r3, [pc, #276]	; (800832c <UART_SetConfig+0x2e4>)
 8008216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800821a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800821e:	2bc0      	cmp	r3, #192	; 0xc0
 8008220:	d016      	beq.n	8008250 <UART_SetConfig+0x208>
 8008222:	2bc0      	cmp	r3, #192	; 0xc0
 8008224:	d818      	bhi.n	8008258 <UART_SetConfig+0x210>
 8008226:	2b80      	cmp	r3, #128	; 0x80
 8008228:	d00a      	beq.n	8008240 <UART_SetConfig+0x1f8>
 800822a:	2b80      	cmp	r3, #128	; 0x80
 800822c:	d814      	bhi.n	8008258 <UART_SetConfig+0x210>
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <UART_SetConfig+0x1f0>
 8008232:	2b40      	cmp	r3, #64	; 0x40
 8008234:	d008      	beq.n	8008248 <UART_SetConfig+0x200>
 8008236:	e00f      	b.n	8008258 <UART_SetConfig+0x210>
 8008238:	2300      	movs	r3, #0
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800823e:	e082      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008240:	2302      	movs	r3, #2
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008246:	e07e      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008248:	2304      	movs	r3, #4
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824e:	e07a      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008250:	2308      	movs	r3, #8
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008256:	e076      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008258:	2310      	movs	r3, #16
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800825e:	e072      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a35      	ldr	r2, [pc, #212]	; (800833c <UART_SetConfig+0x2f4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d12a      	bne.n	80082c0 <UART_SetConfig+0x278>
 800826a:	4b30      	ldr	r3, [pc, #192]	; (800832c <UART_SetConfig+0x2e4>)
 800826c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008278:	d01a      	beq.n	80082b0 <UART_SetConfig+0x268>
 800827a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800827e:	d81b      	bhi.n	80082b8 <UART_SetConfig+0x270>
 8008280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008284:	d00c      	beq.n	80082a0 <UART_SetConfig+0x258>
 8008286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800828a:	d815      	bhi.n	80082b8 <UART_SetConfig+0x270>
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <UART_SetConfig+0x250>
 8008290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008294:	d008      	beq.n	80082a8 <UART_SetConfig+0x260>
 8008296:	e00f      	b.n	80082b8 <UART_SetConfig+0x270>
 8008298:	2300      	movs	r3, #0
 800829a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800829e:	e052      	b.n	8008346 <UART_SetConfig+0x2fe>
 80082a0:	2302      	movs	r3, #2
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a6:	e04e      	b.n	8008346 <UART_SetConfig+0x2fe>
 80082a8:	2304      	movs	r3, #4
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ae:	e04a      	b.n	8008346 <UART_SetConfig+0x2fe>
 80082b0:	2308      	movs	r3, #8
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b6:	e046      	b.n	8008346 <UART_SetConfig+0x2fe>
 80082b8:	2310      	movs	r3, #16
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082be:	e042      	b.n	8008346 <UART_SetConfig+0x2fe>
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a17      	ldr	r2, [pc, #92]	; (8008324 <UART_SetConfig+0x2dc>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d13a      	bne.n	8008340 <UART_SetConfig+0x2f8>
 80082ca:	4b18      	ldr	r3, [pc, #96]	; (800832c <UART_SetConfig+0x2e4>)
 80082cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082d8:	d01a      	beq.n	8008310 <UART_SetConfig+0x2c8>
 80082da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082de:	d81b      	bhi.n	8008318 <UART_SetConfig+0x2d0>
 80082e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e4:	d00c      	beq.n	8008300 <UART_SetConfig+0x2b8>
 80082e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ea:	d815      	bhi.n	8008318 <UART_SetConfig+0x2d0>
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d003      	beq.n	80082f8 <UART_SetConfig+0x2b0>
 80082f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f4:	d008      	beq.n	8008308 <UART_SetConfig+0x2c0>
 80082f6:	e00f      	b.n	8008318 <UART_SetConfig+0x2d0>
 80082f8:	2300      	movs	r3, #0
 80082fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fe:	e022      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008300:	2302      	movs	r3, #2
 8008302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008306:	e01e      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008308:	2304      	movs	r3, #4
 800830a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800830e:	e01a      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008310:	2308      	movs	r3, #8
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008316:	e016      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008318:	2310      	movs	r3, #16
 800831a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800831e:	e012      	b.n	8008346 <UART_SetConfig+0x2fe>
 8008320:	cfff69f3 	.word	0xcfff69f3
 8008324:	40008000 	.word	0x40008000
 8008328:	40013800 	.word	0x40013800
 800832c:	40021000 	.word	0x40021000
 8008330:	40004400 	.word	0x40004400
 8008334:	40004800 	.word	0x40004800
 8008338:	40004c00 	.word	0x40004c00
 800833c:	40005000 	.word	0x40005000
 8008340:	2310      	movs	r3, #16
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4aae      	ldr	r2, [pc, #696]	; (8008604 <UART_SetConfig+0x5bc>)
 800834c:	4293      	cmp	r3, r2
 800834e:	f040 8097 	bne.w	8008480 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008352:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008356:	2b08      	cmp	r3, #8
 8008358:	d823      	bhi.n	80083a2 <UART_SetConfig+0x35a>
 800835a:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <UART_SetConfig+0x318>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	08008385 	.word	0x08008385
 8008364:	080083a3 	.word	0x080083a3
 8008368:	0800838d 	.word	0x0800838d
 800836c:	080083a3 	.word	0x080083a3
 8008370:	08008393 	.word	0x08008393
 8008374:	080083a3 	.word	0x080083a3
 8008378:	080083a3 	.word	0x080083a3
 800837c:	080083a3 	.word	0x080083a3
 8008380:	0800839b 	.word	0x0800839b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008384:	f7fd feb8 	bl	80060f8 <HAL_RCC_GetPCLK1Freq>
 8008388:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800838a:	e010      	b.n	80083ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800838c:	4b9e      	ldr	r3, [pc, #632]	; (8008608 <UART_SetConfig+0x5c0>)
 800838e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008390:	e00d      	b.n	80083ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008392:	f7fd fe43 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8008396:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008398:	e009      	b.n	80083ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800839a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083a0:	e005      	b.n	80083ae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 8130 	beq.w	8008616 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	4a94      	ldr	r2, [pc, #592]	; (800860c <UART_SetConfig+0x5c4>)
 80083bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083c0:	461a      	mov	r2, r3
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083c8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	4613      	mov	r3, r2
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	4413      	add	r3, r2
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d305      	bcc.n	80083e6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d903      	bls.n	80083ee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083ec:	e113      	b.n	8008616 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	2200      	movs	r2, #0
 80083f2:	60bb      	str	r3, [r7, #8]
 80083f4:	60fa      	str	r2, [r7, #12]
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	4a84      	ldr	r2, [pc, #528]	; (800860c <UART_SetConfig+0x5c4>)
 80083fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008400:	b29b      	uxth	r3, r3
 8008402:	2200      	movs	r2, #0
 8008404:	603b      	str	r3, [r7, #0]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800840c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008410:	f7f8 fbbe 	bl	8000b90 <__aeabi_uldivmod>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4610      	mov	r0, r2
 800841a:	4619      	mov	r1, r3
 800841c:	f04f 0200 	mov.w	r2, #0
 8008420:	f04f 0300 	mov.w	r3, #0
 8008424:	020b      	lsls	r3, r1, #8
 8008426:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800842a:	0202      	lsls	r2, r0, #8
 800842c:	6979      	ldr	r1, [r7, #20]
 800842e:	6849      	ldr	r1, [r1, #4]
 8008430:	0849      	lsrs	r1, r1, #1
 8008432:	2000      	movs	r0, #0
 8008434:	460c      	mov	r4, r1
 8008436:	4605      	mov	r5, r0
 8008438:	eb12 0804 	adds.w	r8, r2, r4
 800843c:	eb43 0905 	adc.w	r9, r3, r5
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	469a      	mov	sl, r3
 8008448:	4693      	mov	fp, r2
 800844a:	4652      	mov	r2, sl
 800844c:	465b      	mov	r3, fp
 800844e:	4640      	mov	r0, r8
 8008450:	4649      	mov	r1, r9
 8008452:	f7f8 fb9d 	bl	8000b90 <__aeabi_uldivmod>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4613      	mov	r3, r2
 800845c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008464:	d308      	bcc.n	8008478 <UART_SetConfig+0x430>
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800846c:	d204      	bcs.n	8008478 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6a3a      	ldr	r2, [r7, #32]
 8008474:	60da      	str	r2, [r3, #12]
 8008476:	e0ce      	b.n	8008616 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800847e:	e0ca      	b.n	8008616 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008488:	d166      	bne.n	8008558 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800848a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800848e:	2b08      	cmp	r3, #8
 8008490:	d827      	bhi.n	80084e2 <UART_SetConfig+0x49a>
 8008492:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <UART_SetConfig+0x450>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084bd 	.word	0x080084bd
 800849c:	080084c5 	.word	0x080084c5
 80084a0:	080084cd 	.word	0x080084cd
 80084a4:	080084e3 	.word	0x080084e3
 80084a8:	080084d3 	.word	0x080084d3
 80084ac:	080084e3 	.word	0x080084e3
 80084b0:	080084e3 	.word	0x080084e3
 80084b4:	080084e3 	.word	0x080084e3
 80084b8:	080084db 	.word	0x080084db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084bc:	f7fd fe1c 	bl	80060f8 <HAL_RCC_GetPCLK1Freq>
 80084c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084c2:	e014      	b.n	80084ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084c4:	f7fd fe2e 	bl	8006124 <HAL_RCC_GetPCLK2Freq>
 80084c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084ca:	e010      	b.n	80084ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084cc:	4b4e      	ldr	r3, [pc, #312]	; (8008608 <UART_SetConfig+0x5c0>)
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084d0:	e00d      	b.n	80084ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084d2:	f7fd fda3 	bl	800601c <HAL_RCC_GetSysClockFreq>
 80084d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084d8:	e009      	b.n	80084ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084e0:	e005      	b.n	80084ee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 8090 	beq.w	8008616 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	4a44      	ldr	r2, [pc, #272]	; (800860c <UART_SetConfig+0x5c4>)
 80084fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008500:	461a      	mov	r2, r3
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	fbb3 f3f2 	udiv	r3, r3, r2
 8008508:	005a      	lsls	r2, r3, #1
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	085b      	lsrs	r3, r3, #1
 8008510:	441a      	add	r2, r3
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	fbb2 f3f3 	udiv	r3, r2, r3
 800851a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	2b0f      	cmp	r3, #15
 8008520:	d916      	bls.n	8008550 <UART_SetConfig+0x508>
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008528:	d212      	bcs.n	8008550 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	b29b      	uxth	r3, r3
 800852e:	f023 030f 	bic.w	r3, r3, #15
 8008532:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	085b      	lsrs	r3, r3, #1
 8008538:	b29b      	uxth	r3, r3
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	b29a      	uxth	r2, r3
 8008540:	8bfb      	ldrh	r3, [r7, #30]
 8008542:	4313      	orrs	r3, r2
 8008544:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	8bfa      	ldrh	r2, [r7, #30]
 800854c:	60da      	str	r2, [r3, #12]
 800854e:	e062      	b.n	8008616 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008556:	e05e      	b.n	8008616 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008558:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800855c:	2b08      	cmp	r3, #8
 800855e:	d828      	bhi.n	80085b2 <UART_SetConfig+0x56a>
 8008560:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <UART_SetConfig+0x520>)
 8008562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008566:	bf00      	nop
 8008568:	0800858d 	.word	0x0800858d
 800856c:	08008595 	.word	0x08008595
 8008570:	0800859d 	.word	0x0800859d
 8008574:	080085b3 	.word	0x080085b3
 8008578:	080085a3 	.word	0x080085a3
 800857c:	080085b3 	.word	0x080085b3
 8008580:	080085b3 	.word	0x080085b3
 8008584:	080085b3 	.word	0x080085b3
 8008588:	080085ab 	.word	0x080085ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800858c:	f7fd fdb4 	bl	80060f8 <HAL_RCC_GetPCLK1Freq>
 8008590:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008592:	e014      	b.n	80085be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008594:	f7fd fdc6 	bl	8006124 <HAL_RCC_GetPCLK2Freq>
 8008598:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800859a:	e010      	b.n	80085be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800859c:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <UART_SetConfig+0x5c0>)
 800859e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085a0:	e00d      	b.n	80085be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085a2:	f7fd fd3b 	bl	800601c <HAL_RCC_GetSysClockFreq>
 80085a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085a8:	e009      	b.n	80085be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085b0:	e005      	b.n	80085be <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085bc:	bf00      	nop
    }

    if (pclk != 0U)
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d028      	beq.n	8008616 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	4a10      	ldr	r2, [pc, #64]	; (800860c <UART_SetConfig+0x5c4>)
 80085ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ce:	461a      	mov	r2, r3
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	085b      	lsrs	r3, r3, #1
 80085dc:	441a      	add	r2, r3
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	2b0f      	cmp	r3, #15
 80085ec:	d910      	bls.n	8008610 <UART_SetConfig+0x5c8>
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085f4:	d20c      	bcs.n	8008610 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	60da      	str	r2, [r3, #12]
 8008600:	e009      	b.n	8008616 <UART_SetConfig+0x5ce>
 8008602:	bf00      	nop
 8008604:	40008000 	.word	0x40008000
 8008608:	00f42400 	.word	0x00f42400
 800860c:	08008f24 	.word	0x08008f24
      }
      else
      {
        ret = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2201      	movs	r2, #1
 800861a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2201      	movs	r2, #1
 8008622:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2200      	movs	r2, #0
 800862a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2200      	movs	r2, #0
 8008630:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008632:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008636:	4618      	mov	r0, r3
 8008638:	3730      	adds	r7, #48	; 0x30
 800863a:	46bd      	mov	sp, r7
 800863c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864c:	f003 0308 	and.w	r3, r3, #8
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00a      	beq.n	800866a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	430a      	orrs	r2, r1
 8008668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	430a      	orrs	r2, r1
 800868a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00a      	beq.n	80086ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	f003 0304 	and.w	r3, r3, #4
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d4:	f003 0310 	and.w	r3, r3, #16
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	f003 0320 	and.w	r3, r3, #32
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	430a      	orrs	r2, r1
 8008712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01a      	beq.n	8008756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800873e:	d10a      	bne.n	8008756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	430a      	orrs	r2, r1
 8008776:	605a      	str	r2, [r3, #4]
  }
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b098      	sub	sp, #96	; 0x60
 8008788:	af02      	add	r7, sp, #8
 800878a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008794:	f7fa faa8 	bl	8002ce8 <HAL_GetTick>
 8008798:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0308 	and.w	r3, r3, #8
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	d12f      	bne.n	8008808 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087b0:	2200      	movs	r2, #0
 80087b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f88e 	bl	80088d8 <UART_WaitOnFlagUntilTimeout>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d022      	beq.n	8008808 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	e853 3f00 	ldrex	r3, [r3]
 80087ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087d6:	653b      	str	r3, [r7, #80]	; 0x50
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087e0:	647b      	str	r3, [r7, #68]	; 0x44
 80087e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087e8:	e841 2300 	strex	r3, r2, [r1]
 80087ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1e6      	bne.n	80087c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e063      	b.n	80088d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0304 	and.w	r3, r3, #4
 8008812:	2b04      	cmp	r3, #4
 8008814:	d149      	bne.n	80088aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008816:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800881e:	2200      	movs	r2, #0
 8008820:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f857 	bl	80088d8 <UART_WaitOnFlagUntilTimeout>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d03c      	beq.n	80088aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	623b      	str	r3, [r7, #32]
   return(result);
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	461a      	mov	r2, r3
 800884c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800884e:	633b      	str	r3, [r7, #48]	; 0x30
 8008850:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e6      	bne.n	8008830 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3308      	adds	r3, #8
 8008868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	e853 3f00 	ldrex	r3, [r3]
 8008870:	60fb      	str	r3, [r7, #12]
   return(result);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f023 0301 	bic.w	r3, r3, #1
 8008878:	64bb      	str	r3, [r7, #72]	; 0x48
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3308      	adds	r3, #8
 8008880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008882:	61fa      	str	r2, [r7, #28]
 8008884:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008886:	69b9      	ldr	r1, [r7, #24]
 8008888:	69fa      	ldr	r2, [r7, #28]
 800888a:	e841 2300 	strex	r3, r2, [r1]
 800888e:	617b      	str	r3, [r7, #20]
   return(result);
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1e5      	bne.n	8008862 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e012      	b.n	80088d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2220      	movs	r2, #32
 80088ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2220      	movs	r2, #32
 80088b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3758      	adds	r7, #88	; 0x58
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	4613      	mov	r3, r2
 80088e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088e8:	e04f      	b.n	800898a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f0:	d04b      	beq.n	800898a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088f2:	f7fa f9f9 	bl	8002ce8 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d302      	bcc.n	8008908 <UART_WaitOnFlagUntilTimeout+0x30>
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e04e      	b.n	80089aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0304 	and.w	r3, r3, #4
 8008916:	2b00      	cmp	r3, #0
 8008918:	d037      	beq.n	800898a <UART_WaitOnFlagUntilTimeout+0xb2>
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2b80      	cmp	r3, #128	; 0x80
 800891e:	d034      	beq.n	800898a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2b40      	cmp	r3, #64	; 0x40
 8008924:	d031      	beq.n	800898a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	f003 0308 	and.w	r3, r3, #8
 8008930:	2b08      	cmp	r3, #8
 8008932:	d110      	bne.n	8008956 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2208      	movs	r2, #8
 800893a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 f838 	bl	80089b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2208      	movs	r2, #8
 8008946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e029      	b.n	80089aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69db      	ldr	r3, [r3, #28]
 800895c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008964:	d111      	bne.n	800898a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800896e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 f81e 	bl	80089b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2220      	movs	r2, #32
 800897a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e00f      	b.n	80089aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	69da      	ldr	r2, [r3, #28]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	4013      	ands	r3, r2
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	429a      	cmp	r2, r3
 8008998:	bf0c      	ite	eq
 800899a:	2301      	moveq	r3, #1
 800899c:	2300      	movne	r3, #0
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	461a      	mov	r2, r3
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d0a0      	beq.n	80088ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b095      	sub	sp, #84	; 0x54
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d8:	643b      	str	r3, [r7, #64]	; 0x40
 80089da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e6      	bne.n	80089ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	3308      	adds	r3, #8
 80089f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	e853 3f00 	ldrex	r3, [r3]
 80089fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a02:	f023 0301 	bic.w	r3, r3, #1
 8008a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a18:	e841 2300 	strex	r3, r2, [r1]
 8008a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e3      	bne.n	80089ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d118      	bne.n	8008a5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f023 0310 	bic.w	r3, r3, #16
 8008a40:	647b      	str	r3, [r7, #68]	; 0x44
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a4a:	61bb      	str	r3, [r7, #24]
 8008a4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	6979      	ldr	r1, [r7, #20]
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	613b      	str	r3, [r7, #16]
   return(result);
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e6      	bne.n	8008a2c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008a72:	bf00      	nop
 8008a74:	3754      	adds	r7, #84	; 0x54
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b085      	sub	sp, #20
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e027      	b.n	8008ae4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2224      	movs	r2, #36	; 0x24
 8008aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0201 	bic.w	r2, r2, #1
 8008aba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ac2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b04:	2302      	movs	r3, #2
 8008b06:	e02d      	b.n	8008b64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2224      	movs	r2, #36	; 0x24
 8008b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f022 0201 	bic.w	r2, r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f84f 	bl	8008be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d101      	bne.n	8008b84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b80:	2302      	movs	r3, #2
 8008b82:	e02d      	b.n	8008be0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2224      	movs	r2, #36	; 0x24
 8008b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0201 	bic.w	r2, r2, #1
 8008baa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f811 	bl	8008be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d108      	bne.n	8008c0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c08:	e031      	b.n	8008c6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c0a:	2308      	movs	r3, #8
 8008c0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c0e:	2308      	movs	r3, #8
 8008c10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	0e5b      	lsrs	r3, r3, #25
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	f003 0307 	and.w	r3, r3, #7
 8008c20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	0f5b      	lsrs	r3, r3, #29
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	f003 0307 	and.w	r3, r3, #7
 8008c30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	7b3a      	ldrb	r2, [r7, #12]
 8008c36:	4911      	ldr	r1, [pc, #68]	; (8008c7c <UARTEx_SetNbDataToProcess+0x94>)
 8008c38:	5c8a      	ldrb	r2, [r1, r2]
 8008c3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c3e:	7b3a      	ldrb	r2, [r7, #12]
 8008c40:	490f      	ldr	r1, [pc, #60]	; (8008c80 <UARTEx_SetNbDataToProcess+0x98>)
 8008c42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c44:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
 8008c52:	7b7a      	ldrb	r2, [r7, #13]
 8008c54:	4909      	ldr	r1, [pc, #36]	; (8008c7c <UARTEx_SetNbDataToProcess+0x94>)
 8008c56:	5c8a      	ldrb	r2, [r1, r2]
 8008c58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c5c:	7b7a      	ldrb	r2, [r7, #13]
 8008c5e:	4908      	ldr	r1, [pc, #32]	; (8008c80 <UARTEx_SetNbDataToProcess+0x98>)
 8008c60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c62:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c6e:	bf00      	nop
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	08008f3c 	.word	0x08008f3c
 8008c80:	08008f44 	.word	0x08008f44

08008c84 <memset>:
 8008c84:	4402      	add	r2, r0
 8008c86:	4603      	mov	r3, r0
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d100      	bne.n	8008c8e <memset+0xa>
 8008c8c:	4770      	bx	lr
 8008c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c92:	e7f9      	b.n	8008c88 <memset+0x4>

08008c94 <__errno>:
 8008c94:	4b01      	ldr	r3, [pc, #4]	; (8008c9c <__errno+0x8>)
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	20000064 	.word	0x20000064

08008ca0 <__libc_init_array>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	4d0d      	ldr	r5, [pc, #52]	; (8008cd8 <__libc_init_array+0x38>)
 8008ca4:	4c0d      	ldr	r4, [pc, #52]	; (8008cdc <__libc_init_array+0x3c>)
 8008ca6:	1b64      	subs	r4, r4, r5
 8008ca8:	10a4      	asrs	r4, r4, #2
 8008caa:	2600      	movs	r6, #0
 8008cac:	42a6      	cmp	r6, r4
 8008cae:	d109      	bne.n	8008cc4 <__libc_init_array+0x24>
 8008cb0:	4d0b      	ldr	r5, [pc, #44]	; (8008ce0 <__libc_init_array+0x40>)
 8008cb2:	4c0c      	ldr	r4, [pc, #48]	; (8008ce4 <__libc_init_array+0x44>)
 8008cb4:	f000 f91e 	bl	8008ef4 <_init>
 8008cb8:	1b64      	subs	r4, r4, r5
 8008cba:	10a4      	asrs	r4, r4, #2
 8008cbc:	2600      	movs	r6, #0
 8008cbe:	42a6      	cmp	r6, r4
 8008cc0:	d105      	bne.n	8008cce <__libc_init_array+0x2e>
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc8:	4798      	blx	r3
 8008cca:	3601      	adds	r6, #1
 8008ccc:	e7ee      	b.n	8008cac <__libc_init_array+0xc>
 8008cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd2:	4798      	blx	r3
 8008cd4:	3601      	adds	r6, #1
 8008cd6:	e7f2      	b.n	8008cbe <__libc_init_array+0x1e>
 8008cd8:	08008f54 	.word	0x08008f54
 8008cdc:	08008f54 	.word	0x08008f54
 8008ce0:	08008f54 	.word	0x08008f54
 8008ce4:	08008f58 	.word	0x08008f58

08008ce8 <sqrt>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	ed2d 8b02 	vpush	{d8}
 8008cee:	ec55 4b10 	vmov	r4, r5, d0
 8008cf2:	f000 f825 	bl	8008d40 <__ieee754_sqrt>
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	462b      	mov	r3, r5
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	eeb0 8a40 	vmov.f32	s16, s0
 8008d02:	eef0 8a60 	vmov.f32	s17, s1
 8008d06:	f7f7 fedd 	bl	8000ac4 <__aeabi_dcmpun>
 8008d0a:	b990      	cbnz	r0, 8008d32 <sqrt+0x4a>
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2300      	movs	r3, #0
 8008d10:	4620      	mov	r0, r4
 8008d12:	4629      	mov	r1, r5
 8008d14:	f7f7 feae 	bl	8000a74 <__aeabi_dcmplt>
 8008d18:	b158      	cbz	r0, 8008d32 <sqrt+0x4a>
 8008d1a:	f7ff ffbb 	bl	8008c94 <__errno>
 8008d1e:	2321      	movs	r3, #33	; 0x21
 8008d20:	6003      	str	r3, [r0, #0]
 8008d22:	2200      	movs	r2, #0
 8008d24:	2300      	movs	r3, #0
 8008d26:	4610      	mov	r0, r2
 8008d28:	4619      	mov	r1, r3
 8008d2a:	f7f7 fd5b 	bl	80007e4 <__aeabi_ddiv>
 8008d2e:	ec41 0b18 	vmov	d8, r0, r1
 8008d32:	eeb0 0a48 	vmov.f32	s0, s16
 8008d36:	eef0 0a68 	vmov.f32	s1, s17
 8008d3a:	ecbd 8b02 	vpop	{d8}
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}

08008d40 <__ieee754_sqrt>:
 8008d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	ec55 4b10 	vmov	r4, r5, d0
 8008d48:	4e67      	ldr	r6, [pc, #412]	; (8008ee8 <__ieee754_sqrt+0x1a8>)
 8008d4a:	43ae      	bics	r6, r5
 8008d4c:	ee10 0a10 	vmov	r0, s0
 8008d50:	ee10 2a10 	vmov	r2, s0
 8008d54:	4629      	mov	r1, r5
 8008d56:	462b      	mov	r3, r5
 8008d58:	d10d      	bne.n	8008d76 <__ieee754_sqrt+0x36>
 8008d5a:	f7f7 fc19 	bl	8000590 <__aeabi_dmul>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4620      	mov	r0, r4
 8008d64:	4629      	mov	r1, r5
 8008d66:	f7f7 fa5d 	bl	8000224 <__adddf3>
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	ec45 4b10 	vmov	d0, r4, r5
 8008d72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d76:	2d00      	cmp	r5, #0
 8008d78:	dc0b      	bgt.n	8008d92 <__ieee754_sqrt+0x52>
 8008d7a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008d7e:	4326      	orrs	r6, r4
 8008d80:	d0f5      	beq.n	8008d6e <__ieee754_sqrt+0x2e>
 8008d82:	b135      	cbz	r5, 8008d92 <__ieee754_sqrt+0x52>
 8008d84:	f7f7 fa4c 	bl	8000220 <__aeabi_dsub>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	f7f7 fd2a 	bl	80007e4 <__aeabi_ddiv>
 8008d90:	e7eb      	b.n	8008d6a <__ieee754_sqrt+0x2a>
 8008d92:	1509      	asrs	r1, r1, #20
 8008d94:	f000 808d 	beq.w	8008eb2 <__ieee754_sqrt+0x172>
 8008d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d9c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008da0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008da4:	07c9      	lsls	r1, r1, #31
 8008da6:	bf5c      	itt	pl
 8008da8:	005b      	lslpl	r3, r3, #1
 8008daa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008dae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008db2:	bf58      	it	pl
 8008db4:	0052      	lslpl	r2, r2, #1
 8008db6:	2500      	movs	r5, #0
 8008db8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008dbc:	1076      	asrs	r6, r6, #1
 8008dbe:	0052      	lsls	r2, r2, #1
 8008dc0:	f04f 0e16 	mov.w	lr, #22
 8008dc4:	46ac      	mov	ip, r5
 8008dc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dca:	eb0c 0001 	add.w	r0, ip, r1
 8008dce:	4298      	cmp	r0, r3
 8008dd0:	bfde      	ittt	le
 8008dd2:	1a1b      	suble	r3, r3, r0
 8008dd4:	eb00 0c01 	addle.w	ip, r0, r1
 8008dd8:	186d      	addle	r5, r5, r1
 8008dda:	005b      	lsls	r3, r3, #1
 8008ddc:	f1be 0e01 	subs.w	lr, lr, #1
 8008de0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008de4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008de8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008dec:	d1ed      	bne.n	8008dca <__ieee754_sqrt+0x8a>
 8008dee:	4674      	mov	r4, lr
 8008df0:	2720      	movs	r7, #32
 8008df2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008df6:	4563      	cmp	r3, ip
 8008df8:	eb01 000e 	add.w	r0, r1, lr
 8008dfc:	dc02      	bgt.n	8008e04 <__ieee754_sqrt+0xc4>
 8008dfe:	d113      	bne.n	8008e28 <__ieee754_sqrt+0xe8>
 8008e00:	4290      	cmp	r0, r2
 8008e02:	d811      	bhi.n	8008e28 <__ieee754_sqrt+0xe8>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	eb00 0e01 	add.w	lr, r0, r1
 8008e0a:	da57      	bge.n	8008ebc <__ieee754_sqrt+0x17c>
 8008e0c:	f1be 0f00 	cmp.w	lr, #0
 8008e10:	db54      	blt.n	8008ebc <__ieee754_sqrt+0x17c>
 8008e12:	f10c 0801 	add.w	r8, ip, #1
 8008e16:	eba3 030c 	sub.w	r3, r3, ip
 8008e1a:	4290      	cmp	r0, r2
 8008e1c:	bf88      	it	hi
 8008e1e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008e22:	1a12      	subs	r2, r2, r0
 8008e24:	440c      	add	r4, r1
 8008e26:	46c4      	mov	ip, r8
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	3f01      	subs	r7, #1
 8008e2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008e30:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008e34:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008e38:	d1dd      	bne.n	8008df6 <__ieee754_sqrt+0xb6>
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	d01b      	beq.n	8008e76 <__ieee754_sqrt+0x136>
 8008e3e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008eec <__ieee754_sqrt+0x1ac>
 8008e42:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008ef0 <__ieee754_sqrt+0x1b0>
 8008e46:	e9da 0100 	ldrd	r0, r1, [sl]
 8008e4a:	e9db 2300 	ldrd	r2, r3, [fp]
 8008e4e:	f7f7 f9e7 	bl	8000220 <__aeabi_dsub>
 8008e52:	e9da 8900 	ldrd	r8, r9, [sl]
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	f7f7 fe13 	bl	8000a88 <__aeabi_dcmple>
 8008e62:	b140      	cbz	r0, 8008e76 <__ieee754_sqrt+0x136>
 8008e64:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008e68:	e9da 0100 	ldrd	r0, r1, [sl]
 8008e6c:	e9db 2300 	ldrd	r2, r3, [fp]
 8008e70:	d126      	bne.n	8008ec0 <__ieee754_sqrt+0x180>
 8008e72:	3501      	adds	r5, #1
 8008e74:	463c      	mov	r4, r7
 8008e76:	106a      	asrs	r2, r5, #1
 8008e78:	0863      	lsrs	r3, r4, #1
 8008e7a:	07e9      	lsls	r1, r5, #31
 8008e7c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008e80:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008e84:	bf48      	it	mi
 8008e86:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008e8a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008e8e:	461c      	mov	r4, r3
 8008e90:	e76d      	b.n	8008d6e <__ieee754_sqrt+0x2e>
 8008e92:	0ad3      	lsrs	r3, r2, #11
 8008e94:	3815      	subs	r0, #21
 8008e96:	0552      	lsls	r2, r2, #21
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0fa      	beq.n	8008e92 <__ieee754_sqrt+0x152>
 8008e9c:	02dc      	lsls	r4, r3, #11
 8008e9e:	d50a      	bpl.n	8008eb6 <__ieee754_sqrt+0x176>
 8008ea0:	f1c1 0420 	rsb	r4, r1, #32
 8008ea4:	fa22 f404 	lsr.w	r4, r2, r4
 8008ea8:	1e4d      	subs	r5, r1, #1
 8008eaa:	408a      	lsls	r2, r1
 8008eac:	4323      	orrs	r3, r4
 8008eae:	1b41      	subs	r1, r0, r5
 8008eb0:	e772      	b.n	8008d98 <__ieee754_sqrt+0x58>
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	e7f0      	b.n	8008e98 <__ieee754_sqrt+0x158>
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	3101      	adds	r1, #1
 8008eba:	e7ef      	b.n	8008e9c <__ieee754_sqrt+0x15c>
 8008ebc:	46e0      	mov	r8, ip
 8008ebe:	e7aa      	b.n	8008e16 <__ieee754_sqrt+0xd6>
 8008ec0:	f7f7 f9b0 	bl	8000224 <__adddf3>
 8008ec4:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4640      	mov	r0, r8
 8008ece:	4649      	mov	r1, r9
 8008ed0:	f7f7 fdd0 	bl	8000a74 <__aeabi_dcmplt>
 8008ed4:	b120      	cbz	r0, 8008ee0 <__ieee754_sqrt+0x1a0>
 8008ed6:	1ca0      	adds	r0, r4, #2
 8008ed8:	bf08      	it	eq
 8008eda:	3501      	addeq	r5, #1
 8008edc:	3402      	adds	r4, #2
 8008ede:	e7ca      	b.n	8008e76 <__ieee754_sqrt+0x136>
 8008ee0:	3401      	adds	r4, #1
 8008ee2:	f024 0401 	bic.w	r4, r4, #1
 8008ee6:	e7c6      	b.n	8008e76 <__ieee754_sqrt+0x136>
 8008ee8:	7ff00000 	.word	0x7ff00000
 8008eec:	20000068 	.word	0x20000068
 8008ef0:	20000070 	.word	0x20000070

08008ef4 <_init>:
 8008ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef6:	bf00      	nop
 8008ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008efa:	bc08      	pop	{r3}
 8008efc:	469e      	mov	lr, r3
 8008efe:	4770      	bx	lr

08008f00 <_fini>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	bf00      	nop
 8008f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f06:	bc08      	pop	{r3}
 8008f08:	469e      	mov	lr, r3
 8008f0a:	4770      	bx	lr
