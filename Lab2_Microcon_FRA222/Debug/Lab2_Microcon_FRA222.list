
Lab2_Microcon_FRA222.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009100  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009318  08009318  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009318  08009318  00019318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009320  08009320  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009324  08009324  00019324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009328  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000078  080093a0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  080093a0  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017cbe  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a57  00000000  00000000  00037da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003a800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001049  00000000  00000000  0003bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b6f  00000000  00000000  0003cd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018008  00000000  00000000  00065888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00113a0c  00000000  00000000  0007d890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e34  00000000  00000000  0019129c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001970d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080092c0 	.word	0x080092c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	080092c0 	.word	0x080092c0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b970 	b.w	8000e88 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9e08      	ldr	r6, [sp, #32]
 8000bc6:	460d      	mov	r5, r1
 8000bc8:	4604      	mov	r4, r0
 8000bca:	460f      	mov	r7, r1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d14a      	bne.n	8000c66 <__udivmoddi4+0xa6>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4694      	mov	ip, r2
 8000bd4:	d965      	bls.n	8000ca2 <__udivmoddi4+0xe2>
 8000bd6:	fab2 f382 	clz	r3, r2
 8000bda:	b143      	cbz	r3, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000be0:	f1c3 0220 	rsb	r2, r3, #32
 8000be4:	409f      	lsls	r7, r3
 8000be6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bea:	4317      	orrs	r7, r2
 8000bec:	409c      	lsls	r4, r3
 8000bee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bf2:	fa1f f58c 	uxth.w	r5, ip
 8000bf6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bfa:	0c22      	lsrs	r2, r4, #16
 8000bfc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c00:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c04:	fb01 f005 	mul.w	r0, r1, r5
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	d90a      	bls.n	8000c22 <__udivmoddi4+0x62>
 8000c0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c10:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c14:	f080 811c 	bcs.w	8000e50 <__udivmoddi4+0x290>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f240 8119 	bls.w	8000e50 <__udivmoddi4+0x290>
 8000c1e:	3902      	subs	r1, #2
 8000c20:	4462      	add	r2, ip
 8000c22:	1a12      	subs	r2, r2, r0
 8000c24:	b2a4      	uxth	r4, r4
 8000c26:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c2a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c32:	fb00 f505 	mul.w	r5, r0, r5
 8000c36:	42a5      	cmp	r5, r4
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x90>
 8000c3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c42:	f080 8107 	bcs.w	8000e54 <__udivmoddi4+0x294>
 8000c46:	42a5      	cmp	r5, r4
 8000c48:	f240 8104 	bls.w	8000e54 <__udivmoddi4+0x294>
 8000c4c:	4464      	add	r4, ip
 8000c4e:	3802      	subs	r0, #2
 8000c50:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c54:	1b64      	subs	r4, r4, r5
 8000c56:	2100      	movs	r1, #0
 8000c58:	b11e      	cbz	r6, 8000c62 <__udivmoddi4+0xa2>
 8000c5a:	40dc      	lsrs	r4, r3
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0xbc>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	f000 80ed 	beq.w	8000e4a <__udivmoddi4+0x28a>
 8000c70:	2100      	movs	r1, #0
 8000c72:	e9c6 0500 	strd	r0, r5, [r6]
 8000c76:	4608      	mov	r0, r1
 8000c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7c:	fab3 f183 	clz	r1, r3
 8000c80:	2900      	cmp	r1, #0
 8000c82:	d149      	bne.n	8000d18 <__udivmoddi4+0x158>
 8000c84:	42ab      	cmp	r3, r5
 8000c86:	d302      	bcc.n	8000c8e <__udivmoddi4+0xce>
 8000c88:	4282      	cmp	r2, r0
 8000c8a:	f200 80f8 	bhi.w	8000e7e <__udivmoddi4+0x2be>
 8000c8e:	1a84      	subs	r4, r0, r2
 8000c90:	eb65 0203 	sbc.w	r2, r5, r3
 8000c94:	2001      	movs	r0, #1
 8000c96:	4617      	mov	r7, r2
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d0e2      	beq.n	8000c62 <__udivmoddi4+0xa2>
 8000c9c:	e9c6 4700 	strd	r4, r7, [r6]
 8000ca0:	e7df      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000ca2:	b902      	cbnz	r2, 8000ca6 <__udivmoddi4+0xe6>
 8000ca4:	deff      	udf	#255	; 0xff
 8000ca6:	fab2 f382 	clz	r3, r2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f040 8090 	bne.w	8000dd0 <__udivmoddi4+0x210>
 8000cb0:	1a8a      	subs	r2, r1, r2
 8000cb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	2101      	movs	r1, #1
 8000cbc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cc0:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc4:	0c22      	lsrs	r2, r4, #16
 8000cc6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cca:	fb0e f005 	mul.w	r0, lr, r5
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x124>
 8000cd2:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x122>
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	f200 80cb 	bhi.w	8000e78 <__udivmoddi4+0x2b8>
 8000ce2:	4645      	mov	r5, r8
 8000ce4:	1a12      	subs	r2, r2, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cec:	fb07 2210 	mls	r2, r7, r0, r2
 8000cf0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x14e>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d04:	d202      	bcs.n	8000d0c <__udivmoddi4+0x14c>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f200 80bb 	bhi.w	8000e82 <__udivmoddi4+0x2c2>
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d16:	e79f      	b.n	8000c58 <__udivmoddi4+0x98>
 8000d18:	f1c1 0720 	rsb	r7, r1, #32
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d26:	fa05 f401 	lsl.w	r4, r5, r1
 8000d2a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2e:	40fd      	lsrs	r5, r7
 8000d30:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d34:	4323      	orrs	r3, r4
 8000d36:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d3a:	fa1f fe8c 	uxth.w	lr, ip
 8000d3e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d42:	0c1c      	lsrs	r4, r3, #16
 8000d44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d48:	fb08 f50e 	mul.w	r5, r8, lr
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d52:	fa00 f001 	lsl.w	r0, r0, r1
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b0>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d60:	f080 8088 	bcs.w	8000e74 <__udivmoddi4+0x2b4>
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	f240 8085 	bls.w	8000e74 <__udivmoddi4+0x2b4>
 8000d6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6e:	4464      	add	r4, ip
 8000d70:	1b64      	subs	r4, r4, r5
 8000d72:	b29d      	uxth	r5, r3
 8000d74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d78:	fb09 4413 	mls	r4, r9, r3, r4
 8000d7c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d80:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d84:	45a6      	cmp	lr, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1da>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d90:	d26c      	bcs.n	8000e6c <__udivmoddi4+0x2ac>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	d96a      	bls.n	8000e6c <__udivmoddi4+0x2ac>
 8000d96:	3b02      	subs	r3, #2
 8000d98:	4464      	add	r4, ip
 8000d9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9e:	fba3 9502 	umull	r9, r5, r3, r2
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	42ac      	cmp	r4, r5
 8000da8:	46c8      	mov	r8, r9
 8000daa:	46ae      	mov	lr, r5
 8000dac:	d356      	bcc.n	8000e5c <__udivmoddi4+0x29c>
 8000dae:	d053      	beq.n	8000e58 <__udivmoddi4+0x298>
 8000db0:	b156      	cbz	r6, 8000dc8 <__udivmoddi4+0x208>
 8000db2:	ebb0 0208 	subs.w	r2, r0, r8
 8000db6:	eb64 040e 	sbc.w	r4, r4, lr
 8000dba:	fa04 f707 	lsl.w	r7, r4, r7
 8000dbe:	40ca      	lsrs	r2, r1
 8000dc0:	40cc      	lsrs	r4, r1
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	2100      	movs	r1, #0
 8000dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd0:	f1c3 0120 	rsb	r1, r3, #32
 8000dd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd8:	fa20 f201 	lsr.w	r2, r0, r1
 8000ddc:	fa25 f101 	lsr.w	r1, r5, r1
 8000de0:	409d      	lsls	r5, r3
 8000de2:	432a      	orrs	r2, r5
 8000de4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de8:	fa1f fe8c 	uxth.w	lr, ip
 8000dec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df0:	fb07 1510 	mls	r5, r7, r0, r1
 8000df4:	0c11      	lsrs	r1, r2, #16
 8000df6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dfa:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfe:	428d      	cmp	r5, r1
 8000e00:	fa04 f403 	lsl.w	r4, r4, r3
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x258>
 8000e06:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0e:	d22f      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e10:	428d      	cmp	r5, r1
 8000e12:	d92d      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e14:	3802      	subs	r0, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	1b49      	subs	r1, r1, r5
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e20:	fb07 1115 	mls	r1, r7, r5, r1
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	fb05 f10e 	mul.w	r1, r5, lr
 8000e2c:	4291      	cmp	r1, r2
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x282>
 8000e30:	eb1c 0202 	adds.w	r2, ip, r2
 8000e34:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e38:	d216      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000e3a:	4291      	cmp	r1, r2
 8000e3c:	d914      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000e3e:	3d02      	subs	r5, #2
 8000e40:	4462      	add	r2, ip
 8000e42:	1a52      	subs	r2, r2, r1
 8000e44:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e48:	e738      	b.n	8000cbc <__udivmoddi4+0xfc>
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000e50:	4639      	mov	r1, r7
 8000e52:	e6e6      	b.n	8000c22 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e6fb      	b.n	8000c50 <__udivmoddi4+0x90>
 8000e58:	4548      	cmp	r0, r9
 8000e5a:	d2a9      	bcs.n	8000db0 <__udivmoddi4+0x1f0>
 8000e5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e64:	3b01      	subs	r3, #1
 8000e66:	e7a3      	b.n	8000db0 <__udivmoddi4+0x1f0>
 8000e68:	4645      	mov	r5, r8
 8000e6a:	e7ea      	b.n	8000e42 <__udivmoddi4+0x282>
 8000e6c:	462b      	mov	r3, r5
 8000e6e:	e794      	b.n	8000d9a <__udivmoddi4+0x1da>
 8000e70:	4640      	mov	r0, r8
 8000e72:	e7d1      	b.n	8000e18 <__udivmoddi4+0x258>
 8000e74:	46d0      	mov	r8, sl
 8000e76:	e77b      	b.n	8000d70 <__udivmoddi4+0x1b0>
 8000e78:	3d02      	subs	r5, #2
 8000e7a:	4462      	add	r2, ip
 8000e7c:	e732      	b.n	8000ce4 <__udivmoddi4+0x124>
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e70a      	b.n	8000c98 <__udivmoddi4+0xd8>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e742      	b.n	8000d0e <__udivmoddi4+0x14e>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e90:	f002 f833 	bl	8002efa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e94:	f000 f86e 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e98:	f000 fb22 	bl	80014e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e9c:	f000 faf6 	bl	800148c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000ea0:	f000 f93c 	bl	800111c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000ea4:	f000 f9de 	bl	8001264 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000ea8:	f000 f8b0 	bl	800100c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000eac:	f000 f980 	bl	80011b0 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000eb0:	f000 fa74 	bl	800139c <MX_TIM5_Init>
  MX_TIM3_Init();
 8000eb4:	f000 fa24 	bl	8001300 <MX_TIM3_Init>

//	kp = 510;
//	ki = 10;
//	kd = 0.01;

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4821      	ldr	r0, [pc, #132]	; (8000f40 <main+0xb4>)
 8000ebc:	f005 feec 	bl	8006c98 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <main+0xb4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start(&htim2);
 8000ec8:	481e      	ldr	r0, [pc, #120]	; (8000f44 <main+0xb8>)
 8000eca:	f005 fd9b 	bl	8006a04 <HAL_TIM_Base_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000ece:	217f      	movs	r1, #127	; 0x7f
 8000ed0:	481d      	ldr	r0, [pc, #116]	; (8000f48 <main+0xbc>)
 8000ed2:	f003 fe3f 	bl	8004b54 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, ADC, 2);
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	491c      	ldr	r1, [pc, #112]	; (8000f4c <main+0xc0>)
 8000eda:	481b      	ldr	r0, [pc, #108]	; (8000f48 <main+0xbc>)
 8000edc:	f002 fcc2 	bl	8003864 <HAL_ADC_Start_DMA>
	reset_pos();
 8000ee0:	f000 fb9a 	bl	8001618 <reset_pos>

	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8000ee4:	213c      	movs	r1, #60	; 0x3c
 8000ee6:	481a      	ldr	r0, [pc, #104]	; (8000f50 <main+0xc4>)
 8000ee8:	f006 f88e 	bl	8007008 <HAL_TIM_Encoder_Start>
	trajec_target = -10;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <main+0xc8>)
 8000eee:	4a1a      	ldr	r2, [pc, #104]	; (8000f58 <main+0xcc>)
 8000ef0:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim3);
 8000ef2:	481a      	ldr	r0, [pc, #104]	; (8000f5c <main+0xd0>)
 8000ef4:	f005 fdf6 	bl	8006ae4 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */
//		if(temp == 10){
//			set_point = 300;
//		}
		QEI_raw = __HAL_TIM_GET_COUNTER(&htim1);
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <main+0xc4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <main+0xd4>)
 8000f00:	6013      	str	r3, [r2, #0]
		changeUnit();
 8000f02:	f000 fc41 	bl	8001788 <changeUnit>
		sensor();
 8000f06:	f000 fb71 	bl	80015ec <sensor>
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
//			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,10000);
//		}

		if(trajec_target >= 0 && trajec_state == 0){
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <main+0xc8>)
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	db07      	blt.n	8000f2a <main+0x9e>
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <main+0xd8>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d103      	bne.n	8000f2a <main+0x9e>
			QEI_start = QEI_mm;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <main+0xdc>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <main+0xe0>)
 8000f28:	6013      	str	r3, [r2, #0]
		}
		Trajectory();
 8000f2a:	f000 fee9 	bl	8001d00 <Trajectory>
		HomemadePID();
 8000f2e:	f000 fc67 	bl	8001800 <HomemadePID>
		speedread();
 8000f32:	f000 fe99 	bl	8001c68 <speedread>
		LastPos = QEI_mm;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <main+0xdc>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <main+0xe4>)
 8000f3c:	6013      	str	r3, [r2, #0]
		QEI_raw = __HAL_TIM_GET_COUNTER(&htim1);
 8000f3e:	e7db      	b.n	8000ef8 <main+0x6c>
 8000f40:	200002d8 	.word	0x200002d8
 8000f44:	20000240 	.word	0x20000240
 8000f48:	20000094 	.word	0x20000094
 8000f4c:	2000033c 	.word	0x2000033c
 8000f50:	200001f4 	.word	0x200001f4
 8000f54:	200003a0 	.word	0x200003a0
 8000f58:	c1200000 	.word	0xc1200000
 8000f5c:	2000028c 	.word	0x2000028c
 8000f60:	20000324 	.word	0x20000324
 8000f64:	200003c0 	.word	0x200003c0
 8000f68:	20000328 	.word	0x20000328
 8000f6c:	200003bc 	.word	0x200003bc
 8000f70:	20000374 	.word	0x20000374

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0318 	add.w	r3, r7, #24
 8000f7e:	2238      	movs	r2, #56	; 0x38
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f008 f864 	bl	8009050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f004 fcac 	bl	80058f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa6:	2340      	movs	r3, #64	; 0x40
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fb6:	2355      	movs	r3, #85	; 0x55
 8000fb8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc6:	f107 0318 	add.w	r3, r7, #24
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 fd46 	bl	8005a5c <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fd6:	f001 fd03 	bl	80029e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f005 f844 	bl	8006080 <HAL_RCC_ClockConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ffe:	f001 fcef 	bl	80029e0 <Error_Handler>
  }
}
 8001002:	bf00      	nop
 8001004:	3750      	adds	r7, #80	; 0x50
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2220      	movs	r2, #32
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f008 f813 	bl	8009050 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800102a:	4b39      	ldr	r3, [pc, #228]	; (8001110 <MX_ADC1_Init+0x104>)
 800102c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001030:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001032:	4b37      	ldr	r3, [pc, #220]	; (8001110 <MX_ADC1_Init+0x104>)
 8001034:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001038:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800103a:	4b35      	ldr	r3, [pc, #212]	; (8001110 <MX_ADC1_Init+0x104>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001040:	4b33      	ldr	r3, [pc, #204]	; (8001110 <MX_ADC1_Init+0x104>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <MX_ADC1_Init+0x104>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800104c:	4b30      	ldr	r3, [pc, #192]	; (8001110 <MX_ADC1_Init+0x104>)
 800104e:	2201      	movs	r2, #1
 8001050:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <MX_ADC1_Init+0x104>)
 8001054:	2204      	movs	r2, #4
 8001056:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001058:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <MX_ADC1_Init+0x104>)
 800105a:	2200      	movs	r2, #0
 800105c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <MX_ADC1_Init+0x104>)
 8001060:	2201      	movs	r2, #1
 8001062:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <MX_ADC1_Init+0x104>)
 8001066:	2202      	movs	r2, #2
 8001068:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <MX_ADC1_Init+0x104>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <MX_ADC1_Init+0x104>)
 8001074:	2200      	movs	r2, #0
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_ADC1_Init+0x104>)
 800107a:	2200      	movs	r2, #0
 800107c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <MX_ADC1_Init+0x104>)
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <MX_ADC1_Init+0x104>)
 8001088:	2200      	movs	r2, #0
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <MX_ADC1_Init+0x104>)
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001094:	481e      	ldr	r0, [pc, #120]	; (8001110 <MX_ADC1_Init+0x104>)
 8001096:	f002 fa29 	bl	80034ec <HAL_ADC_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010a0:	f001 fc9e 	bl	80029e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	4818      	ldr	r0, [pc, #96]	; (8001110 <MX_ADC1_Init+0x104>)
 80010b0:	f003 fde4 	bl	8004c7c <HAL_ADCEx_MultiModeConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ba:	f001 fc91 	bl	80029e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_ADC1_Init+0x108>)
 80010c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c2:	2306      	movs	r3, #6
 80010c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010c6:	2307      	movs	r3, #7
 80010c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ca:	237f      	movs	r3, #127	; 0x7f
 80010cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ce:	2304      	movs	r3, #4
 80010d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <MX_ADC1_Init+0x104>)
 80010dc:	f002 ff1e 	bl	8003f1c <HAL_ADC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80010e6:	f001 fc7b 	bl	80029e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_ADC1_Init+0x10c>)
 80010ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010ee:	230c      	movs	r3, #12
 80010f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	4619      	mov	r1, r3
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <MX_ADC1_Init+0x104>)
 80010f8:	f002 ff10 	bl	8003f1c <HAL_ADC_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001102:	f001 fc6d 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	3730      	adds	r7, #48	; 0x30
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000094 	.word	0x20000094
 8001114:	14f00020 	.word	0x14f00020
 8001118:	32601000 	.word	0x32601000

0800111c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 8001122:	4a22      	ldr	r2, [pc, #136]	; (80011ac <MX_LPUART1_UART_Init+0x90>)
 8001124:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 800115a:	2200      	movs	r2, #0
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 8001160:	f007 f908 	bl	8008374 <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800116a:	f001 fc39 	bl	80029e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 8001172:	f007 fea3 	bl	8008ebc <HAL_UARTEx_SetTxFifoThreshold>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800117c:	f001 fc30 	bl	80029e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	4809      	ldr	r0, [pc, #36]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 8001184:	f007 fed8 	bl	8008f38 <HAL_UARTEx_SetRxFifoThreshold>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800118e:	f001 fc27 	bl	80029e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_LPUART1_UART_Init+0x8c>)
 8001194:	f007 fe59 	bl	8008e4a <HAL_UARTEx_DisableFifoMode>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800119e:	f001 fc1f 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000160 	.word	0x20000160
 80011ac:	40008000 	.word	0x40008000

080011b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	2224      	movs	r2, #36	; 0x24
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f007 ff46 	bl	8009050 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_TIM1_Init+0xac>)
 80011d0:	4a23      	ldr	r2, [pc, #140]	; (8001260 <MX_TIM1_Init+0xb0>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <MX_TIM1_Init+0xac>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_TIM1_Init+0xac>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_TIM1_Init+0xac>)
 80011e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_TIM1_Init+0xac>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_TIM1_Init+0xac>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_TIM1_Init+0xac>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011fa:	2303      	movs	r3, #3
 80011fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001212:	2301      	movs	r3, #1
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4619      	mov	r1, r3
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <MX_TIM1_Init+0xac>)
 8001226:	f005 fe49 	bl	8006ebc <HAL_TIM_Encoder_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001230:	f001 fbd6 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_TIM1_Init+0xac>)
 8001246:	f006 ffb9 	bl	80081bc <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001250:	f001 fbc6 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	3730      	adds	r7, #48	; 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200001f4 	.word	0x200001f4
 8001260:	40012c00 	.word	0x40012c00

08001264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_TIM2_Init+0x98>)
 8001284:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001288:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_TIM2_Init+0x98>)
 800128c:	22a9      	movs	r2, #169	; 0xa9
 800128e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_TIM2_Init+0x98>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_TIM2_Init+0x98>)
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_TIM2_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_TIM2_Init+0x98>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012aa:	4814      	ldr	r0, [pc, #80]	; (80012fc <MX_TIM2_Init+0x98>)
 80012ac:	f005 fb52 	bl	8006954 <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012b6:	f001 fb93 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_TIM2_Init+0x98>)
 80012c8:	f006 f990 	bl	80075ec <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012d2:	f001 fb85 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_TIM2_Init+0x98>)
 80012e4:	f006 ff6a 	bl	80081bc <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012ee:	f001 fb77 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000240 	.word	0x20000240

08001300 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_TIM3_Init+0x94>)
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <MX_TIM3_Init+0x98>)
 8001322:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_TIM3_Init+0x94>)
 8001326:	22a9      	movs	r2, #169	; 0xa9
 8001328:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_TIM3_Init+0x94>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_TIM3_Init+0x94>)
 8001332:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001336:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_TIM3_Init+0x94>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_TIM3_Init+0x94>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001344:	4813      	ldr	r0, [pc, #76]	; (8001394 <MX_TIM3_Init+0x94>)
 8001346:	f005 fb05 	bl	8006954 <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001350:	f001 fb46 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	4619      	mov	r1, r3
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <MX_TIM3_Init+0x94>)
 8001362:	f006 f943 	bl	80075ec <HAL_TIM_ConfigClockSource>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800136c:	f001 fb38 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_TIM3_Init+0x94>)
 800137e:	f006 ff1d 	bl	80081bc <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001388:	f001 fb2a 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000028c 	.word	0x2000028c
 8001398:	40000400 	.word	0x40000400

0800139c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	; 0x38
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <MX_TIM5_Init+0xe8>)
 80013d0:	4a2d      	ldr	r2, [pc, #180]	; (8001488 <MX_TIM5_Init+0xec>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3;
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <MX_TIM5_Init+0xe8>)
 80013d6:	2203      	movs	r2, #3
 80013d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <MX_TIM5_Init+0xe8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 29999;
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <MX_TIM5_Init+0xe8>)
 80013e2:	f247 522f 	movw	r2, #29999	; 0x752f
 80013e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b26      	ldr	r3, [pc, #152]	; (8001484 <MX_TIM5_Init+0xe8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <MX_TIM5_Init+0xe8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013f4:	4823      	ldr	r0, [pc, #140]	; (8001484 <MX_TIM5_Init+0xe8>)
 80013f6:	f005 faad 	bl	8006954 <HAL_TIM_Base_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001400:	f001 faee 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800140a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140e:	4619      	mov	r1, r3
 8001410:	481c      	ldr	r0, [pc, #112]	; (8001484 <MX_TIM5_Init+0xe8>)
 8001412:	f006 f8eb 	bl	80075ec <HAL_TIM_ConfigClockSource>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800141c:	f001 fae0 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001420:	4818      	ldr	r0, [pc, #96]	; (8001484 <MX_TIM5_Init+0xe8>)
 8001422:	f005 fbd7 	bl	8006bd4 <HAL_TIM_PWM_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800142c:	f001 fad8 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	4811      	ldr	r0, [pc, #68]	; (8001484 <MX_TIM5_Init+0xe8>)
 8001440:	f006 febc 	bl	80081bc <HAL_TIMEx_MasterConfigSynchronization>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800144a:	f001 fac9 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144e:	2360      	movs	r3, #96	; 0x60
 8001450:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800145e:	463b      	mov	r3, r7
 8001460:	2204      	movs	r2, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM5_Init+0xe8>)
 8001466:	f005 ffad 	bl	80073c4 <HAL_TIM_PWM_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001470:	f001 fab6 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM5_Init+0xe8>)
 8001476:	f001 fc73 	bl	8002d60 <HAL_TIM_MspPostInit>

}
 800147a:	bf00      	nop
 800147c:	3738      	adds	r7, #56	; 0x38
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200002d8 	.word	0x200002d8
 8001488:	40000c00 	.word	0x40000c00

0800148c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_DMA_Init+0x50>)
 8001494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <MX_DMA_Init+0x50>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6493      	str	r3, [r2, #72]	; 0x48
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_DMA_Init+0x50>)
 80014a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_DMA_Init+0x50>)
 80014ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <MX_DMA_Init+0x50>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6493      	str	r3, [r2, #72]	; 0x48
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_DMA_Init+0x50>)
 80014b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	200b      	movs	r0, #11
 80014c8:	f003 fdbb 	bl	8005042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014cc:	200b      	movs	r0, #11
 80014ce:	f003 fdd2 	bl	8005076 <HAL_NVIC_EnableIRQ>

}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <MX_GPIO_Init+0x100>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a39      	ldr	r2, [pc, #228]	; (80015e0 <MX_GPIO_Init+0x100>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <MX_GPIO_Init+0x100>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150e:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <MX_GPIO_Init+0x100>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a33      	ldr	r2, [pc, #204]	; (80015e0 <MX_GPIO_Init+0x100>)
 8001514:	f043 0320 	orr.w	r3, r3, #32
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <MX_GPIO_Init+0x100>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <MX_GPIO_Init+0x100>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a2d      	ldr	r2, [pc, #180]	; (80015e0 <MX_GPIO_Init+0x100>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <MX_GPIO_Init+0x100>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <MX_GPIO_Init+0x100>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <MX_GPIO_Init+0x100>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <MX_GPIO_Init+0x100>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f248 0120 	movw	r1, #32800	; 0x8020
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f004 f998 	bl	8005894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	481e      	ldr	r0, [pc, #120]	; (80015e4 <MX_GPIO_Init+0x104>)
 800156a:	f004 f993 	bl	8005894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800156e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001574:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4818      	ldr	r0, [pc, #96]	; (80015e8 <MX_GPIO_Init+0x108>)
 8001586:	f004 f803 	bl	8005590 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA15 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_15;
 800158a:	f248 0320 	movw	r3, #32800	; 0x8020
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a6:	f003 fff3 	bl	8005590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <MX_GPIO_Init+0x104>)
 80015c2:	f003 ffe5 	bl	8005590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2028      	movs	r0, #40	; 0x28
 80015cc:	f003 fd39 	bl	8005042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015d0:	2028      	movs	r0, #40	; 0x28
 80015d2:	f003 fd50 	bl	8005076 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	48000400 	.word	0x48000400
 80015e8:	48000800 	.word	0x48000800

080015ec <sensor>:
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, PWMset);
	}
}
*/

void sensor() {
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	sen_top = ADC[0];
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <sensor+0x20>)
 80015f2:	881a      	ldrh	r2, [r3, #0]
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <sensor+0x24>)
 80015f6:	801a      	strh	r2, [r3, #0]
	sen_bot = ADC[1];
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <sensor+0x20>)
 80015fa:	885a      	ldrh	r2, [r3, #2]
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <sensor+0x28>)
 80015fe:	801a      	strh	r2, [r3, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	2000033c 	.word	0x2000033c
 8001610:	20000340 	.word	0x20000340
 8001614:	20000342 	.word	0x20000342

08001618 <reset_pos>:

void reset_pos(){
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	set_point = 0;
 800161c:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <reset_pos+0xf8>)
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
	time = 0;
 8001624:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <reset_pos+0xfc>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
	while(sen_bot < 2048){
 800162a:	e012      	b.n	8001652 <reset_pos+0x3a>
		sensor();
 800162c:	f7ff ffde 	bl	80015ec <sensor>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,1);
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f004 f92b 	bl	8005894 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 800163e:	2200      	movs	r2, #0
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	4835      	ldr	r0, [pc, #212]	; (8001718 <reset_pos+0x100>)
 8001644:	f004 f926 	bl	8005894 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,7000);
 8001648:	4b34      	ldr	r3, [pc, #208]	; (800171c <reset_pos+0x104>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
	while(sen_bot < 2048){
 8001652:	4b33      	ldr	r3, [pc, #204]	; (8001720 <reset_pos+0x108>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800165a:	d3e7      	bcc.n	800162c <reset_pos+0x14>
	}
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,0);
 800165c:	4b2f      	ldr	r3, [pc, #188]	; (800171c <reset_pos+0x104>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2200      	movs	r2, #0
 8001662:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(500);
 8001664:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001668:	f001 fcb8 	bl	8002fdc <HAL_Delay>

	sensor();
 800166c:	f7ff ffbe 	bl	80015ec <sensor>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167a:	f004 f90b 	bl	8005894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,1);
 800167e:	2201      	movs	r2, #1
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	4825      	ldr	r0, [pc, #148]	; (8001718 <reset_pos+0x100>)
 8001684:	f004 f906 	bl	8005894 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,10000);
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <reset_pos+0x104>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001690:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(2500);
 8001692:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001696:	f001 fca1 	bl	8002fdc <HAL_Delay>

	sensor();
 800169a:	f7ff ffa7 	bl	80015ec <sensor>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,1);
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f004 f8f4 	bl	8005894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	4819      	ldr	r0, [pc, #100]	; (8001718 <reset_pos+0x100>)
 80016b2:	f004 f8ef 	bl	8005894 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,7000);
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <reset_pos+0x104>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f641 3258 	movw	r2, #7000	; 0x1b58
 80016be:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(500);
 80016c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016c4:	f001 fc8a 	bl	8002fdc <HAL_Delay>
	while(sen_bot < 2048){
 80016c8:	e006      	b.n	80016d8 <reset_pos+0xc0>
		sensor();
 80016ca:	f7ff ff8f 	bl	80015ec <sensor>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,4300);
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <reset_pos+0x104>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f241 02cc 	movw	r2, #4300	; 0x10cc
 80016d6:	639a      	str	r2, [r3, #56]	; 0x38
	while(sen_bot < 2048){
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <reset_pos+0x108>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016e0:	d3f3      	bcc.n	80016ca <reset_pos+0xb2>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ec:	f004 f8d2 	bl	8005894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	4808      	ldr	r0, [pc, #32]	; (8001718 <reset_pos+0x100>)
 80016f6:	f004 f8cd 	bl	8005894 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,10000);
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <reset_pos+0x104>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8001702:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8001704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001708:	f001 fc68 	bl	8002fdc <HAL_Delay>
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000032c 	.word	0x2000032c
 8001714:	20000344 	.word	0x20000344
 8001718:	48000400 	.word	0x48000400
 800171c:	200002d8 	.word	0x200002d8
 8001720:	20000342 	.word	0x20000342

08001724 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001734:	d11b      	bne.n	800176e <HAL_GPIO_EXTI_Callback+0x4a>
	{
		condi += 1;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_GPIO_EXTI_Callback+0x58>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_GPIO_EXTI_Callback+0x58>)
 8001740:	701a      	strb	r2, [r3, #0]
//		} else if(condi % 6 == 5){
//			trajec_target = 600;
//		} else if(condi % 6 == 0){
//			trajec_target = 0;
//		}
		if(condi % 2 == 1){
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_GPIO_EXTI_Callback+0x58>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_EXTI_Callback+0x34>
			trajec_target = 600;
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001752:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <HAL_GPIO_EXTI_Callback+0x60>)
 8001754:	601a      	str	r2, [r3, #0]
//			set_point = 500;
//		} else if(condi % 4 == 0){
//			set_point = 0;
//		}
	}
}
 8001756:	e00a      	b.n	800176e <HAL_GPIO_EXTI_Callback+0x4a>
		} else if(condi % 2 == 0){
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_GPIO_EXTI_Callback+0x58>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <HAL_GPIO_EXTI_Callback+0x4a>
			trajec_target = 0;
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000338 	.word	0x20000338
 8001780:	200003a0 	.word	0x200003a0
 8001784:	44160000 	.word	0x44160000

08001788 <changeUnit>:

void changeUnit(){
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	af00      	add	r7, sp, #0
	QEI_mm = (QEI_raw/8192.0)*25.326*pi;
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <changeUnit+0x68>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fe83 	bl	800049c <__aeabi_ui2d>
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <changeUnit+0x6c>)
 800179c:	f7ff f822 	bl	80007e4 <__aeabi_ddiv>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	a30f      	add	r3, pc, #60	; (adr r3, 80017e8 <changeUnit+0x60>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe feef 	bl	8000590 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4614      	mov	r4, r2
 80017b8:	461d      	mov	r5, r3
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <changeUnit+0x70>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fe8e 	bl	80004e0 <__aeabi_f2d>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe fee0 	bl	8000590 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f98a 	bl	8000af0 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <changeUnit+0x74>)
 80017e0:	6013      	str	r3, [r2, #0]
}
 80017e2:	bf00      	nop
 80017e4:	bdb0      	pop	{r4, r5, r7, pc}
 80017e6:	bf00      	nop
 80017e8:	bc6a7efa 	.word	0xbc6a7efa
 80017ec:	40395374 	.word	0x40395374
 80017f0:	20000324 	.word	0x20000324
 80017f4:	40c00000 	.word	0x40c00000
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000328 	.word	0x20000328

08001800 <HomemadePID>:

void HomemadePID(){
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	af00      	add	r7, sp, #0
//	Now Lastime error errorsum kp ki kd Iterm dinput Lasterror
	set_point = traj[0];
 8001804:	4bba      	ldr	r3, [pc, #744]	; (8001af0 <HomemadePID+0x2f0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4aba      	ldr	r2, [pc, #744]	; (8001af4 <HomemadePID+0x2f4>)
 800180a:	6013      	str	r3, [r2, #0]
	static uint32_t timestamp = 0;
	if (timestamp < __HAL_TIM_GET_COUNTER(&htim2)) {
 800180c:	4bba      	ldr	r3, [pc, #744]	; (8001af8 <HomemadePID+0x2f8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001812:	4bba      	ldr	r3, [pc, #744]	; (8001afc <HomemadePID+0x2fc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	f240 8205 	bls.w	8001c26 <HomemadePID+0x426>
		timestamp = __HAL_TIM_GET_COUNTER(&htim2) + 1000;
 800181c:	4bb6      	ldr	r3, [pc, #728]	; (8001af8 <HomemadePID+0x2f8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001826:	4ab5      	ldr	r2, [pc, #724]	; (8001afc <HomemadePID+0x2fc>)
 8001828:	6013      	str	r3, [r2, #0]
		Now = __HAL_TIM_GET_COUNTER(&htim2);
 800182a:	4bb3      	ldr	r3, [pc, #716]	; (8001af8 <HomemadePID+0x2f8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	4ab3      	ldr	r2, [pc, #716]	; (8001b00 <HomemadePID+0x300>)
 8001832:	6013      	str	r3, [r2, #0]
		error = set_point - QEI_mm;
 8001834:	4baf      	ldr	r3, [pc, #700]	; (8001af4 <HomemadePID+0x2f4>)
 8001836:	ed93 7a00 	vldr	s14, [r3]
 800183a:	4bb2      	ldr	r3, [pc, #712]	; (8001b04 <HomemadePID+0x304>)
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001844:	4bb0      	ldr	r3, [pc, #704]	; (8001b08 <HomemadePID+0x308>)
 8001846:	edc3 7a00 	vstr	s15, [r3]

		if(error > 32768)
 800184a:	4baf      	ldr	r3, [pc, #700]	; (8001b08 <HomemadePID+0x308>)
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001b0c <HomemadePID+0x30c>
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	dd09      	ble.n	8001872 <HomemadePID+0x72>
			error -= 65536;
 800185e:	4baa      	ldr	r3, [pc, #680]	; (8001b08 <HomemadePID+0x308>)
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001b10 <HomemadePID+0x310>
 8001868:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800186c:	4ba6      	ldr	r3, [pc, #664]	; (8001b08 <HomemadePID+0x308>)
 800186e:	edc3 7a00 	vstr	s15, [r3]
		if(error < -32768)
 8001872:	4ba5      	ldr	r3, [pc, #660]	; (8001b08 <HomemadePID+0x308>)
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001b14 <HomemadePID+0x314>
 800187c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001884:	d509      	bpl.n	800189a <HomemadePID+0x9a>
			error += 65536;
 8001886:	4ba0      	ldr	r3, [pc, #640]	; (8001b08 <HomemadePID+0x308>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001b10 <HomemadePID+0x310>
 8001890:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001894:	4b9c      	ldr	r3, [pc, #624]	; (8001b08 <HomemadePID+0x308>)
 8001896:	edc3 7a00 	vstr	s15, [r3]

		if(error > 0){
 800189a:	4b9b      	ldr	r3, [pc, #620]	; (8001b08 <HomemadePID+0x308>)
 800189c:	edd3 7a00 	vldr	s15, [r3]
 80018a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	f340 80be 	ble.w	8001a28 <HomemadePID+0x228>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b6:	f003 ffed 	bl	8005894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,1);
 80018ba:	2201      	movs	r2, #1
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	4896      	ldr	r0, [pc, #600]	; (8001b18 <HomemadePID+0x318>)
 80018c0:	f003 ffe8 	bl	8005894 <HAL_GPIO_WritePin>
			errorsum = errorsum + (error*(Now-Lastime)/10000);
 80018c4:	4b8e      	ldr	r3, [pc, #568]	; (8001b00 <HomemadePID+0x300>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b94      	ldr	r3, [pc, #592]	; (8001b1c <HomemadePID+0x31c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018d6:	4b8c      	ldr	r3, [pc, #560]	; (8001b08 <HomemadePID+0x308>)
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e0:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8001b20 <HomemadePID+0x320>
 80018e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018e8:	4b8e      	ldr	r3, [pc, #568]	; (8001b24 <HomemadePID+0x324>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f2:	4b8c      	ldr	r3, [pc, #560]	; (8001b24 <HomemadePID+0x324>)
 80018f4:	edc3 7a00 	vstr	s15, [r3]
			Iterm = ki*errorsum;
 80018f8:	4b8b      	ldr	r3, [pc, #556]	; (8001b28 <HomemadePID+0x328>)
 80018fa:	ed93 7a00 	vldr	s14, [r3]
 80018fe:	4b89      	ldr	r3, [pc, #548]	; (8001b24 <HomemadePID+0x324>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001908:	4b88      	ldr	r3, [pc, #544]	; (8001b2c <HomemadePID+0x32c>)
 800190a:	edc3 7a00 	vstr	s15, [r3]
			if(Iterm < -65535 || Iterm > 65535){
 800190e:	4b87      	ldr	r3, [pc, #540]	; (8001b2c <HomemadePID+0x32c>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001b30 <HomemadePID+0x330>
 8001918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001920:	d409      	bmi.n	8001936 <HomemadePID+0x136>
 8001922:	4b82      	ldr	r3, [pc, #520]	; (8001b2c <HomemadePID+0x32c>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001b34 <HomemadePID+0x334>
 800192c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	dd1a      	ble.n	800196c <HomemadePID+0x16c>
				errorsum = (Iterm/ki) - (error*(Now-Lastime));
 8001936:	4b7d      	ldr	r3, [pc, #500]	; (8001b2c <HomemadePID+0x32c>)
 8001938:	edd3 6a00 	vldr	s13, [r3]
 800193c:	4b7a      	ldr	r3, [pc, #488]	; (8001b28 <HomemadePID+0x328>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001946:	4b6e      	ldr	r3, [pc, #440]	; (8001b00 <HomemadePID+0x300>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b74      	ldr	r3, [pc, #464]	; (8001b1c <HomemadePID+0x31c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001958:	4b6b      	ldr	r3, [pc, #428]	; (8001b08 <HomemadePID+0x308>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001966:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <HomemadePID+0x324>)
 8001968:	edc3 7a00 	vstr	s15, [r3]
			}
			dinput = (error-Lasterror)/(Now-Lastime);
 800196c:	4b66      	ldr	r3, [pc, #408]	; (8001b08 <HomemadePID+0x308>)
 800196e:	ed93 7a00 	vldr	s14, [r3]
 8001972:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <HomemadePID+0x338>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ee77 6a67 	vsub.f32	s13, s14, s15
 800197c:	4b60      	ldr	r3, [pc, #384]	; (8001b00 <HomemadePID+0x300>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HomemadePID+0x31c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800198e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001992:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <HomemadePID+0x33c>)
 8001994:	edc3 7a00 	vstr	s15, [r3]
			Vfeedback = (kp*error)+(ki*errorsum)+(kd*dinput);
 8001998:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <HomemadePID+0x340>)
 800199a:	ed93 7a00 	vldr	s14, [r3]
 800199e:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <HomemadePID+0x308>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a8:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <HomemadePID+0x328>)
 80019aa:	edd3 6a00 	vldr	s13, [r3]
 80019ae:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <HomemadePID+0x324>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019bc:	4b61      	ldr	r3, [pc, #388]	; (8001b44 <HomemadePID+0x344>)
 80019be:	edd3 6a00 	vldr	s13, [r3]
 80019c2:	4b5e      	ldr	r3, [pc, #376]	; (8001b3c <HomemadePID+0x33c>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d4:	ee17 2a90 	vmov	r2, s15
 80019d8:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HomemadePID+0x348>)
 80019da:	601a      	str	r2, [r3, #0]
			if(Vfeedback > 65536){
 80019dc:	4b5a      	ldr	r3, [pc, #360]	; (8001b48 <HomemadePID+0x348>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d903      	bls.n	80019ee <HomemadePID+0x1ee>
				Vfeedback = 65536;
 80019e6:	4b58      	ldr	r3, [pc, #352]	; (8001b48 <HomemadePID+0x348>)
 80019e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ec:	601a      	str	r2, [r3, #0]
			}

			PWMset = (Vfeedback/65536.0)*30000;
 80019ee:	4b56      	ldr	r3, [pc, #344]	; (8001b48 <HomemadePID+0x348>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fd52 	bl	800049c <__aeabi_ui2d>
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <HomemadePID+0x34c>)
 80019fe:	f7fe fef1 	bl	80007e4 <__aeabi_ddiv>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	a337      	add	r3, pc, #220	; (adr r3, 8001ae8 <HomemadePID+0x2e8>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fdbe 	bl	8000590 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f868 	bl	8000af0 <__aeabi_d2f>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4a4b      	ldr	r2, [pc, #300]	; (8001b50 <HomemadePID+0x350>)
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e0ec      	b.n	8001c02 <HomemadePID+0x402>
		}
		else if(error < 0){
 8001a28:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <HomemadePID+0x308>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a36:	f140 80d0 	bpl.w	8001bda <HomemadePID+0x3da>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,1);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a44:	f003 ff26 	bl	8005894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	4832      	ldr	r0, [pc, #200]	; (8001b18 <HomemadePID+0x318>)
 8001a4e:	f003 ff21 	bl	8005894 <HAL_GPIO_WritePin>
			error = error*(-1);
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HomemadePID+0x308>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	eef1 7a67 	vneg.f32	s15, s15
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <HomemadePID+0x308>)
 8001a5e:	edc3 7a00 	vstr	s15, [r3]

			if(temp_check == 3){
 8001a62:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <HomemadePID+0x354>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	f040 8084 	bne.w	8001b74 <HomemadePID+0x374>
				if(t < Time_acc){
 8001a6c:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <HomemadePID+0x358>)
 8001a6e:	ed93 7a00 	vldr	s14, [r3]
 8001a72:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <HomemadePID+0x35c>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	d503      	bpl.n	8001a8a <HomemadePID+0x28a>
					PWMset = 6000;
 8001a82:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HomemadePID+0x350>)
 8001a84:	4a36      	ldr	r2, [pc, #216]	; (8001b60 <HomemadePID+0x360>)
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e0bb      	b.n	8001c02 <HomemadePID+0x402>
				}
				else if(t < Time_const+Time_acc){
 8001a8a:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HomemadePID+0x364>)
 8001a8c:	ed93 7a00 	vldr	s14, [r3]
 8001a90:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <HomemadePID+0x35c>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HomemadePID+0x358>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	dd03      	ble.n	8001ab2 <HomemadePID+0x2b2>
					PWMset = 7000;
 8001aaa:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HomemadePID+0x350>)
 8001aac:	4a2e      	ldr	r2, [pc, #184]	; (8001b68 <HomemadePID+0x368>)
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e0a7      	b.n	8001c02 <HomemadePID+0x402>
				}
				else if(t < Time_const+Time_acc+Time_dec){
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <HomemadePID+0x364>)
 8001ab4:	ed93 7a00 	vldr	s14, [r3]
 8001ab8:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <HomemadePID+0x35c>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <HomemadePID+0x36c>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HomemadePID+0x358>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	f340 8092 	ble.w	8001c02 <HomemadePID+0x402>
					PWMset = 4000;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <HomemadePID+0x350>)
 8001ae0:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <HomemadePID+0x370>)
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e08d      	b.n	8001c02 <HomemadePID+0x402>
 8001ae6:	bf00      	nop
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	40dd4c00 	.word	0x40dd4c00
 8001af0:	20000390 	.word	0x20000390
 8001af4:	2000032c 	.word	0x2000032c
 8001af8:	20000240 	.word	0x20000240
 8001afc:	200003c4 	.word	0x200003c4
 8001b00:	20000354 	.word	0x20000354
 8001b04:	20000328 	.word	0x20000328
 8001b08:	2000035c 	.word	0x2000035c
 8001b0c:	47000000 	.word	0x47000000
 8001b10:	47800000 	.word	0x47800000
 8001b14:	c7000000 	.word	0xc7000000
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	20000358 	.word	0x20000358
 8001b20:	461c4000 	.word	0x461c4000
 8001b24:	20000360 	.word	0x20000360
 8001b28:	2000034c 	.word	0x2000034c
 8001b2c:	20000364 	.word	0x20000364
 8001b30:	c77fff00 	.word	0xc77fff00
 8001b34:	477fff00 	.word	0x477fff00
 8001b38:	2000036c 	.word	0x2000036c
 8001b3c:	20000368 	.word	0x20000368
 8001b40:	20000348 	.word	0x20000348
 8001b44:	20000350 	.word	0x20000350
 8001b48:	20000334 	.word	0x20000334
 8001b4c:	40f00000 	.word	0x40f00000
 8001b50:	20000330 	.word	0x20000330
 8001b54:	200003c1 	.word	0x200003c1
 8001b58:	2000037c 	.word	0x2000037c
 8001b5c:	200003a4 	.word	0x200003a4
 8001b60:	45bb8000 	.word	0x45bb8000
 8001b64:	200003b0 	.word	0x200003b0
 8001b68:	45dac000 	.word	0x45dac000
 8001b6c:	200003ac 	.word	0x200003ac
 8001b70:	457a0000 	.word	0x457a0000
				}
			}
			else if(temp_check == 4){
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HomemadePID+0x438>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d142      	bne.n	8001c02 <HomemadePID+0x402>
				if(t < Time_acc_tri*1.4){
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HomemadePID+0x43c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fcad 	bl	80004e0 <__aeabi_f2d>
 8001b86:	4604      	mov	r4, r0
 8001b88:	460d      	mov	r5, r1
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HomemadePID+0x440>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fca6 	bl	80004e0 <__aeabi_f2d>
 8001b94:	a326      	add	r3, pc, #152	; (adr r3, 8001c30 <HomemadePID+0x430>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fcf9 	bl	8000590 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	f7fe ff65 	bl	8000a74 <__aeabi_dcmplt>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HomemadePID+0x3b8>
					PWMset = 7000;
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <HomemadePID+0x444>)
 8001bb2:	4a25      	ldr	r2, [pc, #148]	; (8001c48 <HomemadePID+0x448>)
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	e024      	b.n	8001c02 <HomemadePID+0x402>
				}
				else if(t < Time_acc_tri*2){
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HomemadePID+0x440>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HomemadePID+0x43c>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd0:	dd17      	ble.n	8001c02 <HomemadePID+0x402>
					PWMset = 3700;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HomemadePID+0x444>)
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HomemadePID+0x44c>)
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e013      	b.n	8001c02 <HomemadePID+0x402>
				}
			}
		}
		else if(error == 0){
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HomemadePID+0x450>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be8:	d10b      	bne.n	8001c02 <HomemadePID+0x402>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf4:	f003 fe4e 	bl	8005894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	4815      	ldr	r0, [pc, #84]	; (8001c54 <HomemadePID+0x454>)
 8001bfe:	f003 fe49 	bl	8005894 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, PWMset);
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <HomemadePID+0x444>)
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HomemadePID+0x458>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c10:	ee17 2a90 	vmov	r2, s15
 8001c14:	639a      	str	r2, [r3, #56]	; 0x38

		Lastime = Now;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HomemadePID+0x45c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HomemadePID+0x460>)
 8001c1c:	6013      	str	r3, [r2, #0]
		Lasterror = error;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HomemadePID+0x450>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HomemadePID+0x464>)
 8001c24:	6013      	str	r3, [r2, #0]
	}
}
 8001c26:	bf00      	nop
 8001c28:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	f3af 8000 	nop.w
 8001c30:	66666666 	.word	0x66666666
 8001c34:	3ff66666 	.word	0x3ff66666
 8001c38:	200003c1 	.word	0x200003c1
 8001c3c:	2000037c 	.word	0x2000037c
 8001c40:	200003a8 	.word	0x200003a8
 8001c44:	20000330 	.word	0x20000330
 8001c48:	45dac000 	.word	0x45dac000
 8001c4c:	45674000 	.word	0x45674000
 8001c50:	2000035c 	.word	0x2000035c
 8001c54:	48000400 	.word	0x48000400
 8001c58:	200002d8 	.word	0x200002d8
 8001c5c:	20000354 	.word	0x20000354
 8001c60:	20000358 	.word	0x20000358
 8001c64:	2000036c 	.word	0x2000036c

08001c68 <speedread>:


void speedread(){
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	Now = __HAL_TIM_GET_COUNTER(&htim2);
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <speedread+0x80>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <speedread+0x84>)
 8001c74:	6013      	str	r3, [r2, #0]
	speed = ((QEI_mm - LastPos)*1000000.0)/(Now - Lastime);
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <speedread+0x88>)
 8001c78:	ed93 7a00 	vldr	s14, [r3]
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <speedread+0x8c>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c86:	ee17 0a90 	vmov	r0, s15
 8001c8a:	f7fe fc29 	bl	80004e0 <__aeabi_f2d>
 8001c8e:	a314      	add	r3, pc, #80	; (adr r3, 8001ce0 <speedread+0x78>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fc7c 	bl	8000590 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4614      	mov	r4, r2
 8001c9e:	461d      	mov	r5, r3
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <speedread+0x84>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <speedread+0x90>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fbf6 	bl	800049c <__aeabi_ui2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fd94 	bl	80007e4 <__aeabi_ddiv>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe ff14 	bl	8000af0 <__aeabi_d2f>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a0c      	ldr	r2, [pc, #48]	; (8001cfc <speedread+0x94>)
 8001ccc:	6013      	str	r3, [r2, #0]
	Lastime = Now;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <speedread+0x84>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <speedread+0x90>)
 8001cd4:	6013      	str	r3, [r2, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	00000000 	.word	0x00000000
 8001ce4:	412e8480 	.word	0x412e8480
 8001ce8:	20000240 	.word	0x20000240
 8001cec:	20000354 	.word	0x20000354
 8001cf0:	20000328 	.word	0x20000328
 8001cf4:	20000374 	.word	0x20000374
 8001cf8:	20000358 	.word	0x20000358
 8001cfc:	20000370 	.word	0x20000370

08001d00 <Trajectory>:

void Trajectory(){
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	Distance = trajec_target - QEI_start;
 8001d04:	4b91      	ldr	r3, [pc, #580]	; (8001f4c <Trajectory+0x24c>)
 8001d06:	ed93 7a00 	vldr	s14, [r3]
 8001d0a:	4b91      	ldr	r3, [pc, #580]	; (8001f50 <Trajectory+0x250>)
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d14:	4b8f      	ldr	r3, [pc, #572]	; (8001f54 <Trajectory+0x254>)
 8001d16:	edc3 7a00 	vstr	s15, [r3]
	Time_acc = Vmax / Amax;
 8001d1a:	4b8f      	ldr	r3, [pc, #572]	; (8001f58 <Trajectory+0x258>)
 8001d1c:	edd3 6a00 	vldr	s13, [r3]
 8001d20:	4b8e      	ldr	r3, [pc, #568]	; (8001f5c <Trajectory+0x25c>)
 8001d22:	ed93 7a00 	vldr	s14, [r3]
 8001d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d2a:	4b8d      	ldr	r3, [pc, #564]	; (8001f60 <Trajectory+0x260>)
 8001d2c:	edc3 7a00 	vstr	s15, [r3]
	Time_dec = Time_acc;
 8001d30:	4b8b      	ldr	r3, [pc, #556]	; (8001f60 <Trajectory+0x260>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a8b      	ldr	r2, [pc, #556]	; (8001f64 <Trajectory+0x264>)
 8001d36:	6013      	str	r3, [r2, #0]


	time_now = __HAL_TIM_GET_COUNTER(&htim2);
 8001d38:	4b8b      	ldr	r3, [pc, #556]	; (8001f68 <Trajectory+0x268>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d46:	4b89      	ldr	r3, [pc, #548]	; (8001f6c <Trajectory+0x26c>)
 8001d48:	edc3 7a00 	vstr	s15, [r3]

	if(trajec_target >= 0 && trajec_state == 0){
 8001d4c:	4b7f      	ldr	r3, [pc, #508]	; (8001f4c <Trajectory+0x24c>)
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5a:	db14      	blt.n	8001d86 <Trajectory+0x86>
 8001d5c:	4b84      	ldr	r3, [pc, #528]	; (8001f70 <Trajectory+0x270>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d110      	bne.n	8001d86 <Trajectory+0x86>
		trajec_state = 1;
 8001d64:	4b82      	ldr	r3, [pc, #520]	; (8001f70 <Trajectory+0x270>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
		Timestamp = time_now;
 8001d6a:	4b80      	ldr	r3, [pc, #512]	; (8001f6c <Trajectory+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a81      	ldr	r2, [pc, #516]	; (8001f74 <Trajectory+0x274>)
 8001d70:	6013      	str	r3, [r2, #0]
		QEI_start = QEI_mm;
 8001d72:	4b81      	ldr	r3, [pc, #516]	; (8001f78 <Trajectory+0x278>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a76      	ldr	r2, [pc, #472]	; (8001f50 <Trajectory+0x250>)
 8001d78:	6013      	str	r3, [r2, #0]
		pos = QEI_start;
 8001d7a:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <Trajectory+0x250>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a7f      	ldr	r2, [pc, #508]	; (8001f7c <Trajectory+0x27c>)
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	f000 be19 	b.w	80029b8 <Trajectory+0xcb8>
	}
	else if(Distance > 0 && trajec_state == 1){	//Run Up
 8001d86:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <Trajectory+0x254>)
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d94:	f340 82f9 	ble.w	800238a <Trajectory+0x68a>
 8001d98:	4b75      	ldr	r3, [pc, #468]	; (8001f70 <Trajectory+0x270>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	f040 82f4 	bne.w	800238a <Trajectory+0x68a>
		kp = 520;
 8001da2:	4b77      	ldr	r3, [pc, #476]	; (8001f80 <Trajectory+0x280>)
 8001da4:	4a77      	ldr	r2, [pc, #476]	; (8001f84 <Trajectory+0x284>)
 8001da6:	601a      	str	r2, [r3, #0]
		ki = 10;
 8001da8:	4b77      	ldr	r3, [pc, #476]	; (8001f88 <Trajectory+0x288>)
 8001daa:	4a78      	ldr	r2, [pc, #480]	; (8001f8c <Trajectory+0x28c>)
 8001dac:	601a      	str	r2, [r3, #0]
		kd = 1;
 8001dae:	4b78      	ldr	r3, [pc, #480]	; (8001f90 <Trajectory+0x290>)
 8001db0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001db4:	601a      	str	r2, [r3, #0]
		Distance_Velo_Max = -(Vmax*Time_acc) + Distance ;
 8001db6:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <Trajectory+0x254>)
 8001db8:	ed93 7a00 	vldr	s14, [r3]
 8001dbc:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <Trajectory+0x258>)
 8001dbe:	edd3 6a00 	vldr	s13, [r3]
 8001dc2:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <Trajectory+0x260>)
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd0:	4b70      	ldr	r3, [pc, #448]	; (8001f94 <Trajectory+0x294>)
 8001dd2:	edc3 7a00 	vstr	s15, [r3]
		t = (time_now - Timestamp)/1000000.0;  //s
 8001dd6:	4b65      	ldr	r3, [pc, #404]	; (8001f6c <Trajectory+0x26c>)
 8001dd8:	ed93 7a00 	vldr	s14, [r3]
 8001ddc:	4b65      	ldr	r3, [pc, #404]	; (8001f74 <Trajectory+0x274>)
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001de6:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001f98 <Trajectory+0x298>
 8001dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dee:	4b6b      	ldr	r3, [pc, #428]	; (8001f9c <Trajectory+0x29c>)
 8001df0:	edc3 7a00 	vstr	s15, [r3]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8001df4:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <Trajectory+0x294>)
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	f340 8165 	ble.w	80020d0 <Trajectory+0x3d0>
			temp_check = 1;
 8001e06:	4b66      	ldr	r3, [pc, #408]	; (8001fa0 <Trajectory+0x2a0>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
			Time_const = Distance_Velo_Max/Vmax;
 8001e0c:	4b61      	ldr	r3, [pc, #388]	; (8001f94 <Trajectory+0x294>)
 8001e0e:	edd3 6a00 	vldr	s13, [r3]
 8001e12:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <Trajectory+0x258>)
 8001e14:	ed93 7a00 	vldr	s14, [r3]
 8001e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e1c:	4b61      	ldr	r3, [pc, #388]	; (8001fa4 <Trajectory+0x2a4>)
 8001e1e:	edc3 7a00 	vstr	s15, [r3]
			if(t < Time_acc){
 8001e22:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <Trajectory+0x29c>)
 8001e24:	ed93 7a00 	vldr	s14, [r3]
 8001e28:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <Trajectory+0x260>)
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e36:	d555      	bpl.n	8001ee4 <Trajectory+0x1e4>
				traj[2] = Amax;
 8001e38:	4b48      	ldr	r3, [pc, #288]	; (8001f5c <Trajectory+0x25c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a5a      	ldr	r2, [pc, #360]	; (8001fa8 <Trajectory+0x2a8>)
 8001e3e:	6093      	str	r3, [r2, #8]
				traj[1] = Amax*t;
 8001e40:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <Trajectory+0x25c>)
 8001e42:	ed93 7a00 	vldr	s14, [r3]
 8001e46:	4b55      	ldr	r3, [pc, #340]	; (8001f9c <Trajectory+0x29c>)
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	4b55      	ldr	r3, [pc, #340]	; (8001fa8 <Trajectory+0x2a8>)
 8001e52:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (Amax/2.0)*t*t + pos;
 8001e56:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <Trajectory+0x25c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb40 	bl	80004e0 <__aeabi_f2d>
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e68:	f7fe fcbc 	bl	80007e4 <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4614      	mov	r4, r2
 8001e72:	461d      	mov	r5, r3
 8001e74:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <Trajectory+0x29c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb31 	bl	80004e0 <__aeabi_f2d>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4620      	mov	r0, r4
 8001e84:	4629      	mov	r1, r5
 8001e86:	f7fe fb83 	bl	8000590 <__aeabi_dmul>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4614      	mov	r4, r2
 8001e90:	461d      	mov	r5, r3
 8001e92:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <Trajectory+0x29c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb22 	bl	80004e0 <__aeabi_f2d>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	f7fe fb74 	bl	8000590 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4614      	mov	r4, r2
 8001eae:	461d      	mov	r5, r3
 8001eb0:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <Trajectory+0x27c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fb13 	bl	80004e0 <__aeabi_f2d>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	f7fe f9af 	bl	8000224 <__adddf3>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7fe fe0f 	bl	8000af0 <__aeabi_d2f>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a34      	ldr	r2, [pc, #208]	; (8001fa8 <Trajectory+0x2a8>)
 8001ed6:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 8001ed8:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <Trajectory+0x2a8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a33      	ldr	r2, [pc, #204]	; (8001fac <Trajectory+0x2ac>)
 8001ede:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8001ee0:	f000 bd6a 	b.w	80029b8 <Trajectory+0xcb8>
			}
			else if(t < Time_const+Time_acc){
 8001ee4:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <Trajectory+0x2a4>)
 8001ee6:	ed93 7a00 	vldr	s14, [r3]
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <Trajectory+0x260>)
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ef4:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <Trajectory+0x29c>)
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f02:	dd57      	ble.n	8001fb4 <Trajectory+0x2b4>
				traj[2] = 0;
 8001f04:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <Trajectory+0x2a8>)
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
				traj[1] = Vmax;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <Trajectory+0x258>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <Trajectory+0x2a8>)
 8001f12:	6053      	str	r3, [r2, #4]
				traj[0] = (Vmax*(t-Time_acc)) + temp_pos_acc;
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <Trajectory+0x29c>)
 8001f16:	ed93 7a00 	vldr	s14, [r3]
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <Trajectory+0x260>)
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <Trajectory+0x258>)
 8001f26:	edd3 7a00 	vldr	s15, [r3]
 8001f2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <Trajectory+0x2ac>)
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <Trajectory+0x2a8>)
 8001f3a:	edc3 7a00 	vstr	s15, [r3]
				temp_pos_const = traj[0];
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <Trajectory+0x2a8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <Trajectory+0x2b0>)
 8001f44:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8001f46:	f000 bd37 	b.w	80029b8 <Trajectory+0xcb8>
 8001f4a:	bf00      	nop
 8001f4c:	200003a0 	.word	0x200003a0
 8001f50:	200003bc 	.word	0x200003bc
 8001f54:	20000378 	.word	0x20000378
 8001f58:	20000004 	.word	0x20000004
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	200003a4 	.word	0x200003a4
 8001f64:	200003ac 	.word	0x200003ac
 8001f68:	20000240 	.word	0x20000240
 8001f6c:	200003b4 	.word	0x200003b4
 8001f70:	200003c0 	.word	0x200003c0
 8001f74:	200003b8 	.word	0x200003b8
 8001f78:	20000328 	.word	0x20000328
 8001f7c:	2000039c 	.word	0x2000039c
 8001f80:	20000348 	.word	0x20000348
 8001f84:	44020000 	.word	0x44020000
 8001f88:	2000034c 	.word	0x2000034c
 8001f8c:	41200000 	.word	0x41200000
 8001f90:	20000350 	.word	0x20000350
 8001f94:	2000038c 	.word	0x2000038c
 8001f98:	49742400 	.word	0x49742400
 8001f9c:	2000037c 	.word	0x2000037c
 8001fa0:	200003c1 	.word	0x200003c1
 8001fa4:	200003b0 	.word	0x200003b0
 8001fa8:	20000390 	.word	0x20000390
 8001fac:	20000380 	.word	0x20000380
 8001fb0:	20000384 	.word	0x20000384
			}
			else if(t < Time_const+Time_acc+Time_dec){
 8001fb4:	4b8c      	ldr	r3, [pc, #560]	; (80021e8 <Trajectory+0x4e8>)
 8001fb6:	ed93 7a00 	vldr	s14, [r3]
 8001fba:	4b8c      	ldr	r3, [pc, #560]	; (80021ec <Trajectory+0x4ec>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fc4:	4b8a      	ldr	r3, [pc, #552]	; (80021f0 <Trajectory+0x4f0>)
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fce:	4b89      	ldr	r3, [pc, #548]	; (80021f4 <Trajectory+0x4f4>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fdc:	dd64      	ble.n	80020a8 <Trajectory+0x3a8>
				traj[2] = -Amax;
 8001fde:	4b86      	ldr	r3, [pc, #536]	; (80021f8 <Trajectory+0x4f8>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	eef1 7a67 	vneg.f32	s15, s15
 8001fe8:	4b84      	ldr	r3, [pc, #528]	; (80021fc <Trajectory+0x4fc>)
 8001fea:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = (traj[2]*(t-Time_const-Time_acc)) + Vmax;
 8001fee:	4b83      	ldr	r3, [pc, #524]	; (80021fc <Trajectory+0x4fc>)
 8001ff0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ff4:	4b7f      	ldr	r3, [pc, #508]	; (80021f4 <Trajectory+0x4f4>)
 8001ff6:	edd3 6a00 	vldr	s13, [r3]
 8001ffa:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <Trajectory+0x4e8>)
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002004:	4b79      	ldr	r3, [pc, #484]	; (80021ec <Trajectory+0x4ec>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800200e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002012:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <Trajectory+0x500>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201c:	4b77      	ldr	r3, [pc, #476]	; (80021fc <Trajectory+0x4fc>)
 800201e:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((Amax/2)*(t-Time_const-Time_acc)*(t-Time_const-Time_acc))+(traj[1]*(t-Time_const-Time_acc))+temp_pos_const;
 8002022:	4b75      	ldr	r3, [pc, #468]	; (80021f8 <Trajectory+0x4f8>)
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800202c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002030:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <Trajectory+0x4f4>)
 8002032:	edd3 6a00 	vldr	s13, [r3]
 8002036:	4b6c      	ldr	r3, [pc, #432]	; (80021e8 <Trajectory+0x4e8>)
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002040:	4b6a      	ldr	r3, [pc, #424]	; (80021ec <Trajectory+0x4ec>)
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800204a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800204e:	4b69      	ldr	r3, [pc, #420]	; (80021f4 <Trajectory+0x4f4>)
 8002050:	edd3 6a00 	vldr	s13, [r3]
 8002054:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <Trajectory+0x4e8>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800205e:	4b63      	ldr	r3, [pc, #396]	; (80021ec <Trajectory+0x4ec>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800206c:	4b63      	ldr	r3, [pc, #396]	; (80021fc <Trajectory+0x4fc>)
 800206e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002072:	4b60      	ldr	r3, [pc, #384]	; (80021f4 <Trajectory+0x4f4>)
 8002074:	ed93 6a00 	vldr	s12, [r3]
 8002078:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <Trajectory+0x4e8>)
 800207a:	edd3 7a00 	vldr	s15, [r3]
 800207e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002082:	4b5a      	ldr	r3, [pc, #360]	; (80021ec <Trajectory+0x4ec>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	ee76 7a67 	vsub.f32	s15, s12, s15
 800208c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002090:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002094:	4b5b      	ldr	r3, [pc, #364]	; (8002204 <Trajectory+0x504>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209e:	4b57      	ldr	r3, [pc, #348]	; (80021fc <Trajectory+0x4fc>)
 80020a0:	edc3 7a00 	vstr	s15, [r3]
		if(Distance_Velo_Max > 0){						//Trapezoi
 80020a4:	f000 bc88 	b.w	80029b8 <Trajectory+0xcb8>
			}
			else{
				trajec_state = 0;
 80020a8:	4b57      	ldr	r3, [pc, #348]	; (8002208 <Trajectory+0x508>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 80020ae:	4b57      	ldr	r3, [pc, #348]	; (800220c <Trajectory+0x50c>)
 80020b0:	4a57      	ldr	r2, [pc, #348]	; (8002210 <Trajectory+0x510>)
 80020b2:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 80020b4:	4b51      	ldr	r3, [pc, #324]	; (80021fc <Trajectory+0x4fc>)
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
				temp_pos_acc = 0;
 80020bc:	4b55      	ldr	r3, [pc, #340]	; (8002214 <Trajectory+0x514>)
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
				temp_pos_const = 0;
 80020c4:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <Trajectory+0x504>)
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 80020cc:	f000 bc74 	b.w	80029b8 <Trajectory+0xcb8>
			}
		}
		else if(Distance_Velo_Max <= 0){				//Triangle
 80020d0:	4b51      	ldr	r3, [pc, #324]	; (8002218 <Trajectory+0x518>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020de:	d901      	bls.n	80020e4 <Trajectory+0x3e4>
		if(Distance_Velo_Max > 0){						//Trapezoi
 80020e0:	f000 bc6a 	b.w	80029b8 <Trajectory+0xcb8>
			temp_check = 2;
 80020e4:	4b4d      	ldr	r3, [pc, #308]	; (800221c <Trajectory+0x51c>)
 80020e6:	2202      	movs	r2, #2
 80020e8:	701a      	strb	r2, [r3, #0]
			Time_acc_tri = sqrt(Distance/Amax);
 80020ea:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <Trajectory+0x520>)
 80020ec:	ed93 7a00 	vldr	s14, [r3]
 80020f0:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <Trajectory+0x4f8>)
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020fa:	ee16 0a90 	vmov	r0, s13
 80020fe:	f7fe f9ef 	bl	80004e0 <__aeabi_f2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	ec43 2b10 	vmov	d0, r2, r3
 800210a:	f006 ffd3 	bl	80090b4 <sqrt>
 800210e:	ec53 2b10 	vmov	r2, r3, d0
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f7fe fceb 	bl	8000af0 <__aeabi_d2f>
 800211a:	4603      	mov	r3, r0
 800211c:	4a41      	ldr	r2, [pc, #260]	; (8002224 <Trajectory+0x524>)
 800211e:	6013      	str	r3, [r2, #0]
			if(t < Time_acc_tri){
 8002120:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <Trajectory+0x4f4>)
 8002122:	ed93 7a00 	vldr	s14, [r3]
 8002126:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <Trajectory+0x524>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	d57c      	bpl.n	8002230 <Trajectory+0x530>
				traj[2] = Amax;
 8002136:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <Trajectory+0x4f8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a30      	ldr	r2, [pc, #192]	; (80021fc <Trajectory+0x4fc>)
 800213c:	6093      	str	r3, [r2, #8]
				traj[1] = Amax*t;
 800213e:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <Trajectory+0x4f8>)
 8002140:	ed93 7a00 	vldr	s14, [r3]
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <Trajectory+0x4f4>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <Trajectory+0x4fc>)
 8002150:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (Amax/2.0)*t*t + pos;
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <Trajectory+0x4f8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f9c1 	bl	80004e0 <__aeabi_f2d>
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002166:	f7fe fb3d 	bl	80007e4 <__aeabi_ddiv>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4614      	mov	r4, r2
 8002170:	461d      	mov	r5, r3
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <Trajectory+0x4f4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9b2 	bl	80004e0 <__aeabi_f2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4620      	mov	r0, r4
 8002182:	4629      	mov	r1, r5
 8002184:	f7fe fa04 	bl	8000590 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4614      	mov	r4, r2
 800218e:	461d      	mov	r5, r3
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <Trajectory+0x4f4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f9a3 	bl	80004e0 <__aeabi_f2d>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4620      	mov	r0, r4
 80021a0:	4629      	mov	r1, r5
 80021a2:	f7fe f9f5 	bl	8000590 <__aeabi_dmul>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4614      	mov	r4, r2
 80021ac:	461d      	mov	r5, r3
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <Trajectory+0x528>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f994 	bl	80004e0 <__aeabi_f2d>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4620      	mov	r0, r4
 80021be:	4629      	mov	r1, r5
 80021c0:	f7fe f830 	bl	8000224 <__adddf3>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	f7fe fc90 	bl	8000af0 <__aeabi_d2f>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <Trajectory+0x4fc>)
 80021d4:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <Trajectory+0x4fc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <Trajectory+0x514>)
 80021dc:	6013      	str	r3, [r2, #0]
				temp_v_acc = traj[1];
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <Trajectory+0x4fc>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <Trajectory+0x52c>)
 80021e4:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 80021e6:	e3e7      	b.n	80029b8 <Trajectory+0xcb8>
 80021e8:	200003b0 	.word	0x200003b0
 80021ec:	200003a4 	.word	0x200003a4
 80021f0:	200003ac 	.word	0x200003ac
 80021f4:	2000037c 	.word	0x2000037c
 80021f8:	20000008 	.word	0x20000008
 80021fc:	20000390 	.word	0x20000390
 8002200:	20000004 	.word	0x20000004
 8002204:	20000384 	.word	0x20000384
 8002208:	200003c0 	.word	0x200003c0
 800220c:	200003a0 	.word	0x200003a0
 8002210:	c1200000 	.word	0xc1200000
 8002214:	20000380 	.word	0x20000380
 8002218:	2000038c 	.word	0x2000038c
 800221c:	200003c1 	.word	0x200003c1
 8002220:	20000378 	.word	0x20000378
 8002224:	200003a8 	.word	0x200003a8
 8002228:	2000039c 	.word	0x2000039c
 800222c:	20000388 	.word	0x20000388
			}
			else if(t < Time_acc_tri*2){
 8002230:	4bb3      	ldr	r3, [pc, #716]	; (8002500 <Trajectory+0x800>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800223a:	4bb2      	ldr	r3, [pc, #712]	; (8002504 <Trajectory+0x804>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002248:	f340 8088 	ble.w	800235c <Trajectory+0x65c>
				traj[2] = -Amax;
 800224c:	4bae      	ldr	r3, [pc, #696]	; (8002508 <Trajectory+0x808>)
 800224e:	edd3 7a00 	vldr	s15, [r3]
 8002252:	eef1 7a67 	vneg.f32	s15, s15
 8002256:	4bad      	ldr	r3, [pc, #692]	; (800250c <Trajectory+0x80c>)
 8002258:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = temp_v_acc - (Amax*(t-Time_acc_tri));
 800225c:	4bac      	ldr	r3, [pc, #688]	; (8002510 <Trajectory+0x810>)
 800225e:	ed93 7a00 	vldr	s14, [r3]
 8002262:	4ba8      	ldr	r3, [pc, #672]	; (8002504 <Trajectory+0x804>)
 8002264:	edd3 6a00 	vldr	s13, [r3]
 8002268:	4ba5      	ldr	r3, [pc, #660]	; (8002500 <Trajectory+0x800>)
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002272:	4ba5      	ldr	r3, [pc, #660]	; (8002508 <Trajectory+0x808>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002280:	4ba2      	ldr	r3, [pc, #648]	; (800250c <Trajectory+0x80c>)
 8002282:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((Amax/2.0)*(t-Time_acc_tri)*(t-Time_acc_tri))+(traj[1]*(t-Time_acc_tri))+temp_pos_acc;
 8002286:	4ba0      	ldr	r3, [pc, #640]	; (8002508 <Trajectory+0x808>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f928 	bl	80004e0 <__aeabi_f2d>
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002298:	f7fe faa4 	bl	80007e4 <__aeabi_ddiv>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4614      	mov	r4, r2
 80022a2:	461d      	mov	r5, r3
 80022a4:	4b97      	ldr	r3, [pc, #604]	; (8002504 <Trajectory+0x804>)
 80022a6:	ed93 7a00 	vldr	s14, [r3]
 80022aa:	4b95      	ldr	r3, [pc, #596]	; (8002500 <Trajectory+0x800>)
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b4:	ee17 0a90 	vmov	r0, s15
 80022b8:	f7fe f912 	bl	80004e0 <__aeabi_f2d>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4620      	mov	r0, r4
 80022c2:	4629      	mov	r1, r5
 80022c4:	f7fe f964 	bl	8000590 <__aeabi_dmul>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4614      	mov	r4, r2
 80022ce:	461d      	mov	r5, r3
 80022d0:	4b8c      	ldr	r3, [pc, #560]	; (8002504 <Trajectory+0x804>)
 80022d2:	ed93 7a00 	vldr	s14, [r3]
 80022d6:	4b8a      	ldr	r3, [pc, #552]	; (8002500 <Trajectory+0x800>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e0:	ee17 0a90 	vmov	r0, s15
 80022e4:	f7fe f8fc 	bl	80004e0 <__aeabi_f2d>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4620      	mov	r0, r4
 80022ee:	4629      	mov	r1, r5
 80022f0:	f7fe f94e 	bl	8000590 <__aeabi_dmul>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4614      	mov	r4, r2
 80022fa:	461d      	mov	r5, r3
 80022fc:	4b83      	ldr	r3, [pc, #524]	; (800250c <Trajectory+0x80c>)
 80022fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8002302:	4b80      	ldr	r3, [pc, #512]	; (8002504 <Trajectory+0x804>)
 8002304:	edd3 6a00 	vldr	s13, [r3]
 8002308:	4b7d      	ldr	r3, [pc, #500]	; (8002500 <Trajectory+0x800>)
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002316:	ee17 0a90 	vmov	r0, s15
 800231a:	f7fe f8e1 	bl	80004e0 <__aeabi_f2d>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4620      	mov	r0, r4
 8002324:	4629      	mov	r1, r5
 8002326:	f7fd ff7d 	bl	8000224 <__adddf3>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4614      	mov	r4, r2
 8002330:	461d      	mov	r5, r3
 8002332:	4b78      	ldr	r3, [pc, #480]	; (8002514 <Trajectory+0x814>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f8d2 	bl	80004e0 <__aeabi_f2d>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4620      	mov	r0, r4
 8002342:	4629      	mov	r1, r5
 8002344:	f7fd ff6e 	bl	8000224 <__adddf3>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe fbce 	bl	8000af0 <__aeabi_d2f>
 8002354:	4603      	mov	r3, r0
 8002356:	4a6d      	ldr	r2, [pc, #436]	; (800250c <Trajectory+0x80c>)
 8002358:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 800235a:	e32d      	b.n	80029b8 <Trajectory+0xcb8>
			}
			else{
				trajec_state = 0;
 800235c:	4b6e      	ldr	r3, [pc, #440]	; (8002518 <Trajectory+0x818>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 8002362:	4b6e      	ldr	r3, [pc, #440]	; (800251c <Trajectory+0x81c>)
 8002364:	4a6e      	ldr	r2, [pc, #440]	; (8002520 <Trajectory+0x820>)
 8002366:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 8002368:	4b68      	ldr	r3, [pc, #416]	; (800250c <Trajectory+0x80c>)
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
				Time_acc_tri = 0;
 8002370:	4b63      	ldr	r3, [pc, #396]	; (8002500 <Trajectory+0x800>)
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
				temp_pos_acc = 0;
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <Trajectory+0x814>)
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
				temp_v_acc = 0;
 8002380:	4b63      	ldr	r3, [pc, #396]	; (8002510 <Trajectory+0x810>)
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8002388:	e316      	b.n	80029b8 <Trajectory+0xcb8>
			}
		}
	}
	else if(Distance < 0 && trajec_state == 1){        		// Run Down
 800238a:	4b66      	ldr	r3, [pc, #408]	; (8002524 <Trajectory+0x824>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002398:	d400      	bmi.n	800239c <Trajectory+0x69c>
				temp_pos_acc = 0;
				temp_v_acc = 0;
			}
		}
	}
}
 800239a:	e30d      	b.n	80029b8 <Trajectory+0xcb8>
	else if(Distance < 0 && trajec_state == 1){        		// Run Down
 800239c:	4b5e      	ldr	r3, [pc, #376]	; (8002518 <Trajectory+0x818>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	f040 8309 	bne.w	80029b8 <Trajectory+0xcb8>
		kp = 200;
 80023a6:	4b60      	ldr	r3, [pc, #384]	; (8002528 <Trajectory+0x828>)
 80023a8:	4a60      	ldr	r2, [pc, #384]	; (800252c <Trajectory+0x82c>)
 80023aa:	601a      	str	r2, [r3, #0]
		ki = 10;
 80023ac:	4b60      	ldr	r3, [pc, #384]	; (8002530 <Trajectory+0x830>)
 80023ae:	4a61      	ldr	r2, [pc, #388]	; (8002534 <Trajectory+0x834>)
 80023b0:	601a      	str	r2, [r3, #0]
		kd = 8;
 80023b2:	4b61      	ldr	r3, [pc, #388]	; (8002538 <Trajectory+0x838>)
 80023b4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80023b8:	601a      	str	r2, [r3, #0]
		Distance_Velo_Max = (Vmax*Time_acc) + Distance ;
 80023ba:	4b60      	ldr	r3, [pc, #384]	; (800253c <Trajectory+0x83c>)
 80023bc:	ed93 7a00 	vldr	s14, [r3]
 80023c0:	4b5f      	ldr	r3, [pc, #380]	; (8002540 <Trajectory+0x840>)
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ca:	4b56      	ldr	r3, [pc, #344]	; (8002524 <Trajectory+0x824>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d4:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <Trajectory+0x844>)
 80023d6:	edc3 7a00 	vstr	s15, [r3]
		t = (time_now - Timestamp)/1000000.0;  //s
 80023da:	4b5b      	ldr	r3, [pc, #364]	; (8002548 <Trajectory+0x848>)
 80023dc:	ed93 7a00 	vldr	s14, [r3]
 80023e0:	4b5a      	ldr	r3, [pc, #360]	; (800254c <Trajectory+0x84c>)
 80023e2:	edd3 7a00 	vldr	s15, [r3]
 80023e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023ea:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002550 <Trajectory+0x850>
 80023ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f2:	4b44      	ldr	r3, [pc, #272]	; (8002504 <Trajectory+0x804>)
 80023f4:	edc3 7a00 	vstr	s15, [r3]
		if(Distance_Velo_Max < 0){							//Trapezoi
 80023f8:	4b52      	ldr	r3, [pc, #328]	; (8002544 <Trajectory+0x844>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	f140 816b 	bpl.w	80026e0 <Trajectory+0x9e0>
			temp_check = 3;
 800240a:	4b52      	ldr	r3, [pc, #328]	; (8002554 <Trajectory+0x854>)
 800240c:	2203      	movs	r2, #3
 800240e:	701a      	strb	r2, [r3, #0]
			Time_const = Distance_Velo_Max/Vmax;
 8002410:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <Trajectory+0x844>)
 8002412:	edd3 6a00 	vldr	s13, [r3]
 8002416:	4b49      	ldr	r3, [pc, #292]	; (800253c <Trajectory+0x83c>)
 8002418:	ed93 7a00 	vldr	s14, [r3]
 800241c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002420:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <Trajectory+0x858>)
 8002422:	edc3 7a00 	vstr	s15, [r3]
			if(t < Time_acc){
 8002426:	4b37      	ldr	r3, [pc, #220]	; (8002504 <Trajectory+0x804>)
 8002428:	ed93 7a00 	vldr	s14, [r3]
 800242c:	4b44      	ldr	r3, [pc, #272]	; (8002540 <Trajectory+0x840>)
 800242e:	edd3 7a00 	vldr	s15, [r3]
 8002432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243a:	f140 8091 	bpl.w	8002560 <Trajectory+0x860>
				traj[2] = -Amax;
 800243e:	4b32      	ldr	r3, [pc, #200]	; (8002508 <Trajectory+0x808>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	eef1 7a67 	vneg.f32	s15, s15
 8002448:	4b30      	ldr	r3, [pc, #192]	; (800250c <Trajectory+0x80c>)
 800244a:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = -Amax*t;
 800244e:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <Trajectory+0x808>)
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	eeb1 7a67 	vneg.f32	s14, s15
 8002458:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <Trajectory+0x804>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002462:	4b2a      	ldr	r3, [pc, #168]	; (800250c <Trajectory+0x80c>)
 8002464:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (-Amax/2.0)*t*t + pos;
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <Trajectory+0x808>)
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	eef1 7a67 	vneg.f32	s15, s15
 8002472:	ee17 3a90 	vmov	r3, s15
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe f832 	bl	80004e0 <__aeabi_f2d>
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002484:	f7fe f9ae 	bl	80007e4 <__aeabi_ddiv>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4614      	mov	r4, r2
 800248e:	461d      	mov	r5, r3
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <Trajectory+0x804>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f823 	bl	80004e0 <__aeabi_f2d>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4620      	mov	r0, r4
 80024a0:	4629      	mov	r1, r5
 80024a2:	f7fe f875 	bl	8000590 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4614      	mov	r4, r2
 80024ac:	461d      	mov	r5, r3
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <Trajectory+0x804>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe f814 	bl	80004e0 <__aeabi_f2d>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4620      	mov	r0, r4
 80024be:	4629      	mov	r1, r5
 80024c0:	f7fe f866 	bl	8000590 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4614      	mov	r4, r2
 80024ca:	461d      	mov	r5, r3
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <Trajectory+0x85c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe f805 	bl	80004e0 <__aeabi_f2d>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4620      	mov	r0, r4
 80024dc:	4629      	mov	r1, r5
 80024de:	f7fd fea1 	bl	8000224 <__adddf3>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7fe fb01 	bl	8000af0 <__aeabi_d2f>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a06      	ldr	r2, [pc, #24]	; (800250c <Trajectory+0x80c>)
 80024f2:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <Trajectory+0x80c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a06      	ldr	r2, [pc, #24]	; (8002514 <Trajectory+0x814>)
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	e25c      	b.n	80029b8 <Trajectory+0xcb8>
 80024fe:	bf00      	nop
 8002500:	200003a8 	.word	0x200003a8
 8002504:	2000037c 	.word	0x2000037c
 8002508:	20000008 	.word	0x20000008
 800250c:	20000390 	.word	0x20000390
 8002510:	20000388 	.word	0x20000388
 8002514:	20000380 	.word	0x20000380
 8002518:	200003c0 	.word	0x200003c0
 800251c:	200003a0 	.word	0x200003a0
 8002520:	c1200000 	.word	0xc1200000
 8002524:	20000378 	.word	0x20000378
 8002528:	20000348 	.word	0x20000348
 800252c:	43480000 	.word	0x43480000
 8002530:	2000034c 	.word	0x2000034c
 8002534:	41200000 	.word	0x41200000
 8002538:	20000350 	.word	0x20000350
 800253c:	20000004 	.word	0x20000004
 8002540:	200003a4 	.word	0x200003a4
 8002544:	2000038c 	.word	0x2000038c
 8002548:	200003b4 	.word	0x200003b4
 800254c:	200003b8 	.word	0x200003b8
 8002550:	49742400 	.word	0x49742400
 8002554:	200003c1 	.word	0x200003c1
 8002558:	200003b0 	.word	0x200003b0
 800255c:	2000039c 	.word	0x2000039c
			else if(t < Time_const+Time_acc){
 8002560:	4bac      	ldr	r3, [pc, #688]	; (8002814 <Trajectory+0xb14>)
 8002562:	ed93 7a00 	vldr	s14, [r3]
 8002566:	4bac      	ldr	r3, [pc, #688]	; (8002818 <Trajectory+0xb18>)
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002570:	4baa      	ldr	r3, [pc, #680]	; (800281c <Trajectory+0xb1c>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257e:	dd27      	ble.n	80025d0 <Trajectory+0x8d0>
				traj[2] = 0;
 8002580:	4ba7      	ldr	r3, [pc, #668]	; (8002820 <Trajectory+0xb20>)
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
				traj[1] = -Vmax;
 8002588:	4ba6      	ldr	r3, [pc, #664]	; (8002824 <Trajectory+0xb24>)
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	eef1 7a67 	vneg.f32	s15, s15
 8002592:	4ba3      	ldr	r3, [pc, #652]	; (8002820 <Trajectory+0xb20>)
 8002594:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (-Vmax*(t-Time_acc)) + temp_pos_acc;
 8002598:	4ba2      	ldr	r3, [pc, #648]	; (8002824 <Trajectory+0xb24>)
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	eeb1 7a67 	vneg.f32	s14, s15
 80025a2:	4b9e      	ldr	r3, [pc, #632]	; (800281c <Trajectory+0xb1c>)
 80025a4:	edd3 6a00 	vldr	s13, [r3]
 80025a8:	4b9b      	ldr	r3, [pc, #620]	; (8002818 <Trajectory+0xb18>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025b6:	4b9c      	ldr	r3, [pc, #624]	; (8002828 <Trajectory+0xb28>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c0:	4b97      	ldr	r3, [pc, #604]	; (8002820 <Trajectory+0xb20>)
 80025c2:	edc3 7a00 	vstr	s15, [r3]
				temp_pos_const = traj[0];
 80025c6:	4b96      	ldr	r3, [pc, #600]	; (8002820 <Trajectory+0xb20>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a98      	ldr	r2, [pc, #608]	; (800282c <Trajectory+0xb2c>)
 80025cc:	6013      	str	r3, [r2, #0]
}
 80025ce:	e1f3      	b.n	80029b8 <Trajectory+0xcb8>
			else if(t < Time_const+Time_acc+Time_dec){
 80025d0:	4b90      	ldr	r3, [pc, #576]	; (8002814 <Trajectory+0xb14>)
 80025d2:	ed93 7a00 	vldr	s14, [r3]
 80025d6:	4b90      	ldr	r3, [pc, #576]	; (8002818 <Trajectory+0xb18>)
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025e0:	4b93      	ldr	r3, [pc, #588]	; (8002830 <Trajectory+0xb30>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ea:	4b8c      	ldr	r3, [pc, #560]	; (800281c <Trajectory+0xb1c>)
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f8:	dd5f      	ble.n	80026ba <Trajectory+0x9ba>
				traj[2] = Amax;
 80025fa:	4b8e      	ldr	r3, [pc, #568]	; (8002834 <Trajectory+0xb34>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a88      	ldr	r2, [pc, #544]	; (8002820 <Trajectory+0xb20>)
 8002600:	6093      	str	r3, [r2, #8]
				traj[1] = (traj[2]*(t-Time_const-Time_acc)) - Vmax;
 8002602:	4b87      	ldr	r3, [pc, #540]	; (8002820 <Trajectory+0xb20>)
 8002604:	ed93 7a02 	vldr	s14, [r3, #8]
 8002608:	4b84      	ldr	r3, [pc, #528]	; (800281c <Trajectory+0xb1c>)
 800260a:	edd3 6a00 	vldr	s13, [r3]
 800260e:	4b81      	ldr	r3, [pc, #516]	; (8002814 <Trajectory+0xb14>)
 8002610:	edd3 7a00 	vldr	s15, [r3]
 8002614:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002618:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <Trajectory+0xb18>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002622:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002626:	4b7f      	ldr	r3, [pc, #508]	; (8002824 <Trajectory+0xb24>)
 8002628:	edd3 7a00 	vldr	s15, [r3]
 800262c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002630:	4b7b      	ldr	r3, [pc, #492]	; (8002820 <Trajectory+0xb20>)
 8002632:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((Amax/2)*(t-Time_const-Time_acc)*(t-Time_const-Time_acc))+(traj[1]*(t-Time_const-Time_acc))+temp_pos_const;
 8002636:	4b7f      	ldr	r3, [pc, #508]	; (8002834 <Trajectory+0xb34>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002640:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002644:	4b75      	ldr	r3, [pc, #468]	; (800281c <Trajectory+0xb1c>)
 8002646:	edd3 6a00 	vldr	s13, [r3]
 800264a:	4b72      	ldr	r3, [pc, #456]	; (8002814 <Trajectory+0xb14>)
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002654:	4b70      	ldr	r3, [pc, #448]	; (8002818 <Trajectory+0xb18>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800265e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002662:	4b6e      	ldr	r3, [pc, #440]	; (800281c <Trajectory+0xb1c>)
 8002664:	edd3 6a00 	vldr	s13, [r3]
 8002668:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <Trajectory+0xb14>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002672:	4b69      	ldr	r3, [pc, #420]	; (8002818 <Trajectory+0xb18>)
 8002674:	edd3 7a00 	vldr	s15, [r3]
 8002678:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800267c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002680:	4b67      	ldr	r3, [pc, #412]	; (8002820 <Trajectory+0xb20>)
 8002682:	edd3 6a01 	vldr	s13, [r3, #4]
 8002686:	4b65      	ldr	r3, [pc, #404]	; (800281c <Trajectory+0xb1c>)
 8002688:	ed93 6a00 	vldr	s12, [r3]
 800268c:	4b61      	ldr	r3, [pc, #388]	; (8002814 <Trajectory+0xb14>)
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002696:	4b60      	ldr	r3, [pc, #384]	; (8002818 <Trajectory+0xb18>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	ee76 7a67 	vsub.f32	s15, s12, s15
 80026a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a8:	4b60      	ldr	r3, [pc, #384]	; (800282c <Trajectory+0xb2c>)
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b2:	4b5b      	ldr	r3, [pc, #364]	; (8002820 <Trajectory+0xb20>)
 80026b4:	edc3 7a00 	vstr	s15, [r3]
}
 80026b8:	e17e      	b.n	80029b8 <Trajectory+0xcb8>
				trajec_state = 0;
 80026ba:	4b5f      	ldr	r3, [pc, #380]	; (8002838 <Trajectory+0xb38>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 80026c0:	4b5e      	ldr	r3, [pc, #376]	; (800283c <Trajectory+0xb3c>)
 80026c2:	4a5f      	ldr	r2, [pc, #380]	; (8002840 <Trajectory+0xb40>)
 80026c4:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 80026c6:	4b56      	ldr	r3, [pc, #344]	; (8002820 <Trajectory+0xb20>)
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
				temp_pos_acc = 0;
 80026ce:	4b56      	ldr	r3, [pc, #344]	; (8002828 <Trajectory+0xb28>)
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
				temp_pos_const = 0;
 80026d6:	4b55      	ldr	r3, [pc, #340]	; (800282c <Trajectory+0xb2c>)
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
}
 80026de:	e16b      	b.n	80029b8 <Trajectory+0xcb8>
		else if(Distance_Velo_Max >= 0){					//Triangle
 80026e0:	4b58      	ldr	r3, [pc, #352]	; (8002844 <Trajectory+0xb44>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ee:	da00      	bge.n	80026f2 <Trajectory+0x9f2>
}
 80026f0:	e162      	b.n	80029b8 <Trajectory+0xcb8>
			temp_check = 4;
 80026f2:	4b55      	ldr	r3, [pc, #340]	; (8002848 <Trajectory+0xb48>)
 80026f4:	2204      	movs	r2, #4
 80026f6:	701a      	strb	r2, [r3, #0]
			Time_acc_tri = sqrt(-Distance/Amax);
 80026f8:	4b54      	ldr	r3, [pc, #336]	; (800284c <Trajectory+0xb4c>)
 80026fa:	edd3 7a00 	vldr	s15, [r3]
 80026fe:	eeb1 7a67 	vneg.f32	s14, s15
 8002702:	4b4c      	ldr	r3, [pc, #304]	; (8002834 <Trajectory+0xb34>)
 8002704:	edd3 7a00 	vldr	s15, [r3]
 8002708:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800270c:	ee16 0a90 	vmov	r0, s13
 8002710:	f7fd fee6 	bl	80004e0 <__aeabi_f2d>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	ec43 2b10 	vmov	d0, r2, r3
 800271c:	f006 fcca 	bl	80090b4 <sqrt>
 8002720:	ec53 2b10 	vmov	r2, r3, d0
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f7fe f9e2 	bl	8000af0 <__aeabi_d2f>
 800272c:	4603      	mov	r3, r0
 800272e:	4a48      	ldr	r2, [pc, #288]	; (8002850 <Trajectory+0xb50>)
 8002730:	6013      	str	r3, [r2, #0]
			if(t < Time_acc_tri){
 8002732:	4b3a      	ldr	r3, [pc, #232]	; (800281c <Trajectory+0xb1c>)
 8002734:	ed93 7a00 	vldr	s14, [r3]
 8002738:	4b45      	ldr	r3, [pc, #276]	; (8002850 <Trajectory+0xb50>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002746:	f140 8089 	bpl.w	800285c <Trajectory+0xb5c>
				traj[2] = -Amax;
 800274a:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <Trajectory+0xb34>)
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	eef1 7a67 	vneg.f32	s15, s15
 8002754:	4b32      	ldr	r3, [pc, #200]	; (8002820 <Trajectory+0xb20>)
 8002756:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = -Amax*t;
 800275a:	4b36      	ldr	r3, [pc, #216]	; (8002834 <Trajectory+0xb34>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	eeb1 7a67 	vneg.f32	s14, s15
 8002764:	4b2d      	ldr	r3, [pc, #180]	; (800281c <Trajectory+0xb1c>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <Trajectory+0xb20>)
 8002770:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (-Amax/2.0)*t*t + pos;
 8002774:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <Trajectory+0xb34>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	eef1 7a67 	vneg.f32	s15, s15
 800277e:	ee17 3a90 	vmov	r3, s15
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd feac 	bl	80004e0 <__aeabi_f2d>
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002790:	f7fe f828 	bl	80007e4 <__aeabi_ddiv>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4614      	mov	r4, r2
 800279a:	461d      	mov	r5, r3
 800279c:	4b1f      	ldr	r3, [pc, #124]	; (800281c <Trajectory+0xb1c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd fe9d 	bl	80004e0 <__aeabi_f2d>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4620      	mov	r0, r4
 80027ac:	4629      	mov	r1, r5
 80027ae:	f7fd feef 	bl	8000590 <__aeabi_dmul>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4614      	mov	r4, r2
 80027b8:	461d      	mov	r5, r3
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <Trajectory+0xb1c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fe8e 	bl	80004e0 <__aeabi_f2d>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4620      	mov	r0, r4
 80027ca:	4629      	mov	r1, r5
 80027cc:	f7fd fee0 	bl	8000590 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4614      	mov	r4, r2
 80027d6:	461d      	mov	r5, r3
 80027d8:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <Trajectory+0xb54>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fe7f 	bl	80004e0 <__aeabi_f2d>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4620      	mov	r0, r4
 80027e8:	4629      	mov	r1, r5
 80027ea:	f7fd fd1b 	bl	8000224 <__adddf3>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f7fe f97b 	bl	8000af0 <__aeabi_d2f>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a08      	ldr	r2, [pc, #32]	; (8002820 <Trajectory+0xb20>)
 80027fe:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <Trajectory+0xb20>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a08      	ldr	r2, [pc, #32]	; (8002828 <Trajectory+0xb28>)
 8002806:	6013      	str	r3, [r2, #0]
				temp_v_acc = traj[1];
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <Trajectory+0xb20>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a12      	ldr	r2, [pc, #72]	; (8002858 <Trajectory+0xb58>)
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	e0d2      	b.n	80029b8 <Trajectory+0xcb8>
 8002812:	bf00      	nop
 8002814:	200003b0 	.word	0x200003b0
 8002818:	200003a4 	.word	0x200003a4
 800281c:	2000037c 	.word	0x2000037c
 8002820:	20000390 	.word	0x20000390
 8002824:	20000004 	.word	0x20000004
 8002828:	20000380 	.word	0x20000380
 800282c:	20000384 	.word	0x20000384
 8002830:	200003ac 	.word	0x200003ac
 8002834:	20000008 	.word	0x20000008
 8002838:	200003c0 	.word	0x200003c0
 800283c:	200003a0 	.word	0x200003a0
 8002840:	c1200000 	.word	0xc1200000
 8002844:	2000038c 	.word	0x2000038c
 8002848:	200003c1 	.word	0x200003c1
 800284c:	20000378 	.word	0x20000378
 8002850:	200003a8 	.word	0x200003a8
 8002854:	2000039c 	.word	0x2000039c
 8002858:	20000388 	.word	0x20000388
			else if(t < Time_acc_tri*2){
 800285c:	4b57      	ldr	r3, [pc, #348]	; (80029bc <Trajectory+0xcbc>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002866:	4b56      	ldr	r3, [pc, #344]	; (80029c0 <Trajectory+0xcc0>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	f340 8089 	ble.w	800298a <Trajectory+0xc8a>
				traj[2] = Amax;
 8002878:	4b52      	ldr	r3, [pc, #328]	; (80029c4 <Trajectory+0xcc4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a52      	ldr	r2, [pc, #328]	; (80029c8 <Trajectory+0xcc8>)
 800287e:	6093      	str	r3, [r2, #8]
				traj[1] = temp_v_acc + (Amax*(t-Time_acc_tri));
 8002880:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <Trajectory+0xcc0>)
 8002882:	ed93 7a00 	vldr	s14, [r3]
 8002886:	4b4d      	ldr	r3, [pc, #308]	; (80029bc <Trajectory+0xcbc>)
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002890:	4b4c      	ldr	r3, [pc, #304]	; (80029c4 <Trajectory+0xcc4>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800289a:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <Trajectory+0xccc>)
 800289c:	edd3 7a00 	vldr	s15, [r3]
 80028a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a4:	4b48      	ldr	r3, [pc, #288]	; (80029c8 <Trajectory+0xcc8>)
 80028a6:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((-Amax/2.0)*(t-Time_acc_tri)*(t-Time_acc_tri))+(traj[1]*(t-Time_acc_tri))+temp_pos_acc;
 80028aa:	4b46      	ldr	r3, [pc, #280]	; (80029c4 <Trajectory+0xcc4>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	eef1 7a67 	vneg.f32	s15, s15
 80028b4:	ee17 3a90 	vmov	r3, s15
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fe11 	bl	80004e0 <__aeabi_f2d>
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028c6:	f7fd ff8d 	bl	80007e4 <__aeabi_ddiv>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4614      	mov	r4, r2
 80028d0:	461d      	mov	r5, r3
 80028d2:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <Trajectory+0xcc0>)
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	4b38      	ldr	r3, [pc, #224]	; (80029bc <Trajectory+0xcbc>)
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e2:	ee17 0a90 	vmov	r0, s15
 80028e6:	f7fd fdfb 	bl	80004e0 <__aeabi_f2d>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4620      	mov	r0, r4
 80028f0:	4629      	mov	r1, r5
 80028f2:	f7fd fe4d 	bl	8000590 <__aeabi_dmul>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4614      	mov	r4, r2
 80028fc:	461d      	mov	r5, r3
 80028fe:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <Trajectory+0xcc0>)
 8002900:	ed93 7a00 	vldr	s14, [r3]
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <Trajectory+0xcbc>)
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800290e:	ee17 0a90 	vmov	r0, s15
 8002912:	f7fd fde5 	bl	80004e0 <__aeabi_f2d>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4620      	mov	r0, r4
 800291c:	4629      	mov	r1, r5
 800291e:	f7fd fe37 	bl	8000590 <__aeabi_dmul>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4614      	mov	r4, r2
 8002928:	461d      	mov	r5, r3
 800292a:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <Trajectory+0xcc8>)
 800292c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002930:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <Trajectory+0xcc0>)
 8002932:	edd3 6a00 	vldr	s13, [r3]
 8002936:	4b21      	ldr	r3, [pc, #132]	; (80029bc <Trajectory+0xcbc>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002944:	ee17 0a90 	vmov	r0, s15
 8002948:	f7fd fdca 	bl	80004e0 <__aeabi_f2d>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4620      	mov	r0, r4
 8002952:	4629      	mov	r1, r5
 8002954:	f7fd fc66 	bl	8000224 <__adddf3>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4614      	mov	r4, r2
 800295e:	461d      	mov	r5, r3
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <Trajectory+0xcd0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fdbb 	bl	80004e0 <__aeabi_f2d>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4620      	mov	r0, r4
 8002970:	4629      	mov	r1, r5
 8002972:	f7fd fc57 	bl	8000224 <__adddf3>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	f7fe f8b7 	bl	8000af0 <__aeabi_d2f>
 8002982:	4603      	mov	r3, r0
 8002984:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <Trajectory+0xcc8>)
 8002986:	6013      	str	r3, [r2, #0]
}
 8002988:	e016      	b.n	80029b8 <Trajectory+0xcb8>
				trajec_state = 0;
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <Trajectory+0xcd4>)
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <Trajectory+0xcd8>)
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <Trajectory+0xcdc>)
 8002994:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <Trajectory+0xcc8>)
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
				Time_acc_tri = 0;
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <Trajectory+0xcbc>)
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
				temp_pos_acc = 0;
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <Trajectory+0xcd0>)
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
				temp_v_acc = 0;
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <Trajectory+0xccc>)
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
}
 80029b6:	e7ff      	b.n	80029b8 <Trajectory+0xcb8>
 80029b8:	bf00      	nop
 80029ba:	bdb0      	pop	{r4, r5, r7, pc}
 80029bc:	200003a8 	.word	0x200003a8
 80029c0:	2000037c 	.word	0x2000037c
 80029c4:	20000008 	.word	0x20000008
 80029c8:	20000390 	.word	0x20000390
 80029cc:	20000388 	.word	0x20000388
 80029d0:	20000380 	.word	0x20000380
 80029d4:	200003c0 	.word	0x200003c0
 80029d8:	200003a0 	.word	0x200003a0
 80029dc:	c1200000 	.word	0xc1200000

080029e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029e4:	b672      	cpsid	i
}
 80029e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029e8:	e7fe      	b.n	80029e8 <Error_Handler+0x8>
	...

080029ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_MspInit+0x44>)
 80029f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f6:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <HAL_MspInit+0x44>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6613      	str	r3, [r2, #96]	; 0x60
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <HAL_MspInit+0x44>)
 8002a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_MspInit+0x44>)
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <HAL_MspInit+0x44>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a14:	6593      	str	r3, [r2, #88]	; 0x58
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_MspInit+0x44>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002a22:	f003 f80b 	bl	8005a3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000

08002a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b0a0      	sub	sp, #128	; 0x80
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a4c:	f107 0318 	add.w	r3, r7, #24
 8002a50:	2254      	movs	r2, #84	; 0x54
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f006 fafb 	bl	8009050 <memset>
  if(hadc->Instance==ADC1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a62:	f040 8081 	bne.w	8002b68 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002a6c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002a70:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a72:	f107 0318 	add.w	r3, r7, #24
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fd1e 	bl	80064b8 <HAL_RCCEx_PeriphCLKConfig>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002a82:	f7ff ffad 	bl	80029e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002a86:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_ADC_MspInit+0x13c>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	4a39      	ldr	r2, [pc, #228]	; (8002b70 <HAL_ADC_MspInit+0x13c>)
 8002a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a92:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <HAL_ADC_MspInit+0x13c>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <HAL_ADC_MspInit+0x13c>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4a33      	ldr	r2, [pc, #204]	; (8002b70 <HAL_ADC_MspInit+0x13c>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aaa:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_ADC_MspInit+0x13c>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <HAL_ADC_MspInit+0x13c>)
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	4a2d      	ldr	r2, [pc, #180]	; (8002b70 <HAL_ADC_MspInit+0x13c>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac2:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <HAL_ADC_MspInit+0x13c>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ada:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ae4:	f002 fd54 	bl	8005590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_14;
 8002ae8:	f244 0302 	movw	r3, #16386	; 0x4002
 8002aec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aee:	2303      	movs	r3, #3
 8002af0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002afa:	4619      	mov	r1, r3
 8002afc:	481d      	ldr	r0, [pc, #116]	; (8002b74 <HAL_ADC_MspInit+0x140>)
 8002afe:	f002 fd47 	bl	8005590 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_ADC_MspInit+0x144>)
 8002b04:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <HAL_ADC_MspInit+0x148>)
 8002b06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_ADC_MspInit+0x144>)
 8002b0a:	2205      	movs	r2, #5
 8002b0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_ADC_MspInit+0x144>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_ADC_MspInit+0x144>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <HAL_ADC_MspInit+0x144>)
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <HAL_ADC_MspInit+0x144>)
 8002b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b28:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <HAL_ADC_MspInit+0x144>)
 8002b2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b2e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_ADC_MspInit+0x144>)
 8002b32:	2220      	movs	r2, #32
 8002b34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_ADC_MspInit+0x144>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b3c:	480e      	ldr	r0, [pc, #56]	; (8002b78 <HAL_ADC_MspInit+0x144>)
 8002b3e:	f002 fab5 	bl	80050ac <HAL_DMA_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_ADC_MspInit+0x118>
    {
      Error_Handler();
 8002b48:	f7ff ff4a 	bl	80029e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <HAL_ADC_MspInit+0x144>)
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <HAL_ADC_MspInit+0x144>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2012      	movs	r0, #18
 8002b5e:	f002 fa70 	bl	8005042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002b62:	2012      	movs	r0, #18
 8002b64:	f002 fa87 	bl	8005076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b68:	bf00      	nop
 8002b6a:	3780      	adds	r7, #128	; 0x80
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000
 8002b74:	48000400 	.word	0x48000400
 8002b78:	20000100 	.word	0x20000100
 8002b7c:	40020008 	.word	0x40020008

08002b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b09e      	sub	sp, #120	; 0x78
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b98:	f107 0310 	add.w	r3, r7, #16
 8002b9c:	2254      	movs	r2, #84	; 0x54
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f006 fa55 	bl	8009050 <memset>
  if(huart->Instance==LPUART1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <HAL_UART_MspInit+0xa8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d136      	bne.n	8002c1e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb8:	f107 0310 	add.w	r3, r7, #16
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f003 fc7b 	bl	80064b8 <HAL_RCCEx_PeriphCLKConfig>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bc8:	f7ff ff0a 	bl	80029e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002bcc:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <HAL_UART_MspInit+0xac>)
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <HAL_UART_MspInit+0xac>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <HAL_UART_MspInit+0xac>)
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_UART_MspInit+0xac>)
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	4a10      	ldr	r2, [pc, #64]	; (8002c2c <HAL_UART_MspInit+0xac>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <HAL_UART_MspInit+0xac>)
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002c0c:	230c      	movs	r3, #12
 8002c0e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c14:	4619      	mov	r1, r3
 8002c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c1a:	f002 fcb9 	bl	8005590 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002c1e:	bf00      	nop
 8002c20:	3778      	adds	r7, #120	; 0x78
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40008000 	.word	0x40008000
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d129      	bne.n	8002ca6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	4a11      	ldr	r2, [pc, #68]	; (8002cb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c76:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002c94:	2306      	movs	r3, #6
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca2:	f002 fc75 	bl	8005590 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ca6:	bf00      	nop
 8002ca8:	3728      	adds	r7, #40	; 0x28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc8:	d114      	bne.n	8002cf4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <HAL_TIM_Base_MspInit+0x9c>)
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <HAL_TIM_Base_MspInit+0x9c>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <HAL_TIM_Base_MspInit+0x9c>)
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	201c      	movs	r0, #28
 8002ce8:	f002 f9ab 	bl	8005042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cec:	201c      	movs	r0, #28
 8002cee:	f002 f9c2 	bl	8005076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002cf2:	e02a      	b.n	8002d4a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a17      	ldr	r2, [pc, #92]	; (8002d58 <HAL_TIM_Base_MspInit+0xa0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d114      	bne.n	8002d28 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_TIM_Base_MspInit+0x9c>)
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_TIM_Base_MspInit+0x9c>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_TIM_Base_MspInit+0x9c>)
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2100      	movs	r1, #0
 8002d1a:	201d      	movs	r0, #29
 8002d1c:	f002 f991 	bl	8005042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d20:	201d      	movs	r0, #29
 8002d22:	f002 f9a8 	bl	8005076 <HAL_NVIC_EnableIRQ>
}
 8002d26:	e010      	b.n	8002d4a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <HAL_TIM_Base_MspInit+0xa4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d10b      	bne.n	8002d4a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <HAL_TIM_Base_MspInit+0x9c>)
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <HAL_TIM_Base_MspInit+0x9c>)
 8002d38:	f043 0308 	orr.w	r3, r3, #8
 8002d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_TIM_Base_MspInit+0x9c>)
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
}
 8002d4a:	bf00      	nop
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000c00 	.word	0x40000c00

08002d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a11      	ldr	r2, [pc, #68]	; (8002dc4 <HAL_TIM_MspPostInit+0x64>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d11c      	bne.n	8002dbc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_TIM_MspPostInit+0x68>)
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <HAL_TIM_MspPostInit+0x68>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_TIM_MspPostInit+0x68>)
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8002dac:	2301      	movs	r3, #1
 8002dae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db0:	f107 030c 	add.w	r3, r7, #12
 8002db4:	4619      	mov	r1, r3
 8002db6:	4805      	ldr	r0, [pc, #20]	; (8002dcc <HAL_TIM_MspPostInit+0x6c>)
 8002db8:	f002 fbea 	bl	8005590 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002dbc:	bf00      	nop
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40000c00 	.word	0x40000c00
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	48000800 	.word	0x48000800

08002dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <NMI_Handler+0x4>

08002dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dda:	e7fe      	b.n	8002dda <HardFault_Handler+0x4>

08002ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <MemManage_Handler+0x4>

08002de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <BusFault_Handler+0x4>

08002de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <UsageFault_Handler+0x4>

08002dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e1c:	f000 f8c0 	bl	8002fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <DMA1_Channel1_IRQHandler+0x10>)
 8002e2a:	f002 fa62 	bl	80052f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000100 	.word	0x20000100

08002e38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <ADC1_2_IRQHandler+0x10>)
 8002e3e:	f000 fde5 	bl	8003a0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000094 	.word	0x20000094

08002e4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <TIM2_IRQHandler+0x10>)
 8002e52:	f004 f967 	bl	8007124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000240 	.word	0x20000240

08002e60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <TIM3_IRQHandler+0x10>)
 8002e66:	f004 f95d 	bl	8007124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	2000028c 	.word	0x2000028c

08002e74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e7c:	f002 fd22 	bl	80058c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <SystemInit+0x20>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <SystemInit+0x20>)
 8002e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ea8:	480d      	ldr	r0, [pc, #52]	; (8002ee0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eaa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002eac:	f7ff ffea 	bl	8002e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eb2:	490d      	ldr	r1, [pc, #52]	; (8002ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <LoopForever+0xe>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002eb8:	e002      	b.n	8002ec0 <LoopCopyDataInit>

08002eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ebe:	3304      	adds	r3, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec4:	d3f9      	bcc.n	8002eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ec8:	4c0a      	ldr	r4, [pc, #40]	; (8002ef4 <LoopForever+0x16>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ecc:	e001      	b.n	8002ed2 <LoopFillZerobss>

08002ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed0:	3204      	adds	r2, #4

08002ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed4:	d3fb      	bcc.n	8002ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ed6:	f006 f8c9 	bl	800906c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002eda:	f7fd ffd7 	bl	8000e8c <main>

08002ede <LoopForever>:

LoopForever:
    b LoopForever
 8002ede:	e7fe      	b.n	8002ede <LoopForever>
  ldr   r0, =_estack
 8002ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002eec:	08009328 	.word	0x08009328
  ldr r2, =_sbss
 8002ef0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002ef4:	20000504 	.word	0x20000504

08002ef8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ef8:	e7fe      	b.n	8002ef8 <ADC3_IRQHandler>

08002efa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f04:	2003      	movs	r0, #3
 8002f06:	f002 f891 	bl	800502c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f000 f80e 	bl	8002f2c <HAL_InitTick>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	71fb      	strb	r3, [r7, #7]
 8002f1a:	e001      	b.n	8002f20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f1c:	f7ff fd66 	bl	80029ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f20:	79fb      	ldrb	r3, [r7, #7]

}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_InitTick+0x68>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d022      	beq.n	8002f86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f40:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <HAL_InitTick+0x6c>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_InitTick+0x68>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	4618      	mov	r0, r3
 8002f56:	f002 f89c 	bl	8005092 <HAL_SYSTICK_Config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10f      	bne.n	8002f80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b0f      	cmp	r3, #15
 8002f64:	d809      	bhi.n	8002f7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f66:	2200      	movs	r2, #0
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6e:	f002 f868 	bl	8005042 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <HAL_InitTick+0x70>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e007      	b.n	8002f8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	e004      	b.n	8002f8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e001      	b.n	8002f8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000014 	.word	0x20000014
 8002f98:	2000000c 	.word	0x2000000c
 8002f9c:	20000010 	.word	0x20000010

08002fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <HAL_IncTick+0x1c>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <HAL_IncTick+0x20>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	4a03      	ldr	r2, [pc, #12]	; (8002fbc <HAL_IncTick+0x1c>)
 8002fb0:	6013      	str	r3, [r2, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	200003c8 	.word	0x200003c8
 8002fc0:	20000014 	.word	0x20000014

08002fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_GetTick+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	200003c8 	.word	0x200003c8

08002fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7ff ffee 	bl	8002fc4 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d004      	beq.n	8003000 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_Delay+0x40>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003000:	bf00      	nop
 8003002:	f7ff ffdf 	bl	8002fc4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	429a      	cmp	r2, r3
 8003010:	d8f7      	bhi.n	8003002 <HAL_Delay+0x26>
  {
  }
}
 8003012:	bf00      	nop
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000014 	.word	0x20000014

08003020 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	609a      	str	r2, [r3, #8]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	609a      	str	r2, [r3, #8]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3360      	adds	r3, #96	; 0x60
 800309a:	461a      	mov	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <LL_ADC_SetOffset+0x44>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	03fff000 	.word	0x03fff000

080030d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3360      	adds	r3, #96	; 0x60
 80030de:	461a      	mov	r2, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3360      	adds	r3, #96	; 0x60
 800310c:	461a      	mov	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	431a      	orrs	r2, r3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003132:	b480      	push	{r7}
 8003134:	b087      	sub	sp, #28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3360      	adds	r3, #96	; 0x60
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	431a      	orrs	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3360      	adds	r3, #96	; 0x60
 8003178:	461a      	mov	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	431a      	orrs	r2, r3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	615a      	str	r2, [r3, #20]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b087      	sub	sp, #28
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	3330      	adds	r3, #48	; 0x30
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	4413      	add	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	211f      	movs	r1, #31
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	401a      	ands	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	f003 011f 	and.w	r1, r3, #31
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	431a      	orrs	r2, r3
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3314      	adds	r3, #20
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	0e5b      	lsrs	r3, r3, #25
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	4413      	add	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	0d1b      	lsrs	r3, r3, #20
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2107      	movs	r1, #7
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	401a      	ands	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	0d1b      	lsrs	r3, r3, #20
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	431a      	orrs	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d8:	43db      	mvns	r3, r3
 80032da:	401a      	ands	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f003 0318 	and.w	r3, r3, #24
 80032e2:	4908      	ldr	r1, [pc, #32]	; (8003304 <LL_ADC_SetChannelSingleDiff+0x44>)
 80032e4:	40d9      	lsrs	r1, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	400b      	ands	r3, r1
 80032ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ee:	431a      	orrs	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	0007ffff 	.word	0x0007ffff

08003308 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 031f 	and.w	r3, r3, #31
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6093      	str	r3, [r2, #8]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003378:	d101      	bne.n	800337e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800339c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033c8:	d101      	bne.n	80033ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003414:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003418:	f043 0202 	orr.w	r2, r3, #2
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <LL_ADC_IsEnabled+0x18>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <LL_ADC_IsEnabled+0x1a>
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b02      	cmp	r3, #2
 8003464:	d101      	bne.n	800346a <LL_ADC_IsDisableOngoing+0x18>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <LL_ADC_IsDisableOngoing+0x1a>
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003488:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800348c:	f043 0204 	orr.w	r2, r3, #4
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d101      	bne.n	80034b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d101      	bne.n	80034de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e1a9      	b.n	800385a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff fa8d 	bl	8002a34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff19 	bl	8003364 <LL_ADC_IsDeepPowerDownEnabled>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff feff 	bl	8003340 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ff34 	bl	80033b4 <LL_ADC_IsInternalRegulatorEnabled>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d115      	bne.n	800357e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ff18 	bl	800338c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800355c:	4b9c      	ldr	r3, [pc, #624]	; (80037d0 <HAL_ADC_Init+0x2e4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	4a9c      	ldr	r2, [pc, #624]	; (80037d4 <HAL_ADC_Init+0x2e8>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	3301      	adds	r3, #1
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003570:	e002      	b.n	8003578 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3b01      	subs	r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f9      	bne.n	8003572 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff ff16 	bl	80033b4 <LL_ADC_IsInternalRegulatorEnabled>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10d      	bne.n	80035aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	f043 0210 	orr.w	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359e:	f043 0201 	orr.w	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff ff76 	bl	80034a0 <LL_ADC_REG_IsConversionOngoing>
 80035b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 8142 	bne.w	8003848 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 813e 	bne.w	8003848 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035d4:	f043 0202 	orr.w	r2, r3, #2
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff23 	bl	800342c <LL_ADC_IsEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d141      	bne.n	8003670 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035f4:	d004      	beq.n	8003600 <HAL_ADC_Init+0x114>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a77      	ldr	r2, [pc, #476]	; (80037d8 <HAL_ADC_Init+0x2ec>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10f      	bne.n	8003620 <HAL_ADC_Init+0x134>
 8003600:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003604:	f7ff ff12 	bl	800342c <LL_ADC_IsEnabled>
 8003608:	4604      	mov	r4, r0
 800360a:	4873      	ldr	r0, [pc, #460]	; (80037d8 <HAL_ADC_Init+0x2ec>)
 800360c:	f7ff ff0e 	bl	800342c <LL_ADC_IsEnabled>
 8003610:	4603      	mov	r3, r0
 8003612:	4323      	orrs	r3, r4
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e012      	b.n	8003646 <HAL_ADC_Init+0x15a>
 8003620:	486e      	ldr	r0, [pc, #440]	; (80037dc <HAL_ADC_Init+0x2f0>)
 8003622:	f7ff ff03 	bl	800342c <LL_ADC_IsEnabled>
 8003626:	4604      	mov	r4, r0
 8003628:	486d      	ldr	r0, [pc, #436]	; (80037e0 <HAL_ADC_Init+0x2f4>)
 800362a:	f7ff feff 	bl	800342c <LL_ADC_IsEnabled>
 800362e:	4603      	mov	r3, r0
 8003630:	431c      	orrs	r4, r3
 8003632:	486c      	ldr	r0, [pc, #432]	; (80037e4 <HAL_ADC_Init+0x2f8>)
 8003634:	f7ff fefa 	bl	800342c <LL_ADC_IsEnabled>
 8003638:	4603      	mov	r3, r0
 800363a:	4323      	orrs	r3, r4
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d012      	beq.n	8003670 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003652:	d004      	beq.n	800365e <HAL_ADC_Init+0x172>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a5f      	ldr	r2, [pc, #380]	; (80037d8 <HAL_ADC_Init+0x2ec>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_ADC_Init+0x176>
 800365e:	4a62      	ldr	r2, [pc, #392]	; (80037e8 <HAL_ADC_Init+0x2fc>)
 8003660:	e000      	b.n	8003664 <HAL_ADC_Init+0x178>
 8003662:	4a62      	ldr	r2, [pc, #392]	; (80037ec <HAL_ADC_Init+0x300>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4619      	mov	r1, r3
 800366a:	4610      	mov	r0, r2
 800366c:	f7ff fcd8 	bl	8003020 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	7f5b      	ldrb	r3, [r3, #29]
 8003674:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800367a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003680:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003686:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800368e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800369a:	2b01      	cmp	r3, #1
 800369c:	d106      	bne.n	80036ac <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	045b      	lsls	r3, r3, #17
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d009      	beq.n	80036c8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	4b48      	ldr	r3, [pc, #288]	; (80037f0 <HAL_ADC_Init+0x304>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	69b9      	ldr	r1, [r7, #24]
 80036d8:	430b      	orrs	r3, r1
 80036da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fee5 	bl	80034c6 <LL_ADC_INJ_IsConversionOngoing>
 80036fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d17f      	bne.n	8003804 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d17c      	bne.n	8003804 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800370e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003716:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003726:	f023 0302 	bic.w	r3, r3, #2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	69b9      	ldr	r1, [r7, #24]
 8003730:	430b      	orrs	r3, r1
 8003732:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d017      	beq.n	800376c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800374a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003754:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6911      	ldr	r1, [r2, #16]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	430b      	orrs	r3, r1
 8003766:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800376a:	e013      	b.n	8003794 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800377a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800378c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003790:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800379a:	2b01      	cmp	r3, #1
 800379c:	d12a      	bne.n	80037f4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037a8:	f023 0304 	bic.w	r3, r3, #4
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037b4:	4311      	orrs	r1, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80037ba:	4311      	orrs	r1, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037c0:	430a      	orrs	r2, r1
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	611a      	str	r2, [r3, #16]
 80037ce:	e019      	b.n	8003804 <HAL_ADC_Init+0x318>
 80037d0:	2000000c 	.word	0x2000000c
 80037d4:	053e2d63 	.word	0x053e2d63
 80037d8:	50000100 	.word	0x50000100
 80037dc:	50000400 	.word	0x50000400
 80037e0:	50000500 	.word	0x50000500
 80037e4:	50000600 	.word	0x50000600
 80037e8:	50000300 	.word	0x50000300
 80037ec:	50000700 	.word	0x50000700
 80037f0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10c      	bne.n	8003826 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f023 010f 	bic.w	r1, r3, #15
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	1e5a      	subs	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
 8003824:	e007      	b.n	8003836 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 020f 	bic.w	r2, r2, #15
 8003834:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	f023 0303 	bic.w	r3, r3, #3
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	65da      	str	r2, [r3, #92]	; 0x5c
 8003846:	e007      	b.n	8003858 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	f043 0210 	orr.w	r2, r3, #16
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003858:	7ffb      	ldrb	r3, [r7, #31]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3724      	adds	r7, #36	; 0x24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd90      	pop	{r4, r7, pc}
 8003862:	bf00      	nop

08003864 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003878:	d004      	beq.n	8003884 <HAL_ADC_Start_DMA+0x20>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a5a      	ldr	r2, [pc, #360]	; (80039e8 <HAL_ADC_Start_DMA+0x184>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d101      	bne.n	8003888 <HAL_ADC_Start_DMA+0x24>
 8003884:	4b59      	ldr	r3, [pc, #356]	; (80039ec <HAL_ADC_Start_DMA+0x188>)
 8003886:	e000      	b.n	800388a <HAL_ADC_Start_DMA+0x26>
 8003888:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <HAL_ADC_Start_DMA+0x18c>)
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fd3c 	bl	8003308 <LL_ADC_GetMultimode>
 8003890:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fe02 	bl	80034a0 <LL_ADC_REG_IsConversionOngoing>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f040 809b 	bne.w	80039da <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_Start_DMA+0x4e>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e096      	b.n	80039e0 <HAL_ADC_Start_DMA+0x17c>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a4d      	ldr	r2, [pc, #308]	; (80039f4 <HAL_ADC_Start_DMA+0x190>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d008      	beq.n	80038d6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d002      	beq.n	80038d6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2b09      	cmp	r3, #9
 80038d4:	d17a      	bne.n	80039cc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 ff60 	bl	800479c <ADC_Enable>
 80038dc:	4603      	mov	r3, r0
 80038de:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d16d      	bne.n	80039c2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a3a      	ldr	r2, [pc, #232]	; (80039e8 <HAL_ADC_Start_DMA+0x184>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_ADC_Start_DMA+0xb4>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a3b      	ldr	r2, [pc, #236]	; (80039f8 <HAL_ADC_Start_DMA+0x194>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d002      	beq.n	8003914 <HAL_ADC_Start_DMA+0xb0>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	e003      	b.n	800391c <HAL_ADC_Start_DMA+0xb8>
 8003914:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_ADC_Start_DMA+0x198>)
 8003916:	e001      	b.n	800391c <HAL_ADC_Start_DMA+0xb8>
 8003918:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	4293      	cmp	r3, r2
 8003922:	d002      	beq.n	800392a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d105      	bne.n	8003936 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003946:	f023 0206 	bic.w	r2, r3, #6
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	661a      	str	r2, [r3, #96]	; 0x60
 800394e:	e002      	b.n	8003956 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	4a29      	ldr	r2, [pc, #164]	; (8003a00 <HAL_ADC_Start_DMA+0x19c>)
 800395c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	4a28      	ldr	r2, [pc, #160]	; (8003a04 <HAL_ADC_Start_DMA+0x1a0>)
 8003964:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <HAL_ADC_Start_DMA+0x1a4>)
 800396c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	221c      	movs	r2, #28
 8003974:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0210 	orr.w	r2, r2, #16
 800398c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3340      	adds	r3, #64	; 0x40
 80039a8:	4619      	mov	r1, r3
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f001 fc25 	bl	80051fc <HAL_DMA_Start_IT>
 80039b2:	4603      	mov	r3, r0
 80039b4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fd5c 	bl	8003478 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80039c0:	e00d      	b.n	80039de <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80039ca:	e008      	b.n	80039de <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80039d8:	e001      	b.n	80039de <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039da:	2302      	movs	r3, #2
 80039dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039de:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	50000100 	.word	0x50000100
 80039ec:	50000300 	.word	0x50000300
 80039f0:	50000700 	.word	0x50000700
 80039f4:	50000600 	.word	0x50000600
 80039f8:	50000500 	.word	0x50000500
 80039fc:	50000400 	.word	0x50000400
 8003a00:	08004987 	.word	0x08004987
 8003a04:	08004a5f 	.word	0x08004a5f
 8003a08:	08004a7b 	.word	0x08004a7b

08003a0c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a30:	d004      	beq.n	8003a3c <HAL_ADC_IRQHandler+0x30>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a8e      	ldr	r2, [pc, #568]	; (8003c70 <HAL_ADC_IRQHandler+0x264>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_ADC_IRQHandler+0x34>
 8003a3c:	4b8d      	ldr	r3, [pc, #564]	; (8003c74 <HAL_ADC_IRQHandler+0x268>)
 8003a3e:	e000      	b.n	8003a42 <HAL_ADC_IRQHandler+0x36>
 8003a40:	4b8d      	ldr	r3, [pc, #564]	; (8003c78 <HAL_ADC_IRQHandler+0x26c>)
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fc60 	bl	8003308 <LL_ADC_GetMultimode>
 8003a48:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d017      	beq.n	8003a84 <HAL_ADC_IRQHandler+0x78>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d012      	beq.n	8003a84 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d105      	bne.n	8003a76 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f001 f8f6 	bl	8004c68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2202      	movs	r2, #2
 8003a82:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <HAL_ADC_IRQHandler+0x8c>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8094 	beq.w	8003bcc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 808e 	beq.w	8003bcc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d105      	bne.n	8003ac8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff fb79 	bl	80031c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d072      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a64      	ldr	r2, [pc, #400]	; (8003c70 <HAL_ADC_IRQHandler+0x264>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_ADC_IRQHandler+0xea>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a65      	ldr	r2, [pc, #404]	; (8003c7c <HAL_ADC_IRQHandler+0x270>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d002      	beq.n	8003af2 <HAL_ADC_IRQHandler+0xe6>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	e003      	b.n	8003afa <HAL_ADC_IRQHandler+0xee>
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <HAL_ADC_IRQHandler+0x274>)
 8003af4:	e001      	b.n	8003afa <HAL_ADC_IRQHandler+0xee>
 8003af6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d008      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b05      	cmp	r3, #5
 8003b0c:	d002      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b09      	cmp	r3, #9
 8003b12:	d104      	bne.n	8003b1e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	623b      	str	r3, [r7, #32]
 8003b1c:	e014      	b.n	8003b48 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a53      	ldr	r2, [pc, #332]	; (8003c70 <HAL_ADC_IRQHandler+0x264>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d009      	beq.n	8003b3c <HAL_ADC_IRQHandler+0x130>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a53      	ldr	r2, [pc, #332]	; (8003c7c <HAL_ADC_IRQHandler+0x270>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d002      	beq.n	8003b38 <HAL_ADC_IRQHandler+0x12c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	e003      	b.n	8003b40 <HAL_ADC_IRQHandler+0x134>
 8003b38:	4b51      	ldr	r3, [pc, #324]	; (8003c80 <HAL_ADC_IRQHandler+0x274>)
 8003b3a:	e001      	b.n	8003b40 <HAL_ADC_IRQHandler+0x134>
 8003b3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b40:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d135      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d12e      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fc9b 	bl	80034a0 <LL_ADC_REG_IsConversionOngoing>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11a      	bne.n	8003ba6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 020c 	bic.w	r2, r2, #12
 8003b7e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d112      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ba4:	e00b      	b.n	8003bbe <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003baa:	f043 0210 	orr.w	r2, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f984 	bl	8003ecc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	220c      	movs	r2, #12
 8003bca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d004      	beq.n	8003be0 <HAL_ADC_IRQHandler+0x1d4>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10b      	bne.n	8003bf8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80b3 	beq.w	8003d52 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80ad 	beq.w	8003d52 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fb14 	bl	8003242 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003c1a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff facf 	bl	80031c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c26:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a10      	ldr	r2, [pc, #64]	; (8003c70 <HAL_ADC_IRQHandler+0x264>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d009      	beq.n	8003c46 <HAL_ADC_IRQHandler+0x23a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <HAL_ADC_IRQHandler+0x270>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d002      	beq.n	8003c42 <HAL_ADC_IRQHandler+0x236>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	e003      	b.n	8003c4a <HAL_ADC_IRQHandler+0x23e>
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <HAL_ADC_IRQHandler+0x274>)
 8003c44:	e001      	b.n	8003c4a <HAL_ADC_IRQHandler+0x23e>
 8003c46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d008      	beq.n	8003c64 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2b06      	cmp	r3, #6
 8003c5c:	d002      	beq.n	8003c64 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b07      	cmp	r3, #7
 8003c62:	d10f      	bne.n	8003c84 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	623b      	str	r3, [r7, #32]
 8003c6c:	e01f      	b.n	8003cae <HAL_ADC_IRQHandler+0x2a2>
 8003c6e:	bf00      	nop
 8003c70:	50000100 	.word	0x50000100
 8003c74:	50000300 	.word	0x50000300
 8003c78:	50000700 	.word	0x50000700
 8003c7c:	50000500 	.word	0x50000500
 8003c80:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a8b      	ldr	r2, [pc, #556]	; (8003eb8 <HAL_ADC_IRQHandler+0x4ac>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d009      	beq.n	8003ca2 <HAL_ADC_IRQHandler+0x296>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a8a      	ldr	r2, [pc, #552]	; (8003ebc <HAL_ADC_IRQHandler+0x4b0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d002      	beq.n	8003c9e <HAL_ADC_IRQHandler+0x292>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	e003      	b.n	8003ca6 <HAL_ADC_IRQHandler+0x29a>
 8003c9e:	4b88      	ldr	r3, [pc, #544]	; (8003ec0 <HAL_ADC_IRQHandler+0x4b4>)
 8003ca0:	e001      	b.n	8003ca6 <HAL_ADC_IRQHandler+0x29a>
 8003ca2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ca6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d047      	beq.n	8003d44 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <HAL_ADC_IRQHandler+0x2c2>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d03f      	beq.n	8003d44 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d13a      	bne.n	8003d44 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	d133      	bne.n	8003d44 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d12e      	bne.n	8003d44 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fbeb 	bl	80034c6 <LL_ADC_INJ_IsConversionOngoing>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11a      	bne.n	8003d2c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d04:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d112      	bne.n	8003d44 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d22:	f043 0201 	orr.w	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d2a:	e00b      	b.n	8003d44 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	f043 0210 	orr.w	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3c:	f043 0201 	orr.w	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 ff67 	bl	8004c18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2260      	movs	r2, #96	; 0x60
 8003d50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d011      	beq.n	8003d80 <HAL_ADC_IRQHandler+0x374>
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00c      	beq.n	8003d80 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f8be 	bl	8003ef4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2280      	movs	r2, #128	; 0x80
 8003d7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d012      	beq.n	8003db0 <HAL_ADC_IRQHandler+0x3a4>
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 ff4d 	bl	8004c40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d012      	beq.n	8003de0 <HAL_ADC_IRQHandler+0x3d4>
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00d      	beq.n	8003de0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 ff3f 	bl	8004c54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d043      	beq.n	8003e72 <HAL_ADC_IRQHandler+0x466>
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d03e      	beq.n	8003e72 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d102      	bne.n	8003e02 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003e00:	e021      	b.n	8003e46 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d015      	beq.n	8003e34 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e10:	d004      	beq.n	8003e1c <HAL_ADC_IRQHandler+0x410>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a28      	ldr	r2, [pc, #160]	; (8003eb8 <HAL_ADC_IRQHandler+0x4ac>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_ADC_IRQHandler+0x414>
 8003e1c:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <HAL_ADC_IRQHandler+0x4b8>)
 8003e1e:	e000      	b.n	8003e22 <HAL_ADC_IRQHandler+0x416>
 8003e20:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <HAL_ADC_IRQHandler+0x4bc>)
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fa7e 	bl	8003324 <LL_ADC_GetMultiDMATransfer>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
 8003e32:	e008      	b.n	8003e46 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003e42:	2301      	movs	r3, #1
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d10e      	bne.n	8003e6a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5c:	f043 0202 	orr.w	r2, r3, #2
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f84f 	bl	8003f08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2210      	movs	r2, #16
 8003e70:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d018      	beq.n	8003eae <HAL_ADC_IRQHandler+0x4a2>
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d013      	beq.n	8003eae <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e96:	f043 0208 	orr.w	r2, r3, #8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ea6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 febf 	bl	8004c2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003eae:	bf00      	nop
 8003eb0:	3728      	adds	r7, #40	; 0x28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	50000100 	.word	0x50000100
 8003ebc:	50000500 	.word	0x50000500
 8003ec0:	50000400 	.word	0x50000400
 8003ec4:	50000300 	.word	0x50000300
 8003ec8:	50000700 	.word	0x50000700

08003ecc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b0b6      	sub	sp, #216	; 0xd8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x24>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	f000 bc13 	b.w	8004766 <HAL_ADC_ConfigChannel+0x84a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff faa7 	bl	80034a0 <LL_ADC_REG_IsConversionOngoing>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 83f3 	bne.w	8004740 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f7ff f93f 	bl	80031ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff fa95 	bl	80034a0 <LL_ADC_REG_IsConversionOngoing>
 8003f76:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff faa1 	bl	80034c6 <LL_ADC_INJ_IsConversionOngoing>
 8003f84:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f040 81d9 	bne.w	8004344 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 81d4 	bne.w	8004344 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fa4:	d10f      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f7ff f959 	bl	8003268 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff f8ed 	bl	800319e <LL_ADC_SetSamplingTimeCommonConfig>
 8003fc4:	e00e      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6819      	ldr	r1, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f7ff f948 	bl	8003268 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff f8dd 	bl	800319e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	08db      	lsrs	r3, r3, #3
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b04      	cmp	r3, #4
 8004004:	d022      	beq.n	800404c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6919      	ldr	r1, [r3, #16]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004016:	f7ff f837 	bl	8003088 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6919      	ldr	r1, [r3, #16]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	461a      	mov	r2, r3
 8004028:	f7ff f883 	bl	8003132 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004038:	2b01      	cmp	r3, #1
 800403a:	d102      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x126>
 800403c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004040:	e000      	b.n	8004044 <HAL_ADC_ConfigChannel+0x128>
 8004042:	2300      	movs	r3, #0
 8004044:	461a      	mov	r2, r3
 8004046:	f7ff f88f 	bl	8003168 <LL_ADC_SetOffsetSaturation>
 800404a:	e17b      	b.n	8004344 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff f83c 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 8004058:	4603      	mov	r3, r0
 800405a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x15c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff f831 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 800406e:	4603      	mov	r3, r0
 8004070:	0e9b      	lsrs	r3, r3, #26
 8004072:	f003 021f 	and.w	r2, r3, #31
 8004076:	e01e      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x19a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff f826 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 8004084:	4603      	mov	r3, r0
 8004086:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800408e:	fa93 f3a3 	rbit	r3, r3
 8004092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004096:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800409a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800409e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80040a6:	2320      	movs	r3, #32
 80040a8:	e004      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80040aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d105      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x1b2>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	0e9b      	lsrs	r3, r3, #26
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	e018      	b.n	8004100 <HAL_ADC_ConfigChannel+0x1e4>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80040e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80040ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80040f2:	2320      	movs	r3, #32
 80040f4:	e004      	b.n	8004100 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80040f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004100:	429a      	cmp	r2, r3
 8004102:	d106      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2200      	movs	r2, #0
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f7fe fff5 	bl	80030fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe ffd9 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 800411e:	4603      	mov	r3, r0
 8004120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <HAL_ADC_ConfigChannel+0x222>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2101      	movs	r1, #1
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe ffce 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 8004134:	4603      	mov	r3, r0
 8004136:	0e9b      	lsrs	r3, r3, #26
 8004138:	f003 021f 	and.w	r2, r3, #31
 800413c:	e01e      	b.n	800417c <HAL_ADC_ConfigChannel+0x260>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2101      	movs	r1, #1
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe ffc3 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 800414a:	4603      	mov	r3, r0
 800414c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800415c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800416c:	2320      	movs	r3, #32
 800416e:	e004      	b.n	800417a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004170:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004174:	fab3 f383 	clz	r3, r3
 8004178:	b2db      	uxtb	r3, r3
 800417a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004184:	2b00      	cmp	r3, #0
 8004186:	d105      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x278>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	0e9b      	lsrs	r3, r3, #26
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	e018      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x2aa>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041a0:	fa93 f3a3 	rbit	r3, r3
 80041a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80041a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80041ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80041b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80041b8:	2320      	movs	r3, #32
 80041ba:	e004      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80041bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d106      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2200      	movs	r2, #0
 80041d0:	2101      	movs	r1, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe ff92 	bl	80030fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe ff76 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x2e8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2102      	movs	r1, #2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe ff6b 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	0e9b      	lsrs	r3, r3, #26
 80041fe:	f003 021f 	and.w	r2, r3, #31
 8004202:	e01e      	b.n	8004242 <HAL_ADC_ConfigChannel+0x326>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2102      	movs	r1, #2
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe ff60 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 8004210:	4603      	mov	r3, r0
 8004212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004222:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800422a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004232:	2320      	movs	r3, #32
 8004234:	e004      	b.n	8004240 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424a:	2b00      	cmp	r3, #0
 800424c:	d105      	bne.n	800425a <HAL_ADC_ConfigChannel+0x33e>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	0e9b      	lsrs	r3, r3, #26
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	e016      	b.n	8004288 <HAL_ADC_ConfigChannel+0x36c>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800426c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800426e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800427a:	2320      	movs	r3, #32
 800427c:	e004      	b.n	8004288 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800427e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004288:	429a      	cmp	r2, r3
 800428a:	d106      	bne.n	800429a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2200      	movs	r2, #0
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f7fe ff31 	bl	80030fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2103      	movs	r1, #3
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe ff15 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x3aa>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2103      	movs	r1, #3
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fe ff0a 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 80042bc:	4603      	mov	r3, r0
 80042be:	0e9b      	lsrs	r3, r3, #26
 80042c0:	f003 021f 	and.w	r2, r3, #31
 80042c4:	e017      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x3da>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2103      	movs	r1, #3
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe feff 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 80042d2:	4603      	mov	r3, r0
 80042d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d8:	fa93 f3a3 	rbit	r3, r3
 80042dc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80042de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042e0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80042e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80042e8:	2320      	movs	r3, #32
 80042ea:	e003      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80042ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d105      	bne.n	800430e <HAL_ADC_ConfigChannel+0x3f2>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	0e9b      	lsrs	r3, r3, #26
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	e011      	b.n	8004332 <HAL_ADC_ConfigChannel+0x416>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004316:	fa93 f3a3 	rbit	r3, r3
 800431a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800431c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800431e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004326:	2320      	movs	r3, #32
 8004328:	e003      	b.n	8004332 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800432a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432c:	fab3 f383 	clz	r3, r3
 8004330:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004332:	429a      	cmp	r2, r3
 8004334:	d106      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	2103      	movs	r1, #3
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fedc 	bl	80030fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff f86f 	bl	800342c <LL_ADC_IsEnabled>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	f040 813d 	bne.w	80045d0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6819      	ldr	r1, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	461a      	mov	r2, r3
 8004364:	f7fe ffac 	bl	80032c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4aa2      	ldr	r2, [pc, #648]	; (80045f8 <HAL_ADC_ConfigChannel+0x6dc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	f040 812e 	bne.w	80045d0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <HAL_ADC_ConfigChannel+0x480>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	0e9b      	lsrs	r3, r3, #26
 800438a:	3301      	adds	r3, #1
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	2b09      	cmp	r3, #9
 8004392:	bf94      	ite	ls
 8004394:	2301      	movls	r3, #1
 8004396:	2300      	movhi	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	e019      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x4b4>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80043aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80043ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80043b4:	2320      	movs	r3, #32
 80043b6:	e003      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80043b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	bf94      	ite	ls
 80043ca:	2301      	movls	r3, #1
 80043cc:	2300      	movhi	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d079      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d107      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x4d4>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	0e9b      	lsrs	r3, r3, #26
 80043e6:	3301      	adds	r3, #1
 80043e8:	069b      	lsls	r3, r3, #26
 80043ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043ee:	e015      	b.n	800441c <HAL_ADC_ConfigChannel+0x500>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f8:	fa93 f3a3 	rbit	r3, r3
 80043fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004400:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004408:	2320      	movs	r3, #32
 800440a:	e003      	b.n	8004414 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800440c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	3301      	adds	r3, #1
 8004416:	069b      	lsls	r3, r3, #26
 8004418:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004424:	2b00      	cmp	r3, #0
 8004426:	d109      	bne.n	800443c <HAL_ADC_ConfigChannel+0x520>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	0e9b      	lsrs	r3, r3, #26
 800442e:	3301      	adds	r3, #1
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	2101      	movs	r1, #1
 8004436:	fa01 f303 	lsl.w	r3, r1, r3
 800443a:	e017      	b.n	800446c <HAL_ADC_ConfigChannel+0x550>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800444a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800444e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e003      	b.n	8004460 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	3301      	adds	r3, #1
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2101      	movs	r1, #1
 8004468:	fa01 f303 	lsl.w	r3, r1, r3
 800446c:	ea42 0103 	orr.w	r1, r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x576>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	0e9b      	lsrs	r3, r3, #26
 8004482:	3301      	adds	r3, #1
 8004484:	f003 021f 	and.w	r2, r3, #31
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	051b      	lsls	r3, r3, #20
 8004490:	e018      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x5a8>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80044a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80044a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80044aa:	2320      	movs	r3, #32
 80044ac:	e003      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80044ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b0:	fab3 f383 	clz	r3, r3
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	3301      	adds	r3, #1
 80044b8:	f003 021f 	and.w	r2, r3, #31
 80044bc:	4613      	mov	r3, r2
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	4413      	add	r3, r2
 80044c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044c4:	430b      	orrs	r3, r1
 80044c6:	e07e      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d107      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x5c8>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	0e9b      	lsrs	r3, r3, #26
 80044da:	3301      	adds	r3, #1
 80044dc:	069b      	lsls	r3, r3, #26
 80044de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044e2:	e015      	b.n	8004510 <HAL_ADC_ConfigChannel+0x5f4>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ec:	fa93 f3a3 	rbit	r3, r3
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80044fc:	2320      	movs	r3, #32
 80044fe:	e003      	b.n	8004508 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	fab3 f383 	clz	r3, r3
 8004506:	b2db      	uxtb	r3, r3
 8004508:	3301      	adds	r3, #1
 800450a:	069b      	lsls	r3, r3, #26
 800450c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x614>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	0e9b      	lsrs	r3, r3, #26
 8004522:	3301      	adds	r3, #1
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	2101      	movs	r1, #1
 800452a:	fa01 f303 	lsl.w	r3, r1, r3
 800452e:	e017      	b.n	8004560 <HAL_ADC_ConfigChannel+0x644>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	fa93 f3a3 	rbit	r3, r3
 800453c:	61fb      	str	r3, [r7, #28]
  return result;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004548:	2320      	movs	r3, #32
 800454a:	e003      	b.n	8004554 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	fab3 f383 	clz	r3, r3
 8004552:	b2db      	uxtb	r3, r3
 8004554:	3301      	adds	r3, #1
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	2101      	movs	r1, #1
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	ea42 0103 	orr.w	r1, r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10d      	bne.n	800458c <HAL_ADC_ConfigChannel+0x670>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	0e9b      	lsrs	r3, r3, #26
 8004576:	3301      	adds	r3, #1
 8004578:	f003 021f 	and.w	r2, r3, #31
 800457c:	4613      	mov	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4413      	add	r3, r2
 8004582:	3b1e      	subs	r3, #30
 8004584:	051b      	lsls	r3, r3, #20
 8004586:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800458a:	e01b      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x6a8>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	fa93 f3a3 	rbit	r3, r3
 8004598:	613b      	str	r3, [r7, #16]
  return result;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80045a4:	2320      	movs	r3, #32
 80045a6:	e003      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	3301      	adds	r3, #1
 80045b2:	f003 021f 	and.w	r2, r3, #31
 80045b6:	4613      	mov	r3, r2
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	4413      	add	r3, r2
 80045bc:	3b1e      	subs	r3, #30
 80045be:	051b      	lsls	r3, r3, #20
 80045c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ca:	4619      	mov	r1, r3
 80045cc:	f7fe fe4c 	bl	8003268 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_ADC_ConfigChannel+0x6e0>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80be 	beq.w	800475a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045e6:	d004      	beq.n	80045f2 <HAL_ADC_ConfigChannel+0x6d6>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a04      	ldr	r2, [pc, #16]	; (8004600 <HAL_ADC_ConfigChannel+0x6e4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10a      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x6ec>
 80045f2:	4b04      	ldr	r3, [pc, #16]	; (8004604 <HAL_ADC_ConfigChannel+0x6e8>)
 80045f4:	e009      	b.n	800460a <HAL_ADC_ConfigChannel+0x6ee>
 80045f6:	bf00      	nop
 80045f8:	407f0000 	.word	0x407f0000
 80045fc:	80080000 	.word	0x80080000
 8004600:	50000100 	.word	0x50000100
 8004604:	50000300 	.word	0x50000300
 8004608:	4b59      	ldr	r3, [pc, #356]	; (8004770 <HAL_ADC_ConfigChannel+0x854>)
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe fd2e 	bl	800306c <LL_ADC_GetCommonPathInternalCh>
 8004610:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a56      	ldr	r2, [pc, #344]	; (8004774 <HAL_ADC_ConfigChannel+0x858>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_ADC_ConfigChannel+0x70c>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a55      	ldr	r2, [pc, #340]	; (8004778 <HAL_ADC_ConfigChannel+0x85c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d13a      	bne.n	800469e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800462c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d134      	bne.n	800469e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800463c:	d005      	beq.n	800464a <HAL_ADC_ConfigChannel+0x72e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a4e      	ldr	r2, [pc, #312]	; (800477c <HAL_ADC_ConfigChannel+0x860>)
 8004644:	4293      	cmp	r3, r2
 8004646:	f040 8085 	bne.w	8004754 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004652:	d004      	beq.n	800465e <HAL_ADC_ConfigChannel+0x742>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a49      	ldr	r2, [pc, #292]	; (8004780 <HAL_ADC_ConfigChannel+0x864>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d101      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x746>
 800465e:	4a49      	ldr	r2, [pc, #292]	; (8004784 <HAL_ADC_ConfigChannel+0x868>)
 8004660:	e000      	b.n	8004664 <HAL_ADC_ConfigChannel+0x748>
 8004662:	4a43      	ldr	r2, [pc, #268]	; (8004770 <HAL_ADC_ConfigChannel+0x854>)
 8004664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f7fe fce9 	bl	8003046 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004674:	4b44      	ldr	r3, [pc, #272]	; (8004788 <HAL_ADC_ConfigChannel+0x86c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	4a44      	ldr	r2, [pc, #272]	; (800478c <HAL_ADC_ConfigChannel+0x870>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	099b      	lsrs	r3, r3, #6
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	4613      	mov	r3, r2
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800468e:	e002      	b.n	8004696 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3b01      	subs	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f9      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800469c:	e05a      	b.n	8004754 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a3b      	ldr	r2, [pc, #236]	; (8004790 <HAL_ADC_ConfigChannel+0x874>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d125      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d11f      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a31      	ldr	r2, [pc, #196]	; (8004780 <HAL_ADC_ConfigChannel+0x864>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d104      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x7ac>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a34      	ldr	r2, [pc, #208]	; (8004794 <HAL_ADC_ConfigChannel+0x878>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d047      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046d0:	d004      	beq.n	80046dc <HAL_ADC_ConfigChannel+0x7c0>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a2a      	ldr	r2, [pc, #168]	; (8004780 <HAL_ADC_ConfigChannel+0x864>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x7c4>
 80046dc:	4a29      	ldr	r2, [pc, #164]	; (8004784 <HAL_ADC_ConfigChannel+0x868>)
 80046de:	e000      	b.n	80046e2 <HAL_ADC_ConfigChannel+0x7c6>
 80046e0:	4a23      	ldr	r2, [pc, #140]	; (8004770 <HAL_ADC_ConfigChannel+0x854>)
 80046e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f7fe fcaa 	bl	8003046 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046f2:	e031      	b.n	8004758 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a27      	ldr	r2, [pc, #156]	; (8004798 <HAL_ADC_ConfigChannel+0x87c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d12d      	bne.n	800475a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d127      	bne.n	800475a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <HAL_ADC_ConfigChannel+0x864>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d022      	beq.n	800475a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800471c:	d004      	beq.n	8004728 <HAL_ADC_ConfigChannel+0x80c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a17      	ldr	r2, [pc, #92]	; (8004780 <HAL_ADC_ConfigChannel+0x864>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_ADC_ConfigChannel+0x810>
 8004728:	4a16      	ldr	r2, [pc, #88]	; (8004784 <HAL_ADC_ConfigChannel+0x868>)
 800472a:	e000      	b.n	800472e <HAL_ADC_ConfigChannel+0x812>
 800472c:	4a10      	ldr	r2, [pc, #64]	; (8004770 <HAL_ADC_ConfigChannel+0x854>)
 800472e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004732:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7fe fc84 	bl	8003046 <LL_ADC_SetCommonPathInternalCh>
 800473e:	e00c      	b.n	800475a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004752:	e002      	b.n	800475a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004754:	bf00      	nop
 8004756:	e000      	b.n	800475a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004758:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004762:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004766:	4618      	mov	r0, r3
 8004768:	37d8      	adds	r7, #216	; 0xd8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	50000700 	.word	0x50000700
 8004774:	c3210000 	.word	0xc3210000
 8004778:	90c00010 	.word	0x90c00010
 800477c:	50000600 	.word	0x50000600
 8004780:	50000100 	.word	0x50000100
 8004784:	50000300 	.word	0x50000300
 8004788:	2000000c 	.word	0x2000000c
 800478c:	053e2d63 	.word	0x053e2d63
 8004790:	c7520000 	.word	0xc7520000
 8004794:	50000500 	.word	0x50000500
 8004798:	cb840000 	.word	0xcb840000

0800479c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe fe3d 	bl	800342c <LL_ADC_IsEnabled>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d176      	bne.n	80048a6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	4b3c      	ldr	r3, [pc, #240]	; (80048b0 <ADC_Enable+0x114>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ca:	f043 0210 	orr.w	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d6:	f043 0201 	orr.w	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e062      	b.n	80048a8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe fdf8 	bl	80033dc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047f4:	d004      	beq.n	8004800 <ADC_Enable+0x64>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2e      	ldr	r2, [pc, #184]	; (80048b4 <ADC_Enable+0x118>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d101      	bne.n	8004804 <ADC_Enable+0x68>
 8004800:	4b2d      	ldr	r3, [pc, #180]	; (80048b8 <ADC_Enable+0x11c>)
 8004802:	e000      	b.n	8004806 <ADC_Enable+0x6a>
 8004804:	4b2d      	ldr	r3, [pc, #180]	; (80048bc <ADC_Enable+0x120>)
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fc30 	bl	800306c <LL_ADC_GetCommonPathInternalCh>
 800480c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800480e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004812:	2b00      	cmp	r3, #0
 8004814:	d013      	beq.n	800483e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004816:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <ADC_Enable+0x124>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	099b      	lsrs	r3, r3, #6
 800481c:	4a29      	ldr	r2, [pc, #164]	; (80048c4 <ADC_Enable+0x128>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	4613      	mov	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004830:	e002      	b.n	8004838 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	3b01      	subs	r3, #1
 8004836:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f9      	bne.n	8004832 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800483e:	f7fe fbc1 	bl	8002fc4 <HAL_GetTick>
 8004842:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004844:	e028      	b.n	8004898 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7fe fdee 	bl	800342c <LL_ADC_IsEnabled>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d104      	bne.n	8004860 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7fe fdbe 	bl	80033dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004860:	f7fe fbb0 	bl	8002fc4 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d914      	bls.n	8004898 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b01      	cmp	r3, #1
 800487a:	d00d      	beq.n	8004898 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004880:	f043 0210 	orr.w	r2, r3, #16
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488c:	f043 0201 	orr.w	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e007      	b.n	80048a8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d1cf      	bne.n	8004846 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	8000003f 	.word	0x8000003f
 80048b4:	50000100 	.word	0x50000100
 80048b8:	50000300 	.word	0x50000300
 80048bc:	50000700 	.word	0x50000700
 80048c0:	2000000c 	.word	0x2000000c
 80048c4:	053e2d63 	.word	0x053e2d63

080048c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe fdbc 	bl	8003452 <LL_ADC_IsDisableOngoing>
 80048da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe fda3 	bl	800342c <LL_ADC_IsEnabled>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d047      	beq.n	800497c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d144      	bne.n	800497c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 030d 	and.w	r3, r3, #13
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10c      	bne.n	800491a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f7fe fd7d 	bl	8003404 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2203      	movs	r2, #3
 8004910:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004912:	f7fe fb57 	bl	8002fc4 <HAL_GetTick>
 8004916:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004918:	e029      	b.n	800496e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	f043 0210 	orr.w	r2, r3, #16
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492a:	f043 0201 	orr.w	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e023      	b.n	800497e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004936:	f7fe fb45 	bl	8002fc4 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d914      	bls.n	800496e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e007      	b.n	800497e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1dc      	bne.n	8004936 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800499c:	2b00      	cmp	r3, #0
 800499e:	d14b      	bne.n	8004a38 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d021      	beq.n	80049fe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe fc00 	bl	80031c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d032      	beq.n	8004a30 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d12b      	bne.n	8004a30 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d11f      	bne.n	8004a30 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	f043 0201 	orr.w	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80049fc:	e018      	b.n	8004a30 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d111      	bne.n	8004a30 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	f043 0201 	orr.w	r2, r3, #1
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7ff fa4b 	bl	8003ecc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a36:	e00e      	b.n	8004a56 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3c:	f003 0310 	and.w	r3, r3, #16
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff fa5f 	bl	8003f08 <HAL_ADC_ErrorCallback>
}
 8004a4a:	e004      	b.n	8004a56 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fa37 	bl	8003ee0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a98:	f043 0204 	orr.w	r2, r3, #4
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7ff fa31 	bl	8003f08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <LL_ADC_IsEnabled>:
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <LL_ADC_IsEnabled+0x18>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <LL_ADC_IsEnabled+0x1a>
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_ADC_StartCalibration>:
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004ae6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	609a      	str	r2, [r3, #8]
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <LL_ADC_IsCalibrationOnGoing>:
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b1a:	d101      	bne.n	8004b20 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <LL_ADC_REG_IsConversionOngoing>:
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d101      	bne.n	8004b46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_ADCEx_Calibration_Start+0x1c>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e04d      	b.n	8004c0c <HAL_ADCEx_Calibration_Start+0xb8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff fea5 	bl	80048c8 <ADC_Disable>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d136      	bne.n	8004bf6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b90:	f023 0302 	bic.w	r3, r3, #2
 8004b94:	f043 0202 	orr.w	r2, r3, #2
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6839      	ldr	r1, [r7, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff ff96 	bl	8004ad4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ba8:	e014      	b.n	8004bd4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	3301      	adds	r3, #1
 8004bae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4a18      	ldr	r2, [pc, #96]	; (8004c14 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d90d      	bls.n	8004bd4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbc:	f023 0312 	bic.w	r3, r3, #18
 8004bc0:	f043 0210 	orr.w	r2, r3, #16
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e01b      	b.n	8004c0c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff ff94 	bl	8004b06 <LL_ADC_IsCalibrationOnGoing>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e2      	bne.n	8004baa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be8:	f023 0303 	bic.w	r3, r3, #3
 8004bec:	f043 0201 	orr.w	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bf4:	e005      	b.n	8004c02 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfa:	f043 0210 	orr.w	r2, r3, #16
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	0004de01 	.word	0x0004de01

08004c18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b0a1      	sub	sp, #132	; 0x84
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e0e7      	b.n	8004e6a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cb2:	d102      	bne.n	8004cba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004cb4:	4b6f      	ldr	r3, [pc, #444]	; (8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	e009      	b.n	8004cce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a6e      	ldr	r2, [pc, #440]	; (8004e78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d102      	bne.n	8004cca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004cc4:	4b6d      	ldr	r3, [pc, #436]	; (8004e7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	e001      	b.n	8004cce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0be      	b.n	8004e6a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff ff1d 	bl	8004b2e <LL_ADC_REG_IsConversionOngoing>
 8004cf4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ff17 	bl	8004b2e <LL_ADC_REG_IsConversionOngoing>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f040 80a0 	bne.w	8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f040 809c 	bne.w	8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d18:	d004      	beq.n	8004d24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a55      	ldr	r2, [pc, #340]	; (8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d101      	bne.n	8004d28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004d24:	4b56      	ldr	r3, [pc, #344]	; (8004e80 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004d26:	e000      	b.n	8004d2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004d28:	4b56      	ldr	r3, [pc, #344]	; (8004e84 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004d2a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d04b      	beq.n	8004dcc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d46:	035b      	lsls	r3, r3, #13
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d58:	d004      	beq.n	8004d64 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a45      	ldr	r2, [pc, #276]	; (8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d10f      	bne.n	8004d84 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004d64:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d68:	f7ff fea1 	bl	8004aae <LL_ADC_IsEnabled>
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	4841      	ldr	r0, [pc, #260]	; (8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d70:	f7ff fe9d 	bl	8004aae <LL_ADC_IsEnabled>
 8004d74:	4603      	mov	r3, r0
 8004d76:	4323      	orrs	r3, r4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	e012      	b.n	8004daa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004d84:	483c      	ldr	r0, [pc, #240]	; (8004e78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004d86:	f7ff fe92 	bl	8004aae <LL_ADC_IsEnabled>
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	483b      	ldr	r0, [pc, #236]	; (8004e7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004d8e:	f7ff fe8e 	bl	8004aae <LL_ADC_IsEnabled>
 8004d92:	4603      	mov	r3, r0
 8004d94:	431c      	orrs	r4, r3
 8004d96:	483c      	ldr	r0, [pc, #240]	; (8004e88 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004d98:	f7ff fe89 	bl	8004aae <LL_ADC_IsEnabled>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4323      	orrs	r3, r4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d056      	beq.n	8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004db6:	f023 030f 	bic.w	r3, r3, #15
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	6811      	ldr	r1, [r2, #0]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	6892      	ldr	r2, [r2, #8]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004dca:	e047      	b.n	8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de0:	d004      	beq.n	8004dec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a23      	ldr	r2, [pc, #140]	; (8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d10f      	bne.n	8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004dec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004df0:	f7ff fe5d 	bl	8004aae <LL_ADC_IsEnabled>
 8004df4:	4604      	mov	r4, r0
 8004df6:	481f      	ldr	r0, [pc, #124]	; (8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004df8:	f7ff fe59 	bl	8004aae <LL_ADC_IsEnabled>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4323      	orrs	r3, r4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e012      	b.n	8004e32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004e0c:	481a      	ldr	r0, [pc, #104]	; (8004e78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004e0e:	f7ff fe4e 	bl	8004aae <LL_ADC_IsEnabled>
 8004e12:	4604      	mov	r4, r0
 8004e14:	4819      	ldr	r0, [pc, #100]	; (8004e7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004e16:	f7ff fe4a 	bl	8004aae <LL_ADC_IsEnabled>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	431c      	orrs	r4, r3
 8004e1e:	481a      	ldr	r0, [pc, #104]	; (8004e88 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004e20:	f7ff fe45 	bl	8004aae <LL_ADC_IsEnabled>
 8004e24:	4603      	mov	r3, r0
 8004e26:	4323      	orrs	r3, r4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf0c      	ite	eq
 8004e2c:	2301      	moveq	r3, #1
 8004e2e:	2300      	movne	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d012      	beq.n	8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004e3e:	f023 030f 	bic.w	r3, r3, #15
 8004e42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e44:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e46:	e009      	b.n	8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4c:	f043 0220 	orr.w	r2, r3, #32
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004e5a:	e000      	b.n	8004e5e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3784      	adds	r7, #132	; 0x84
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd90      	pop	{r4, r7, pc}
 8004e72:	bf00      	nop
 8004e74:	50000100 	.word	0x50000100
 8004e78:	50000400 	.word	0x50000400
 8004e7c:	50000500 	.word	0x50000500
 8004e80:	50000300 	.word	0x50000300
 8004e84:	50000700 	.word	0x50000700
 8004e88:	50000600 	.word	0x50000600

08004e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ebe:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	60d3      	str	r3, [r2, #12]
}
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	e000ed00 	.word	0xe000ed00

08004ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ed8:	4b04      	ldr	r3, [pc, #16]	; (8004eec <__NVIC_GetPriorityGrouping+0x18>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	0a1b      	lsrs	r3, r3, #8
 8004ede:	f003 0307 	and.w	r3, r3, #7
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	db0b      	blt.n	8004f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	f003 021f 	and.w	r2, r3, #31
 8004f08:	4907      	ldr	r1, [pc, #28]	; (8004f28 <__NVIC_EnableIRQ+0x38>)
 8004f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	2001      	movs	r0, #1
 8004f12:	fa00 f202 	lsl.w	r2, r0, r2
 8004f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	e000e100 	.word	0xe000e100

08004f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	6039      	str	r1, [r7, #0]
 8004f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	db0a      	blt.n	8004f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	490c      	ldr	r1, [pc, #48]	; (8004f78 <__NVIC_SetPriority+0x4c>)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	0112      	lsls	r2, r2, #4
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	440b      	add	r3, r1
 8004f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f54:	e00a      	b.n	8004f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	4908      	ldr	r1, [pc, #32]	; (8004f7c <__NVIC_SetPriority+0x50>)
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	3b04      	subs	r3, #4
 8004f64:	0112      	lsls	r2, r2, #4
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	440b      	add	r3, r1
 8004f6a:	761a      	strb	r2, [r3, #24]
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	e000e100 	.word	0xe000e100
 8004f7c:	e000ed00 	.word	0xe000ed00

08004f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b089      	sub	sp, #36	; 0x24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f1c3 0307 	rsb	r3, r3, #7
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	bf28      	it	cs
 8004f9e:	2304      	movcs	r3, #4
 8004fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	2b06      	cmp	r3, #6
 8004fa8:	d902      	bls.n	8004fb0 <NVIC_EncodePriority+0x30>
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	3b03      	subs	r3, #3
 8004fae:	e000      	b.n	8004fb2 <NVIC_EncodePriority+0x32>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	43da      	mvns	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	401a      	ands	r2, r3
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd2:	43d9      	mvns	r1, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fd8:	4313      	orrs	r3, r2
         );
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3724      	adds	r7, #36	; 0x24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ff8:	d301      	bcc.n	8004ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e00f      	b.n	800501e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ffe:	4a0a      	ldr	r2, [pc, #40]	; (8005028 <SysTick_Config+0x40>)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3b01      	subs	r3, #1
 8005004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005006:	210f      	movs	r1, #15
 8005008:	f04f 30ff 	mov.w	r0, #4294967295
 800500c:	f7ff ff8e 	bl	8004f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <SysTick_Config+0x40>)
 8005012:	2200      	movs	r2, #0
 8005014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005016:	4b04      	ldr	r3, [pc, #16]	; (8005028 <SysTick_Config+0x40>)
 8005018:	2207      	movs	r2, #7
 800501a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	e000e010 	.word	0xe000e010

0800502c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff ff29 	bl	8004e8c <__NVIC_SetPriorityGrouping>
}
 800503a:	bf00      	nop
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b086      	sub	sp, #24
 8005046:	af00      	add	r7, sp, #0
 8005048:	4603      	mov	r3, r0
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005050:	f7ff ff40 	bl	8004ed4 <__NVIC_GetPriorityGrouping>
 8005054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68b9      	ldr	r1, [r7, #8]
 800505a:	6978      	ldr	r0, [r7, #20]
 800505c:	f7ff ff90 	bl	8004f80 <NVIC_EncodePriority>
 8005060:	4602      	mov	r2, r0
 8005062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005066:	4611      	mov	r1, r2
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff ff5f 	bl	8004f2c <__NVIC_SetPriority>
}
 800506e:	bf00      	nop
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	4603      	mov	r3, r0
 800507e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff ff33 	bl	8004ef0 <__NVIC_EnableIRQ>
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff ffa4 	bl	8004fe8 <SysTick_Config>
 80050a0:	4603      	mov	r3, r0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e08d      	b.n	80051da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	4b47      	ldr	r3, [pc, #284]	; (80051e4 <HAL_DMA_Init+0x138>)
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d80f      	bhi.n	80050ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	4b45      	ldr	r3, [pc, #276]	; (80051e8 <HAL_DMA_Init+0x13c>)
 80050d2:	4413      	add	r3, r2
 80050d4:	4a45      	ldr	r2, [pc, #276]	; (80051ec <HAL_DMA_Init+0x140>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	009a      	lsls	r2, r3, #2
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a42      	ldr	r2, [pc, #264]	; (80051f0 <HAL_DMA_Init+0x144>)
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40
 80050e8:	e00e      	b.n	8005108 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	4b40      	ldr	r3, [pc, #256]	; (80051f4 <HAL_DMA_Init+0x148>)
 80050f2:	4413      	add	r3, r2
 80050f4:	4a3d      	ldr	r2, [pc, #244]	; (80051ec <HAL_DMA_Init+0x140>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	091b      	lsrs	r3, r3, #4
 80050fc:	009a      	lsls	r2, r3, #2
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a3c      	ldr	r2, [pc, #240]	; (80051f8 <HAL_DMA_Init+0x14c>)
 8005106:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800512c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9b6 	bl	80054cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005168:	d102      	bne.n	8005170 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005184:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d010      	beq.n	80051b0 <HAL_DMA_Init+0x104>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b04      	cmp	r3, #4
 8005194:	d80c      	bhi.n	80051b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f9d6 	bl	8005548 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	e008      	b.n	80051c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40020407 	.word	0x40020407
 80051e8:	bffdfff8 	.word	0xbffdfff8
 80051ec:	cccccccd 	.word	0xcccccccd
 80051f0:	40020000 	.word	0x40020000
 80051f4:	bffdfbf8 	.word	0xbffdfbf8
 80051f8:	40020400 	.word	0x40020400

080051fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_DMA_Start_IT+0x20>
 8005218:	2302      	movs	r3, #2
 800521a:	e066      	b.n	80052ea <HAL_DMA_Start_IT+0xee>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	d155      	bne.n	80052dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f8fb 	bl	8005450 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	2b00      	cmp	r3, #0
 8005260:	d008      	beq.n	8005274 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 020e 	orr.w	r2, r2, #14
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e00f      	b.n	8005294 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0204 	bic.w	r2, r2, #4
 8005282:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 020a 	orr.w	r2, r2, #10
 8005292:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e005      	b.n	80052e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80052e4:	2302      	movs	r3, #2
 80052e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2204      	movs	r2, #4
 8005314:	409a      	lsls	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4013      	ands	r3, r2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d026      	beq.n	800536c <HAL_DMA_IRQHandler+0x7a>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d021      	beq.n	800536c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b00      	cmp	r3, #0
 8005334:	d107      	bne.n	8005346 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0204 	bic.w	r2, r2, #4
 8005344:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	f003 021f 	and.w	r2, r3, #31
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	2104      	movs	r1, #4
 8005354:	fa01 f202 	lsl.w	r2, r1, r2
 8005358:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	2b00      	cmp	r3, #0
 8005360:	d071      	beq.n	8005446 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800536a:	e06c      	b.n	8005446 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005370:	f003 031f 	and.w	r3, r3, #31
 8005374:	2202      	movs	r2, #2
 8005376:	409a      	lsls	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d02e      	beq.n	80053de <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d029      	beq.n	80053de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10b      	bne.n	80053b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 020a 	bic.w	r2, r2, #10
 80053a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b4:	f003 021f 	and.w	r2, r3, #31
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	2102      	movs	r1, #2
 80053be:	fa01 f202 	lsl.w	r2, r1, r2
 80053c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d038      	beq.n	8005446 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80053dc:	e033      	b.n	8005446 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	2208      	movs	r2, #8
 80053e8:	409a      	lsls	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d02a      	beq.n	8005448 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d025      	beq.n	8005448 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 020e 	bic.w	r2, r2, #14
 800540a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005410:	f003 021f 	and.w	r2, r3, #31
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	2101      	movs	r1, #1
 800541a:	fa01 f202 	lsl.w	r2, r1, r2
 800541e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005446:	bf00      	nop
 8005448:	bf00      	nop
}
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005466:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005478:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	f003 021f 	and.w	r2, r3, #31
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2101      	movs	r1, #1
 8005488:	fa01 f202 	lsl.w	r2, r1, r2
 800548c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b10      	cmp	r3, #16
 800549c:	d108      	bne.n	80054b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80054ae:	e007      	b.n	80054c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	60da      	str	r2, [r3, #12]
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	4b16      	ldr	r3, [pc, #88]	; (8005534 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80054dc:	429a      	cmp	r2, r3
 80054de:	d802      	bhi.n	80054e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80054e0:	4b15      	ldr	r3, [pc, #84]	; (8005538 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	e001      	b.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80054e6:	4b15      	ldr	r3, [pc, #84]	; (800553c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80054e8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	3b08      	subs	r3, #8
 80054f6:	4a12      	ldr	r2, [pc, #72]	; (8005540 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005504:	089b      	lsrs	r3, r3, #2
 8005506:	009a      	lsls	r2, r3, #2
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4413      	add	r3, r2
 800550c:	461a      	mov	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a0b      	ldr	r2, [pc, #44]	; (8005544 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005516:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	2201      	movs	r2, #1
 8005520:	409a      	lsls	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40020407 	.word	0x40020407
 8005538:	40020800 	.word	0x40020800
 800553c:	40020820 	.word	0x40020820
 8005540:	cccccccd 	.word	0xcccccccd
 8005544:	40020880 	.word	0x40020880

08005548 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	461a      	mov	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a08      	ldr	r2, [pc, #32]	; (800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800556a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3b01      	subs	r3, #1
 8005570:	f003 031f 	and.w	r3, r3, #31
 8005574:	2201      	movs	r2, #1
 8005576:	409a      	lsls	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	1000823f 	.word	0x1000823f
 800558c:	40020940 	.word	0x40020940

08005590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800559a:	2300      	movs	r3, #0
 800559c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800559e:	e15a      	b.n	8005856 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	2101      	movs	r1, #1
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ac:	4013      	ands	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 814c 	beq.w	8005850 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d005      	beq.n	80055d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d130      	bne.n	8005632 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	2203      	movs	r2, #3
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4013      	ands	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005606:	2201      	movs	r2, #1
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	43db      	mvns	r3, r3
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4013      	ands	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	f003 0201 	and.w	r2, r3, #1
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b03      	cmp	r3, #3
 800563c:	d017      	beq.n	800566e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	2203      	movs	r2, #3
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43db      	mvns	r3, r3
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4013      	ands	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d123      	bne.n	80056c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	08da      	lsrs	r2, r3, #3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3208      	adds	r2, #8
 8005682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005686:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	220f      	movs	r2, #15
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4013      	ands	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	08da      	lsrs	r2, r3, #3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3208      	adds	r2, #8
 80056bc:	6939      	ldr	r1, [r7, #16]
 80056be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	2203      	movs	r2, #3
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4013      	ands	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 0203 	and.w	r2, r3, #3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 80a6 	beq.w	8005850 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005704:	4b5b      	ldr	r3, [pc, #364]	; (8005874 <HAL_GPIO_Init+0x2e4>)
 8005706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005708:	4a5a      	ldr	r2, [pc, #360]	; (8005874 <HAL_GPIO_Init+0x2e4>)
 800570a:	f043 0301 	orr.w	r3, r3, #1
 800570e:	6613      	str	r3, [r2, #96]	; 0x60
 8005710:	4b58      	ldr	r3, [pc, #352]	; (8005874 <HAL_GPIO_Init+0x2e4>)
 8005712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800571c:	4a56      	ldr	r2, [pc, #344]	; (8005878 <HAL_GPIO_Init+0x2e8>)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	089b      	lsrs	r3, r3, #2
 8005722:	3302      	adds	r3, #2
 8005724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005728:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	220f      	movs	r2, #15
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	43db      	mvns	r3, r3
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4013      	ands	r3, r2
 800573e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005746:	d01f      	beq.n	8005788 <HAL_GPIO_Init+0x1f8>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a4c      	ldr	r2, [pc, #304]	; (800587c <HAL_GPIO_Init+0x2ec>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d019      	beq.n	8005784 <HAL_GPIO_Init+0x1f4>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a4b      	ldr	r2, [pc, #300]	; (8005880 <HAL_GPIO_Init+0x2f0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <HAL_GPIO_Init+0x1f0>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a4a      	ldr	r2, [pc, #296]	; (8005884 <HAL_GPIO_Init+0x2f4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00d      	beq.n	800577c <HAL_GPIO_Init+0x1ec>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a49      	ldr	r2, [pc, #292]	; (8005888 <HAL_GPIO_Init+0x2f8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <HAL_GPIO_Init+0x1e8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a48      	ldr	r2, [pc, #288]	; (800588c <HAL_GPIO_Init+0x2fc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d101      	bne.n	8005774 <HAL_GPIO_Init+0x1e4>
 8005770:	2305      	movs	r3, #5
 8005772:	e00a      	b.n	800578a <HAL_GPIO_Init+0x1fa>
 8005774:	2306      	movs	r3, #6
 8005776:	e008      	b.n	800578a <HAL_GPIO_Init+0x1fa>
 8005778:	2304      	movs	r3, #4
 800577a:	e006      	b.n	800578a <HAL_GPIO_Init+0x1fa>
 800577c:	2303      	movs	r3, #3
 800577e:	e004      	b.n	800578a <HAL_GPIO_Init+0x1fa>
 8005780:	2302      	movs	r3, #2
 8005782:	e002      	b.n	800578a <HAL_GPIO_Init+0x1fa>
 8005784:	2301      	movs	r3, #1
 8005786:	e000      	b.n	800578a <HAL_GPIO_Init+0x1fa>
 8005788:	2300      	movs	r3, #0
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	f002 0203 	and.w	r2, r2, #3
 8005790:	0092      	lsls	r2, r2, #2
 8005792:	4093      	lsls	r3, r2
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800579a:	4937      	ldr	r1, [pc, #220]	; (8005878 <HAL_GPIO_Init+0x2e8>)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	089b      	lsrs	r3, r3, #2
 80057a0:	3302      	adds	r3, #2
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057a8:	4b39      	ldr	r3, [pc, #228]	; (8005890 <HAL_GPIO_Init+0x300>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4013      	ands	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80057cc:	4a30      	ldr	r2, [pc, #192]	; (8005890 <HAL_GPIO_Init+0x300>)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80057d2:	4b2f      	ldr	r3, [pc, #188]	; (8005890 <HAL_GPIO_Init+0x300>)
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	43db      	mvns	r3, r3
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4013      	ands	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057f6:	4a26      	ldr	r2, [pc, #152]	; (8005890 <HAL_GPIO_Init+0x300>)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80057fc:	4b24      	ldr	r3, [pc, #144]	; (8005890 <HAL_GPIO_Init+0x300>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	43db      	mvns	r3, r3
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4013      	ands	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005820:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <HAL_GPIO_Init+0x300>)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005826:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <HAL_GPIO_Init+0x300>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	43db      	mvns	r3, r3
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4013      	ands	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800584a:	4a11      	ldr	r2, [pc, #68]	; (8005890 <HAL_GPIO_Init+0x300>)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	3301      	adds	r3, #1
 8005854:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	f47f ae9d 	bne.w	80055a0 <HAL_GPIO_Init+0x10>
  }
}
 8005866:	bf00      	nop
 8005868:	bf00      	nop
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	40021000 	.word	0x40021000
 8005878:	40010000 	.word	0x40010000
 800587c:	48000400 	.word	0x48000400
 8005880:	48000800 	.word	0x48000800
 8005884:	48000c00 	.word	0x48000c00
 8005888:	48001000 	.word	0x48001000
 800588c:	48001400 	.word	0x48001400
 8005890:	40010400 	.word	0x40010400

08005894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	807b      	strh	r3, [r7, #2]
 80058a0:	4613      	mov	r3, r2
 80058a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058a4:	787b      	ldrb	r3, [r7, #1]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058aa:	887a      	ldrh	r2, [r7, #2]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058b0:	e002      	b.n	80058b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058b2:	887a      	ldrh	r2, [r7, #2]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80058ce:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058d0:	695a      	ldr	r2, [r3, #20]
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d006      	beq.n	80058e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058da:	4a05      	ldr	r2, [pc, #20]	; (80058f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058dc:	88fb      	ldrh	r3, [r7, #6]
 80058de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058e0:	88fb      	ldrh	r3, [r7, #6]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fb ff1e 	bl	8001724 <HAL_GPIO_EXTI_Callback>
  }
}
 80058e8:	bf00      	nop
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40010400 	.word	0x40010400

080058f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d141      	bne.n	8005986 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005902:	4b4b      	ldr	r3, [pc, #300]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800590a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590e:	d131      	bne.n	8005974 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005910:	4b47      	ldr	r3, [pc, #284]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005916:	4a46      	ldr	r2, [pc, #280]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800591c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005920:	4b43      	ldr	r3, [pc, #268]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005928:	4a41      	ldr	r2, [pc, #260]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800592a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800592e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005930:	4b40      	ldr	r3, [pc, #256]	; (8005a34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2232      	movs	r2, #50	; 0x32
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	4a3f      	ldr	r2, [pc, #252]	; (8005a38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	0c9b      	lsrs	r3, r3, #18
 8005942:	3301      	adds	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005946:	e002      	b.n	800594e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3b01      	subs	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800594e:	4b38      	ldr	r3, [pc, #224]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595a:	d102      	bne.n	8005962 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f2      	bne.n	8005948 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005962:	4b33      	ldr	r3, [pc, #204]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800596a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596e:	d158      	bne.n	8005a22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e057      	b.n	8005a24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005974:	4b2e      	ldr	r3, [pc, #184]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800597a:	4a2d      	ldr	r2, [pc, #180]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800597c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005980:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005984:	e04d      	b.n	8005a22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800598c:	d141      	bne.n	8005a12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800598e:	4b28      	ldr	r3, [pc, #160]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599a:	d131      	bne.n	8005a00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800599c:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800599e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059a2:	4a23      	ldr	r2, [pc, #140]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059ac:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059b4:	4a1e      	ldr	r2, [pc, #120]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059bc:	4b1d      	ldr	r3, [pc, #116]	; (8005a34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2232      	movs	r2, #50	; 0x32
 80059c2:	fb02 f303 	mul.w	r3, r2, r3
 80059c6:	4a1c      	ldr	r2, [pc, #112]	; (8005a38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	0c9b      	lsrs	r3, r3, #18
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059d2:	e002      	b.n	80059da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059da:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e6:	d102      	bne.n	80059ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f2      	bne.n	80059d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059ee:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fa:	d112      	bne.n	8005a22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e011      	b.n	8005a24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a00:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a06:	4a0a      	ldr	r2, [pc, #40]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005a10:	e007      	b.n	8005a22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a12:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a1a:	4a05      	ldr	r2, [pc, #20]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40007000 	.word	0x40007000
 8005a34:	2000000c 	.word	0x2000000c
 8005a38:	431bde83 	.word	0x431bde83

08005a3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005a40:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	4a04      	ldr	r2, [pc, #16]	; (8005a58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a4a:	6093      	str	r3, [r2, #8]
}
 8005a4c:	bf00      	nop
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40007000 	.word	0x40007000

08005a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e2fe      	b.n	800606c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d075      	beq.n	8005b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a7a:	4b97      	ldr	r3, [pc, #604]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
 8005a82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a84:	4b94      	ldr	r3, [pc, #592]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b0c      	cmp	r3, #12
 8005a92:	d102      	bne.n	8005a9a <HAL_RCC_OscConfig+0x3e>
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d002      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x44>
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d10b      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa0:	4b8d      	ldr	r3, [pc, #564]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d05b      	beq.n	8005b64 <HAL_RCC_OscConfig+0x108>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d157      	bne.n	8005b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e2d9      	b.n	800606c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac0:	d106      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x74>
 8005ac2:	4b85      	ldr	r3, [pc, #532]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a84      	ldr	r2, [pc, #528]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	e01d      	b.n	8005b0c <HAL_RCC_OscConfig+0xb0>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ad8:	d10c      	bne.n	8005af4 <HAL_RCC_OscConfig+0x98>
 8005ada:	4b7f      	ldr	r3, [pc, #508]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a7e      	ldr	r2, [pc, #504]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	4b7c      	ldr	r3, [pc, #496]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a7b      	ldr	r2, [pc, #492]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	e00b      	b.n	8005b0c <HAL_RCC_OscConfig+0xb0>
 8005af4:	4b78      	ldr	r3, [pc, #480]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a77      	ldr	r2, [pc, #476]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	4b75      	ldr	r3, [pc, #468]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a74      	ldr	r2, [pc, #464]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d013      	beq.n	8005b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7fd fa56 	bl	8002fc4 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b1c:	f7fd fa52 	bl	8002fc4 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b64      	cmp	r3, #100	; 0x64
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e29e      	b.n	800606c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b2e:	4b6a      	ldr	r3, [pc, #424]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <HAL_RCC_OscConfig+0xc0>
 8005b3a:	e014      	b.n	8005b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3c:	f7fd fa42 	bl	8002fc4 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b44:	f7fd fa3e 	bl	8002fc4 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b64      	cmp	r3, #100	; 0x64
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e28a      	b.n	800606c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b56:	4b60      	ldr	r3, [pc, #384]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0xe8>
 8005b62:	e000      	b.n	8005b66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d075      	beq.n	8005c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b72:	4b59      	ldr	r3, [pc, #356]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 030c 	and.w	r3, r3, #12
 8005b7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b7c:	4b56      	ldr	r3, [pc, #344]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	2b0c      	cmp	r3, #12
 8005b8a:	d102      	bne.n	8005b92 <HAL_RCC_OscConfig+0x136>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d002      	beq.n	8005b98 <HAL_RCC_OscConfig+0x13c>
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d11f      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b98:	4b4f      	ldr	r3, [pc, #316]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x154>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e25d      	b.n	800606c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb0:	4b49      	ldr	r3, [pc, #292]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	061b      	lsls	r3, r3, #24
 8005bbe:	4946      	ldr	r1, [pc, #280]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005bc4:	4b45      	ldr	r3, [pc, #276]	; (8005cdc <HAL_RCC_OscConfig+0x280>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fd f9af 	bl	8002f2c <HAL_InitTick>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d043      	beq.n	8005c5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e249      	b.n	800606c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d023      	beq.n	8005c28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005be0:	4b3d      	ldr	r3, [pc, #244]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a3c      	ldr	r2, [pc, #240]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fd f9ea 	bl	8002fc4 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bf4:	f7fd f9e6 	bl	8002fc4 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e232      	b.n	800606c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c06:	4b34      	ldr	r3, [pc, #208]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f0      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c12:	4b31      	ldr	r3, [pc, #196]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	061b      	lsls	r3, r3, #24
 8005c20:	492d      	ldr	r1, [pc, #180]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	604b      	str	r3, [r1, #4]
 8005c26:	e01a      	b.n	8005c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c28:	4b2b      	ldr	r3, [pc, #172]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fd f9c6 	bl	8002fc4 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c3c:	f7fd f9c2 	bl	8002fc4 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e20e      	b.n	800606c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c4e:	4b22      	ldr	r3, [pc, #136]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x1e0>
 8005c5a:	e000      	b.n	8005c5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d041      	beq.n	8005cee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01c      	beq.n	8005cac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c72:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c78:	4a17      	ldr	r2, [pc, #92]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c82:	f7fd f99f 	bl	8002fc4 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c8a:	f7fd f99b 	bl	8002fc4 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e1e7      	b.n	800606c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c9c:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0ef      	beq.n	8005c8a <HAL_RCC_OscConfig+0x22e>
 8005caa:	e020      	b.n	8005cee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cac:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb2:	4a09      	ldr	r2, [pc, #36]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cbc:	f7fd f982 	bl	8002fc4 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cc2:	e00d      	b.n	8005ce0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cc4:	f7fd f97e 	bl	8002fc4 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d906      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e1ca      	b.n	800606c <HAL_RCC_OscConfig+0x610>
 8005cd6:	bf00      	nop
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ce0:	4b8c      	ldr	r3, [pc, #560]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1ea      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 80a6 	beq.w	8005e48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d00:	4b84      	ldr	r3, [pc, #528]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_RCC_OscConfig+0x2b4>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <HAL_RCC_OscConfig+0x2b6>
 8005d10:	2300      	movs	r3, #0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00d      	beq.n	8005d32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d16:	4b7f      	ldr	r3, [pc, #508]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1a:	4a7e      	ldr	r2, [pc, #504]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d20:	6593      	str	r3, [r2, #88]	; 0x58
 8005d22:	4b7c      	ldr	r3, [pc, #496]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d32:	4b79      	ldr	r3, [pc, #484]	; (8005f18 <HAL_RCC_OscConfig+0x4bc>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d118      	bne.n	8005d70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d3e:	4b76      	ldr	r3, [pc, #472]	; (8005f18 <HAL_RCC_OscConfig+0x4bc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a75      	ldr	r2, [pc, #468]	; (8005f18 <HAL_RCC_OscConfig+0x4bc>)
 8005d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d4a:	f7fd f93b 	bl	8002fc4 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d52:	f7fd f937 	bl	8002fc4 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e183      	b.n	800606c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d64:	4b6c      	ldr	r3, [pc, #432]	; (8005f18 <HAL_RCC_OscConfig+0x4bc>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0f0      	beq.n	8005d52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d108      	bne.n	8005d8a <HAL_RCC_OscConfig+0x32e>
 8005d78:	4b66      	ldr	r3, [pc, #408]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7e:	4a65      	ldr	r2, [pc, #404]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d88:	e024      	b.n	8005dd4 <HAL_RCC_OscConfig+0x378>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b05      	cmp	r3, #5
 8005d90:	d110      	bne.n	8005db4 <HAL_RCC_OscConfig+0x358>
 8005d92:	4b60      	ldr	r3, [pc, #384]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d98:	4a5e      	ldr	r2, [pc, #376]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005d9a:	f043 0304 	orr.w	r3, r3, #4
 8005d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005da2:	4b5c      	ldr	r3, [pc, #368]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da8:	4a5a      	ldr	r2, [pc, #360]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005db2:	e00f      	b.n	8005dd4 <HAL_RCC_OscConfig+0x378>
 8005db4:	4b57      	ldr	r3, [pc, #348]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dba:	4a56      	ldr	r2, [pc, #344]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dc4:	4b53      	ldr	r3, [pc, #332]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	4a52      	ldr	r2, [pc, #328]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005dcc:	f023 0304 	bic.w	r3, r3, #4
 8005dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d016      	beq.n	8005e0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ddc:	f7fd f8f2 	bl	8002fc4 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005de2:	e00a      	b.n	8005dfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de4:	f7fd f8ee 	bl	8002fc4 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e138      	b.n	800606c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dfa:	4b46      	ldr	r3, [pc, #280]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0ed      	beq.n	8005de4 <HAL_RCC_OscConfig+0x388>
 8005e08:	e015      	b.n	8005e36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0a:	f7fd f8db 	bl	8002fc4 <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e10:	e00a      	b.n	8005e28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e12:	f7fd f8d7 	bl	8002fc4 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e121      	b.n	800606c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e28:	4b3a      	ldr	r3, [pc, #232]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1ed      	bne.n	8005e12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e36:	7ffb      	ldrb	r3, [r7, #31]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d105      	bne.n	8005e48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e3c:	4b35      	ldr	r3, [pc, #212]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e40:	4a34      	ldr	r2, [pc, #208]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d03c      	beq.n	8005ece <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01c      	beq.n	8005e96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e5c:	4b2d      	ldr	r3, [pc, #180]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e62:	4a2c      	ldr	r2, [pc, #176]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6c:	f7fd f8aa 	bl	8002fc4 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e74:	f7fd f8a6 	bl	8002fc4 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e0f2      	b.n	800606c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e86:	4b23      	ldr	r3, [pc, #140]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0ef      	beq.n	8005e74 <HAL_RCC_OscConfig+0x418>
 8005e94:	e01b      	b.n	8005ece <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e96:	4b1f      	ldr	r3, [pc, #124]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e9c:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005e9e:	f023 0301 	bic.w	r3, r3, #1
 8005ea2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea6:	f7fd f88d 	bl	8002fc4 <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005eac:	e008      	b.n	8005ec0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005eae:	f7fd f889 	bl	8002fc4 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e0d5      	b.n	800606c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ec0:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1ef      	bne.n	8005eae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 80c9 	beq.w	800606a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 030c 	and.w	r3, r3, #12
 8005ee0:	2b0c      	cmp	r3, #12
 8005ee2:	f000 8083 	beq.w	8005fec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d15e      	bne.n	8005fac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a08      	ldr	r2, [pc, #32]	; (8005f14 <HAL_RCC_OscConfig+0x4b8>)
 8005ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efa:	f7fd f863 	bl	8002fc4 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f00:	e00c      	b.n	8005f1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f02:	f7fd f85f 	bl	8002fc4 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d905      	bls.n	8005f1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e0ab      	b.n	800606c <HAL_RCC_OscConfig+0x610>
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f1c:	4b55      	ldr	r3, [pc, #340]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1ec      	bne.n	8005f02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f28:	4b52      	ldr	r3, [pc, #328]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	4b52      	ldr	r3, [pc, #328]	; (8006078 <HAL_RCC_OscConfig+0x61c>)
 8005f2e:	4013      	ands	r3, r2
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6a11      	ldr	r1, [r2, #32]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f38:	3a01      	subs	r2, #1
 8005f3a:	0112      	lsls	r2, r2, #4
 8005f3c:	4311      	orrs	r1, r2
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005f42:	0212      	lsls	r2, r2, #8
 8005f44:	4311      	orrs	r1, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f4a:	0852      	lsrs	r2, r2, #1
 8005f4c:	3a01      	subs	r2, #1
 8005f4e:	0552      	lsls	r2, r2, #21
 8005f50:	4311      	orrs	r1, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f56:	0852      	lsrs	r2, r2, #1
 8005f58:	3a01      	subs	r2, #1
 8005f5a:	0652      	lsls	r2, r2, #25
 8005f5c:	4311      	orrs	r1, r2
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f62:	06d2      	lsls	r2, r2, #27
 8005f64:	430a      	orrs	r2, r1
 8005f66:	4943      	ldr	r1, [pc, #268]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f6c:	4b41      	ldr	r3, [pc, #260]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a40      	ldr	r2, [pc, #256]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f78:	4b3e      	ldr	r3, [pc, #248]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4a3d      	ldr	r2, [pc, #244]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f84:	f7fd f81e 	bl	8002fc4 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f8c:	f7fd f81a 	bl	8002fc4 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e066      	b.n	800606c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f9e:	4b35      	ldr	r3, [pc, #212]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0f0      	beq.n	8005f8c <HAL_RCC_OscConfig+0x530>
 8005faa:	e05e      	b.n	800606a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fac:	4b31      	ldr	r3, [pc, #196]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a30      	ldr	r2, [pc, #192]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fd f804 	bl	8002fc4 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fc0:	f7fd f800 	bl	8002fc4 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e04c      	b.n	800606c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fd2:	4b28      	ldr	r3, [pc, #160]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1f0      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005fde:	4b25      	ldr	r3, [pc, #148]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	4924      	ldr	r1, [pc, #144]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005fe4:	4b25      	ldr	r3, [pc, #148]	; (800607c <HAL_RCC_OscConfig+0x620>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	60cb      	str	r3, [r1, #12]
 8005fea:	e03e      	b.n	800606a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e039      	b.n	800606c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <HAL_RCC_OscConfig+0x618>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f003 0203 	and.w	r2, r3, #3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	429a      	cmp	r2, r3
 800600a:	d12c      	bne.n	8006066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	3b01      	subs	r3, #1
 8006018:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800601a:	429a      	cmp	r2, r3
 800601c:	d123      	bne.n	8006066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800602a:	429a      	cmp	r2, r3
 800602c:	d11b      	bne.n	8006066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800603a:	429a      	cmp	r2, r3
 800603c:	d113      	bne.n	8006066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	085b      	lsrs	r3, r3, #1
 800604a:	3b01      	subs	r3, #1
 800604c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800604e:	429a      	cmp	r2, r3
 8006050:	d109      	bne.n	8006066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	3b01      	subs	r3, #1
 8006060:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006062:	429a      	cmp	r2, r3
 8006064:	d001      	beq.n	800606a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3720      	adds	r7, #32
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40021000 	.word	0x40021000
 8006078:	019f800c 	.word	0x019f800c
 800607c:	feeefffc 	.word	0xfeeefffc

08006080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e11e      	b.n	80062d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006098:	4b91      	ldr	r3, [pc, #580]	; (80062e0 <HAL_RCC_ClockConfig+0x260>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d910      	bls.n	80060c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a6:	4b8e      	ldr	r3, [pc, #568]	; (80062e0 <HAL_RCC_ClockConfig+0x260>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f023 020f 	bic.w	r2, r3, #15
 80060ae:	498c      	ldr	r1, [pc, #560]	; (80062e0 <HAL_RCC_ClockConfig+0x260>)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b6:	4b8a      	ldr	r3, [pc, #552]	; (80062e0 <HAL_RCC_ClockConfig+0x260>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d001      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e106      	b.n	80062d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d073      	beq.n	80061bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d129      	bne.n	8006130 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060dc:	4b81      	ldr	r3, [pc, #516]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0f4      	b.n	80062d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80060ec:	f000 f99e 	bl	800642c <RCC_GetSysClockFreqFromPLLSource>
 80060f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	4a7c      	ldr	r2, [pc, #496]	; (80062e8 <HAL_RCC_ClockConfig+0x268>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d93f      	bls.n	800617a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80060fa:	4b7a      	ldr	r3, [pc, #488]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d009      	beq.n	800611a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800610e:	2b00      	cmp	r3, #0
 8006110:	d033      	beq.n	800617a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006116:	2b00      	cmp	r3, #0
 8006118:	d12f      	bne.n	800617a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800611a:	4b72      	ldr	r3, [pc, #456]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006122:	4a70      	ldr	r2, [pc, #448]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 8006124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006128:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800612a:	2380      	movs	r3, #128	; 0x80
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e024      	b.n	800617a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d107      	bne.n	8006148 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006138:	4b6a      	ldr	r3, [pc, #424]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d109      	bne.n	8006158 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e0c6      	b.n	80062d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006148:	4b66      	ldr	r3, [pc, #408]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e0be      	b.n	80062d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006158:	f000 f8ce 	bl	80062f8 <HAL_RCC_GetSysClockFreq>
 800615c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	4a61      	ldr	r2, [pc, #388]	; (80062e8 <HAL_RCC_ClockConfig+0x268>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d909      	bls.n	800617a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006166:	4b5f      	ldr	r3, [pc, #380]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800616e:	4a5d      	ldr	r2, [pc, #372]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 8006170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006174:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006176:	2380      	movs	r3, #128	; 0x80
 8006178:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800617a:	4b5a      	ldr	r3, [pc, #360]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f023 0203 	bic.w	r2, r3, #3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	4957      	ldr	r1, [pc, #348]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 8006188:	4313      	orrs	r3, r2
 800618a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800618c:	f7fc ff1a 	bl	8002fc4 <HAL_GetTick>
 8006190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006192:	e00a      	b.n	80061aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006194:	f7fc ff16 	bl	8002fc4 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e095      	b.n	80062d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061aa:	4b4e      	ldr	r3, [pc, #312]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 020c 	and.w	r2, r3, #12
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d1eb      	bne.n	8006194 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d023      	beq.n	8006210 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061d4:	4b43      	ldr	r3, [pc, #268]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4a42      	ldr	r2, [pc, #264]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 80061da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d007      	beq.n	80061fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80061ec:	4b3d      	ldr	r3, [pc, #244]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80061f4:	4a3b      	ldr	r2, [pc, #236]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 80061f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061fc:	4b39      	ldr	r3, [pc, #228]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	4936      	ldr	r1, [pc, #216]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 800620a:	4313      	orrs	r3, r2
 800620c:	608b      	str	r3, [r1, #8]
 800620e:	e008      	b.n	8006222 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2b80      	cmp	r3, #128	; 0x80
 8006214:	d105      	bne.n	8006222 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006216:	4b33      	ldr	r3, [pc, #204]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	4a32      	ldr	r2, [pc, #200]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 800621c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006220:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006222:	4b2f      	ldr	r3, [pc, #188]	; (80062e0 <HAL_RCC_ClockConfig+0x260>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d21d      	bcs.n	800626c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006230:	4b2b      	ldr	r3, [pc, #172]	; (80062e0 <HAL_RCC_ClockConfig+0x260>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f023 020f 	bic.w	r2, r3, #15
 8006238:	4929      	ldr	r1, [pc, #164]	; (80062e0 <HAL_RCC_ClockConfig+0x260>)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	4313      	orrs	r3, r2
 800623e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006240:	f7fc fec0 	bl	8002fc4 <HAL_GetTick>
 8006244:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006246:	e00a      	b.n	800625e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006248:	f7fc febc 	bl	8002fc4 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	f241 3288 	movw	r2, #5000	; 0x1388
 8006256:	4293      	cmp	r3, r2
 8006258:	d901      	bls.n	800625e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e03b      	b.n	80062d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800625e:	4b20      	ldr	r3, [pc, #128]	; (80062e0 <HAL_RCC_ClockConfig+0x260>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d1ed      	bne.n	8006248 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d008      	beq.n	800628a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006278:	4b1a      	ldr	r3, [pc, #104]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	4917      	ldr	r1, [pc, #92]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 8006286:	4313      	orrs	r3, r2
 8006288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d009      	beq.n	80062aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006296:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	490f      	ldr	r1, [pc, #60]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062aa:	f000 f825 	bl	80062f8 <HAL_RCC_GetSysClockFreq>
 80062ae:	4602      	mov	r2, r0
 80062b0:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <HAL_RCC_ClockConfig+0x264>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	091b      	lsrs	r3, r3, #4
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	490c      	ldr	r1, [pc, #48]	; (80062ec <HAL_RCC_ClockConfig+0x26c>)
 80062bc:	5ccb      	ldrb	r3, [r1, r3]
 80062be:	f003 031f 	and.w	r3, r3, #31
 80062c2:	fa22 f303 	lsr.w	r3, r2, r3
 80062c6:	4a0a      	ldr	r2, [pc, #40]	; (80062f0 <HAL_RCC_ClockConfig+0x270>)
 80062c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80062ca:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <HAL_RCC_ClockConfig+0x274>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fc fe2c 	bl	8002f2c <HAL_InitTick>
 80062d4:	4603      	mov	r3, r0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40022000 	.word	0x40022000
 80062e4:	40021000 	.word	0x40021000
 80062e8:	04c4b400 	.word	0x04c4b400
 80062ec:	080092d8 	.word	0x080092d8
 80062f0:	2000000c 	.word	0x2000000c
 80062f4:	20000010 	.word	0x20000010

080062f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80062fe:	4b2c      	ldr	r3, [pc, #176]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 030c 	and.w	r3, r3, #12
 8006306:	2b04      	cmp	r3, #4
 8006308:	d102      	bne.n	8006310 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800630a:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	e047      	b.n	80063a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006310:	4b27      	ldr	r3, [pc, #156]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 030c 	and.w	r3, r3, #12
 8006318:	2b08      	cmp	r3, #8
 800631a:	d102      	bne.n	8006322 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800631c:	4b26      	ldr	r3, [pc, #152]	; (80063b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800631e:	613b      	str	r3, [r7, #16]
 8006320:	e03e      	b.n	80063a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006322:	4b23      	ldr	r3, [pc, #140]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 030c 	and.w	r3, r3, #12
 800632a:	2b0c      	cmp	r3, #12
 800632c:	d136      	bne.n	800639c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800632e:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006338:	4b1d      	ldr	r3, [pc, #116]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	091b      	lsrs	r3, r3, #4
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	3301      	adds	r3, #1
 8006344:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b03      	cmp	r3, #3
 800634a:	d10c      	bne.n	8006366 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800634c:	4a1a      	ldr	r2, [pc, #104]	; (80063b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	fbb2 f3f3 	udiv	r3, r2, r3
 8006354:	4a16      	ldr	r2, [pc, #88]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006356:	68d2      	ldr	r2, [r2, #12]
 8006358:	0a12      	lsrs	r2, r2, #8
 800635a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800635e:	fb02 f303 	mul.w	r3, r2, r3
 8006362:	617b      	str	r3, [r7, #20]
      break;
 8006364:	e00c      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006366:	4a13      	ldr	r2, [pc, #76]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	fbb2 f3f3 	udiv	r3, r2, r3
 800636e:	4a10      	ldr	r2, [pc, #64]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006370:	68d2      	ldr	r2, [r2, #12]
 8006372:	0a12      	lsrs	r2, r2, #8
 8006374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006378:	fb02 f303 	mul.w	r3, r2, r3
 800637c:	617b      	str	r3, [r7, #20]
      break;
 800637e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	0e5b      	lsrs	r3, r3, #25
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	3301      	adds	r3, #1
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	fbb2 f3f3 	udiv	r3, r2, r3
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	e001      	b.n	80063a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80063a0:	693b      	ldr	r3, [r7, #16]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	40021000 	.word	0x40021000
 80063b4:	00f42400 	.word	0x00f42400
 80063b8:	016e3600 	.word	0x016e3600

080063bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063c0:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80063c2:	681b      	ldr	r3, [r3, #0]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	2000000c 	.word	0x2000000c

080063d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063d8:	f7ff fff0 	bl	80063bc <HAL_RCC_GetHCLKFreq>
 80063dc:	4602      	mov	r2, r0
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	0a1b      	lsrs	r3, r3, #8
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	4904      	ldr	r1, [pc, #16]	; (80063fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80063ea:	5ccb      	ldrb	r3, [r1, r3]
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40021000 	.word	0x40021000
 80063fc:	080092e8 	.word	0x080092e8

08006400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006404:	f7ff ffda 	bl	80063bc <HAL_RCC_GetHCLKFreq>
 8006408:	4602      	mov	r2, r0
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	0adb      	lsrs	r3, r3, #11
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	4904      	ldr	r1, [pc, #16]	; (8006428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006416:	5ccb      	ldrb	r3, [r1, r3]
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006420:	4618      	mov	r0, r3
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40021000 	.word	0x40021000
 8006428:	080092e8 	.word	0x080092e8

0800642c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006432:	4b1e      	ldr	r3, [pc, #120]	; (80064ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800643c:	4b1b      	ldr	r3, [pc, #108]	; (80064ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	091b      	lsrs	r3, r3, #4
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	3301      	adds	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b03      	cmp	r3, #3
 800644e:	d10c      	bne.n	800646a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006450:	4a17      	ldr	r2, [pc, #92]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	fbb2 f3f3 	udiv	r3, r2, r3
 8006458:	4a14      	ldr	r2, [pc, #80]	; (80064ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800645a:	68d2      	ldr	r2, [r2, #12]
 800645c:	0a12      	lsrs	r2, r2, #8
 800645e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006462:	fb02 f303 	mul.w	r3, r2, r3
 8006466:	617b      	str	r3, [r7, #20]
    break;
 8006468:	e00c      	b.n	8006484 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800646a:	4a12      	ldr	r2, [pc, #72]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006472:	4a0e      	ldr	r2, [pc, #56]	; (80064ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006474:	68d2      	ldr	r2, [r2, #12]
 8006476:	0a12      	lsrs	r2, r2, #8
 8006478:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800647c:	fb02 f303 	mul.w	r3, r2, r3
 8006480:	617b      	str	r3, [r7, #20]
    break;
 8006482:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006484:	4b09      	ldr	r3, [pc, #36]	; (80064ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	0e5b      	lsrs	r3, r3, #25
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	3301      	adds	r3, #1
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	fbb2 f3f3 	udiv	r3, r2, r3
 800649c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800649e:	687b      	ldr	r3, [r7, #4]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	40021000 	.word	0x40021000
 80064b0:	016e3600 	.word	0x016e3600
 80064b4:	00f42400 	.word	0x00f42400

080064b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064c0:	2300      	movs	r3, #0
 80064c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064c4:	2300      	movs	r3, #0
 80064c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 8098 	beq.w	8006606 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064d6:	2300      	movs	r3, #0
 80064d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064da:	4b43      	ldr	r3, [pc, #268]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10d      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064e6:	4b40      	ldr	r3, [pc, #256]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ea:	4a3f      	ldr	r2, [pc, #252]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f0:	6593      	str	r3, [r2, #88]	; 0x58
 80064f2:	4b3d      	ldr	r3, [pc, #244]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fa:	60bb      	str	r3, [r7, #8]
 80064fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064fe:	2301      	movs	r3, #1
 8006500:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006502:	4b3a      	ldr	r3, [pc, #232]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a39      	ldr	r2, [pc, #228]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800650c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800650e:	f7fc fd59 	bl	8002fc4 <HAL_GetTick>
 8006512:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006514:	e009      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006516:	f7fc fd55 	bl	8002fc4 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d902      	bls.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	74fb      	strb	r3, [r7, #19]
        break;
 8006528:	e005      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800652a:	4b30      	ldr	r3, [pc, #192]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0ef      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006536:	7cfb      	ldrb	r3, [r7, #19]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d159      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800653c:	4b2a      	ldr	r3, [pc, #168]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800653e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006546:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01e      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	429a      	cmp	r2, r3
 8006556:	d019      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006558:	4b23      	ldr	r3, [pc, #140]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800655a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006562:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006564:	4b20      	ldr	r3, [pc, #128]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656a:	4a1f      	ldr	r2, [pc, #124]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800656c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006574:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657a:	4a1b      	ldr	r2, [pc, #108]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800657c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006584:	4a18      	ldr	r2, [pc, #96]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d016      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006596:	f7fc fd15 	bl	8002fc4 <HAL_GetTick>
 800659a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800659c:	e00b      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800659e:	f7fc fd11 	bl	8002fc4 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d902      	bls.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	74fb      	strb	r3, [r7, #19]
            break;
 80065b4:	e006      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065b6:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0ec      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80065c4:	7cfb      	ldrb	r3, [r7, #19]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065ca:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d8:	4903      	ldr	r1, [pc, #12]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80065e0:	e008      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065e2:	7cfb      	ldrb	r3, [r7, #19]
 80065e4:	74bb      	strb	r3, [r7, #18]
 80065e6:	e005      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80065e8:	40021000 	.word	0x40021000
 80065ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f0:	7cfb      	ldrb	r3, [r7, #19]
 80065f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065f4:	7c7b      	ldrb	r3, [r7, #17]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d105      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065fa:	4ba7      	ldr	r3, [pc, #668]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fe:	4aa6      	ldr	r2, [pc, #664]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006604:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006612:	4ba1      	ldr	r3, [pc, #644]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006618:	f023 0203 	bic.w	r2, r3, #3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	499d      	ldr	r1, [pc, #628]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006634:	4b98      	ldr	r3, [pc, #608]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663a:	f023 020c 	bic.w	r2, r3, #12
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	4995      	ldr	r1, [pc, #596]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006644:	4313      	orrs	r3, r2
 8006646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006656:	4b90      	ldr	r3, [pc, #576]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	498c      	ldr	r1, [pc, #560]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006666:	4313      	orrs	r3, r2
 8006668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006678:	4b87      	ldr	r3, [pc, #540]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	4984      	ldr	r1, [pc, #528]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006688:	4313      	orrs	r3, r2
 800668a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800669a:	4b7f      	ldr	r3, [pc, #508]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	497b      	ldr	r1, [pc, #492]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066bc:	4b76      	ldr	r3, [pc, #472]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	4973      	ldr	r1, [pc, #460]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066de:	4b6e      	ldr	r3, [pc, #440]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	496a      	ldr	r1, [pc, #424]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006700:	4b65      	ldr	r3, [pc, #404]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006706:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	4962      	ldr	r1, [pc, #392]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006722:	4b5d      	ldr	r3, [pc, #372]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	4959      	ldr	r1, [pc, #356]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006732:	4313      	orrs	r3, r2
 8006734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006744:	4b54      	ldr	r3, [pc, #336]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800674a:	f023 0203 	bic.w	r2, r3, #3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	4951      	ldr	r1, [pc, #324]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006766:	4b4c      	ldr	r3, [pc, #304]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	4948      	ldr	r1, [pc, #288]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006784:	2b00      	cmp	r3, #0
 8006786:	d015      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006788:	4b43      	ldr	r3, [pc, #268]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800678a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	4940      	ldr	r1, [pc, #256]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006798:	4313      	orrs	r3, r2
 800679a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067a6:	d105      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067a8:	4b3b      	ldr	r3, [pc, #236]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	4a3a      	ldr	r2, [pc, #232]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d015      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067c0:	4b35      	ldr	r3, [pc, #212]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ce:	4932      	ldr	r1, [pc, #200]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067de:	d105      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067e0:	4b2d      	ldr	r3, [pc, #180]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	4a2c      	ldr	r2, [pc, #176]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d015      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067f8:	4b27      	ldr	r3, [pc, #156]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	4924      	ldr	r1, [pc, #144]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006816:	d105      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006818:	4b1f      	ldr	r3, [pc, #124]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	4a1e      	ldr	r2, [pc, #120]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800681e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006822:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d015      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006830:	4b19      	ldr	r3, [pc, #100]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006836:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683e:	4916      	ldr	r1, [pc, #88]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800684e:	d105      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006850:	4b11      	ldr	r3, [pc, #68]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	4a10      	ldr	r2, [pc, #64]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800685a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d019      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006868:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	4908      	ldr	r1, [pc, #32]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006878:	4313      	orrs	r3, r2
 800687a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006886:	d109      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006888:	4b03      	ldr	r3, [pc, #12]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	4a02      	ldr	r2, [pc, #8]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800688e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006892:	60d3      	str	r3, [r2, #12]
 8006894:	e002      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006896:	bf00      	nop
 8006898:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d015      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80068a8:	4b29      	ldr	r3, [pc, #164]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b6:	4926      	ldr	r1, [pc, #152]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068c6:	d105      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068c8:	4b21      	ldr	r3, [pc, #132]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	4a20      	ldr	r2, [pc, #128]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d015      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80068e0:	4b1b      	ldr	r3, [pc, #108]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ee:	4918      	ldr	r1, [pc, #96]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fe:	d105      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006900:	4b13      	ldr	r3, [pc, #76]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	4a12      	ldr	r2, [pc, #72]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800690a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d015      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006918:	4b0d      	ldr	r3, [pc, #52]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800691a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800691e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006926:	490a      	ldr	r1, [pc, #40]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006928:	4313      	orrs	r3, r2
 800692a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006936:	d105      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006938:	4b05      	ldr	r3, [pc, #20]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	4a04      	ldr	r2, [pc, #16]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800693e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006942:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006944:	7cbb      	ldrb	r3, [r7, #18]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40021000 	.word	0x40021000

08006954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e049      	b.n	80069fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fc f99c 	bl	8002cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3304      	adds	r3, #4
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f000 ff72 	bl	800787c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d001      	beq.n	8006a1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e04c      	b.n	8006ab6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a26      	ldr	r2, [pc, #152]	; (8006ac4 <HAL_TIM_Base_Start+0xc0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d022      	beq.n	8006a74 <HAL_TIM_Base_Start+0x70>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a36:	d01d      	beq.n	8006a74 <HAL_TIM_Base_Start+0x70>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a22      	ldr	r2, [pc, #136]	; (8006ac8 <HAL_TIM_Base_Start+0xc4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d018      	beq.n	8006a74 <HAL_TIM_Base_Start+0x70>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a21      	ldr	r2, [pc, #132]	; (8006acc <HAL_TIM_Base_Start+0xc8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <HAL_TIM_Base_Start+0x70>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1f      	ldr	r2, [pc, #124]	; (8006ad0 <HAL_TIM_Base_Start+0xcc>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00e      	beq.n	8006a74 <HAL_TIM_Base_Start+0x70>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1e      	ldr	r2, [pc, #120]	; (8006ad4 <HAL_TIM_Base_Start+0xd0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d009      	beq.n	8006a74 <HAL_TIM_Base_Start+0x70>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1c      	ldr	r2, [pc, #112]	; (8006ad8 <HAL_TIM_Base_Start+0xd4>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_TIM_Base_Start+0x70>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1b      	ldr	r2, [pc, #108]	; (8006adc <HAL_TIM_Base_Start+0xd8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d115      	bne.n	8006aa0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	4b19      	ldr	r3, [pc, #100]	; (8006ae0 <HAL_TIM_Base_Start+0xdc>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b06      	cmp	r3, #6
 8006a84:	d015      	beq.n	8006ab2 <HAL_TIM_Base_Start+0xae>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a8c:	d011      	beq.n	8006ab2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9e:	e008      	b.n	8006ab2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	e000      	b.n	8006ab4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40000400 	.word	0x40000400
 8006acc:	40000800 	.word	0x40000800
 8006ad0:	40000c00 	.word	0x40000c00
 8006ad4:	40013400 	.word	0x40013400
 8006ad8:	40014000 	.word	0x40014000
 8006adc:	40015000 	.word	0x40015000
 8006ae0:	00010007 	.word	0x00010007

08006ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d001      	beq.n	8006afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e054      	b.n	8006ba6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a26      	ldr	r2, [pc, #152]	; (8006bb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d022      	beq.n	8006b64 <HAL_TIM_Base_Start_IT+0x80>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b26:	d01d      	beq.n	8006b64 <HAL_TIM_Base_Start_IT+0x80>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a22      	ldr	r2, [pc, #136]	; (8006bb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d018      	beq.n	8006b64 <HAL_TIM_Base_Start_IT+0x80>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a21      	ldr	r2, [pc, #132]	; (8006bbc <HAL_TIM_Base_Start_IT+0xd8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d013      	beq.n	8006b64 <HAL_TIM_Base_Start_IT+0x80>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1f      	ldr	r2, [pc, #124]	; (8006bc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00e      	beq.n	8006b64 <HAL_TIM_Base_Start_IT+0x80>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a1e      	ldr	r2, [pc, #120]	; (8006bc4 <HAL_TIM_Base_Start_IT+0xe0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d009      	beq.n	8006b64 <HAL_TIM_Base_Start_IT+0x80>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a1c      	ldr	r2, [pc, #112]	; (8006bc8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d004      	beq.n	8006b64 <HAL_TIM_Base_Start_IT+0x80>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a1b      	ldr	r2, [pc, #108]	; (8006bcc <HAL_TIM_Base_Start_IT+0xe8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d115      	bne.n	8006b90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	4b19      	ldr	r3, [pc, #100]	; (8006bd0 <HAL_TIM_Base_Start_IT+0xec>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b06      	cmp	r3, #6
 8006b74:	d015      	beq.n	8006ba2 <HAL_TIM_Base_Start_IT+0xbe>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7c:	d011      	beq.n	8006ba2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0201 	orr.w	r2, r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8e:	e008      	b.n	8006ba2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0201 	orr.w	r2, r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	e000      	b.n	8006ba4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40012c00 	.word	0x40012c00
 8006bb8:	40000400 	.word	0x40000400
 8006bbc:	40000800 	.word	0x40000800
 8006bc0:	40000c00 	.word	0x40000c00
 8006bc4:	40013400 	.word	0x40013400
 8006bc8:	40014000 	.word	0x40014000
 8006bcc:	40015000 	.word	0x40015000
 8006bd0:	00010007 	.word	0x00010007

08006bd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e049      	b.n	8006c7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f841 	bl	8006c82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f000 fe32 	bl	800787c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
	...

08006c98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d109      	bne.n	8006cbc <HAL_TIM_PWM_Start+0x24>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	bf14      	ite	ne
 8006cb4:	2301      	movne	r3, #1
 8006cb6:	2300      	moveq	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	e03c      	b.n	8006d36 <HAL_TIM_PWM_Start+0x9e>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d109      	bne.n	8006cd6 <HAL_TIM_PWM_Start+0x3e>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	bf14      	ite	ne
 8006cce:	2301      	movne	r3, #1
 8006cd0:	2300      	moveq	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	e02f      	b.n	8006d36 <HAL_TIM_PWM_Start+0x9e>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d109      	bne.n	8006cf0 <HAL_TIM_PWM_Start+0x58>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	bf14      	ite	ne
 8006ce8:	2301      	movne	r3, #1
 8006cea:	2300      	moveq	r3, #0
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	e022      	b.n	8006d36 <HAL_TIM_PWM_Start+0x9e>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b0c      	cmp	r3, #12
 8006cf4:	d109      	bne.n	8006d0a <HAL_TIM_PWM_Start+0x72>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	bf14      	ite	ne
 8006d02:	2301      	movne	r3, #1
 8006d04:	2300      	moveq	r3, #0
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	e015      	b.n	8006d36 <HAL_TIM_PWM_Start+0x9e>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b10      	cmp	r3, #16
 8006d0e:	d109      	bne.n	8006d24 <HAL_TIM_PWM_Start+0x8c>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	bf14      	ite	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	e008      	b.n	8006d36 <HAL_TIM_PWM_Start+0x9e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	bf14      	ite	ne
 8006d30:	2301      	movne	r3, #1
 8006d32:	2300      	moveq	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e0a6      	b.n	8006e8c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <HAL_TIM_PWM_Start+0xb6>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d4c:	e023      	b.n	8006d96 <HAL_TIM_PWM_Start+0xfe>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	d104      	bne.n	8006d5e <HAL_TIM_PWM_Start+0xc6>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d5c:	e01b      	b.n	8006d96 <HAL_TIM_PWM_Start+0xfe>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d104      	bne.n	8006d6e <HAL_TIM_PWM_Start+0xd6>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d6c:	e013      	b.n	8006d96 <HAL_TIM_PWM_Start+0xfe>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b0c      	cmp	r3, #12
 8006d72:	d104      	bne.n	8006d7e <HAL_TIM_PWM_Start+0xe6>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d7c:	e00b      	b.n	8006d96 <HAL_TIM_PWM_Start+0xfe>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b10      	cmp	r3, #16
 8006d82:	d104      	bne.n	8006d8e <HAL_TIM_PWM_Start+0xf6>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d8c:	e003      	b.n	8006d96 <HAL_TIM_PWM_Start+0xfe>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2202      	movs	r2, #2
 8006d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f001 f9e6 	bl	8008170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a3a      	ldr	r2, [pc, #232]	; (8006e94 <HAL_TIM_PWM_Start+0x1fc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d018      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x148>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a39      	ldr	r2, [pc, #228]	; (8006e98 <HAL_TIM_PWM_Start+0x200>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d013      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x148>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a37      	ldr	r2, [pc, #220]	; (8006e9c <HAL_TIM_PWM_Start+0x204>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00e      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x148>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a36      	ldr	r2, [pc, #216]	; (8006ea0 <HAL_TIM_PWM_Start+0x208>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d009      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x148>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a34      	ldr	r2, [pc, #208]	; (8006ea4 <HAL_TIM_PWM_Start+0x20c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x148>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a33      	ldr	r2, [pc, #204]	; (8006ea8 <HAL_TIM_PWM_Start+0x210>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d101      	bne.n	8006de4 <HAL_TIM_PWM_Start+0x14c>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <HAL_TIM_PWM_Start+0x14e>
 8006de4:	2300      	movs	r3, #0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d007      	beq.n	8006dfa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006df8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a25      	ldr	r2, [pc, #148]	; (8006e94 <HAL_TIM_PWM_Start+0x1fc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d022      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x1b2>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e0c:	d01d      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x1b2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a26      	ldr	r2, [pc, #152]	; (8006eac <HAL_TIM_PWM_Start+0x214>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d018      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x1b2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a24      	ldr	r2, [pc, #144]	; (8006eb0 <HAL_TIM_PWM_Start+0x218>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d013      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x1b2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a23      	ldr	r2, [pc, #140]	; (8006eb4 <HAL_TIM_PWM_Start+0x21c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00e      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x1b2>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a19      	ldr	r2, [pc, #100]	; (8006e98 <HAL_TIM_PWM_Start+0x200>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d009      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x1b2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a18      	ldr	r2, [pc, #96]	; (8006e9c <HAL_TIM_PWM_Start+0x204>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d004      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x1b2>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a18      	ldr	r2, [pc, #96]	; (8006ea8 <HAL_TIM_PWM_Start+0x210>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d115      	bne.n	8006e76 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <HAL_TIM_PWM_Start+0x220>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b06      	cmp	r3, #6
 8006e5a:	d015      	beq.n	8006e88 <HAL_TIM_PWM_Start+0x1f0>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e62:	d011      	beq.n	8006e88 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0201 	orr.w	r2, r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e74:	e008      	b.n	8006e88 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0201 	orr.w	r2, r2, #1
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	e000      	b.n	8006e8a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40013400 	.word	0x40013400
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40014400 	.word	0x40014400
 8006ea4:	40014800 	.word	0x40014800
 8006ea8:	40015000 	.word	0x40015000
 8006eac:	40000400 	.word	0x40000400
 8006eb0:	40000800 	.word	0x40000800
 8006eb4:	40000c00 	.word	0x40000c00
 8006eb8:	00010007 	.word	0x00010007

08006ebc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e097      	b.n	8007000 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7fb fea3 	bl	8002c30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2202      	movs	r2, #2
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6812      	ldr	r2, [r2, #0]
 8006efc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006f00:	f023 0307 	bic.w	r3, r3, #7
 8006f04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4610      	mov	r0, r2
 8006f12:	f000 fcb3 	bl	800787c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3e:	f023 0303 	bic.w	r3, r3, #3
 8006f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f5c:	f023 030c 	bic.w	r3, r3, #12
 8006f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	011a      	lsls	r2, r3, #4
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	031b      	lsls	r3, r3, #12
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007018:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007020:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007028:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007030:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d110      	bne.n	800705a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d102      	bne.n	8007044 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800703e:	7b7b      	ldrb	r3, [r7, #13]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d001      	beq.n	8007048 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e069      	b.n	800711c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007058:	e031      	b.n	80070be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b04      	cmp	r3, #4
 800705e:	d110      	bne.n	8007082 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007060:	7bbb      	ldrb	r3, [r7, #14]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d102      	bne.n	800706c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007066:	7b3b      	ldrb	r3, [r7, #12]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d001      	beq.n	8007070 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e055      	b.n	800711c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007080:	e01d      	b.n	80070be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d108      	bne.n	800709a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d105      	bne.n	800709a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800708e:	7b7b      	ldrb	r3, [r7, #13]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d102      	bne.n	800709a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007094:	7b3b      	ldrb	r3, [r7, #12]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d001      	beq.n	800709e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e03e      	b.n	800711c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2202      	movs	r2, #2
 80070a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2202      	movs	r2, #2
 80070aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2202      	movs	r2, #2
 80070ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_TIM_Encoder_Start+0xc4>
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d008      	beq.n	80070dc <HAL_TIM_Encoder_Start+0xd4>
 80070ca:	e00f      	b.n	80070ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2201      	movs	r2, #1
 80070d2:	2100      	movs	r1, #0
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 f84b 	bl	8008170 <TIM_CCxChannelCmd>
      break;
 80070da:	e016      	b.n	800710a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2201      	movs	r2, #1
 80070e2:	2104      	movs	r1, #4
 80070e4:	4618      	mov	r0, r3
 80070e6:	f001 f843 	bl	8008170 <TIM_CCxChannelCmd>
      break;
 80070ea:	e00e      	b.n	800710a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2201      	movs	r2, #1
 80070f2:	2100      	movs	r1, #0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 f83b 	bl	8008170 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2201      	movs	r2, #1
 8007100:	2104      	movs	r1, #4
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f834 	bl	8008170 <TIM_CCxChannelCmd>
      break;
 8007108:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0201 	orr.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d020      	beq.n	8007188 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01b      	beq.n	8007188 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f06f 0202 	mvn.w	r2, #2
 8007158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	f003 0303 	and.w	r3, r3, #3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fb66 	bl	8007840 <HAL_TIM_IC_CaptureCallback>
 8007174:	e005      	b.n	8007182 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fb58 	bl	800782c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fb69 	bl	8007854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	d020      	beq.n	80071d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01b      	beq.n	80071d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f06f 0204 	mvn.w	r2, #4
 80071a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2202      	movs	r2, #2
 80071aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fb40 	bl	8007840 <HAL_TIM_IC_CaptureCallback>
 80071c0:	e005      	b.n	80071ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fb32 	bl	800782c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fb43 	bl	8007854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d020      	beq.n	8007220 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d01b      	beq.n	8007220 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0208 	mvn.w	r2, #8
 80071f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2204      	movs	r2, #4
 80071f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	f003 0303 	and.w	r3, r3, #3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fb1a 	bl	8007840 <HAL_TIM_IC_CaptureCallback>
 800720c:	e005      	b.n	800721a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fb0c 	bl	800782c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fb1d 	bl	8007854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f003 0310 	and.w	r3, r3, #16
 8007226:	2b00      	cmp	r3, #0
 8007228:	d020      	beq.n	800726c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f003 0310 	and.w	r3, r3, #16
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01b      	beq.n	800726c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f06f 0210 	mvn.w	r2, #16
 800723c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2208      	movs	r2, #8
 8007242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 faf4 	bl	8007840 <HAL_TIM_IC_CaptureCallback>
 8007258:	e005      	b.n	8007266 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fae6 	bl	800782c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 faf7 	bl	8007854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00c      	beq.n	8007290 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d007      	beq.n	8007290 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0201 	mvn.w	r2, #1
 8007288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fac4 	bl	8007818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007296:	2b00      	cmp	r3, #0
 8007298:	d104      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00c      	beq.n	80072be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80072b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 f81f 	bl	80082fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00c      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f817 	bl	8008310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00c      	beq.n	8007306 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fab1 	bl	8007868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f06f 0220 	mvn.w	r2, #32
 8007322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 ffdf 	bl	80082e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00c      	beq.n	800734e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d007      	beq.n	800734e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 ffeb 	bl	8008324 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00c      	beq.n	8007372 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800736a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 ffe3 	bl	8008338 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00c      	beq.n	8007396 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d007      	beq.n	8007396 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800738e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 ffdb 	bl	800834c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00c      	beq.n	80073ba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d007      	beq.n	80073ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80073b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 ffd3 	bl	8008360 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073ba:	bf00      	nop
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d101      	bne.n	80073e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073de:	2302      	movs	r3, #2
 80073e0:	e0ff      	b.n	80075e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b14      	cmp	r3, #20
 80073ee:	f200 80f0 	bhi.w	80075d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80073f2:	a201      	add	r2, pc, #4	; (adr r2, 80073f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f8:	0800744d 	.word	0x0800744d
 80073fc:	080075d3 	.word	0x080075d3
 8007400:	080075d3 	.word	0x080075d3
 8007404:	080075d3 	.word	0x080075d3
 8007408:	0800748d 	.word	0x0800748d
 800740c:	080075d3 	.word	0x080075d3
 8007410:	080075d3 	.word	0x080075d3
 8007414:	080075d3 	.word	0x080075d3
 8007418:	080074cf 	.word	0x080074cf
 800741c:	080075d3 	.word	0x080075d3
 8007420:	080075d3 	.word	0x080075d3
 8007424:	080075d3 	.word	0x080075d3
 8007428:	0800750f 	.word	0x0800750f
 800742c:	080075d3 	.word	0x080075d3
 8007430:	080075d3 	.word	0x080075d3
 8007434:	080075d3 	.word	0x080075d3
 8007438:	08007551 	.word	0x08007551
 800743c:	080075d3 	.word	0x080075d3
 8007440:	080075d3 	.word	0x080075d3
 8007444:	080075d3 	.word	0x080075d3
 8007448:	08007591 	.word	0x08007591
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fac6 	bl	80079e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0208 	orr.w	r2, r2, #8
 8007466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0204 	bic.w	r2, r2, #4
 8007476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6999      	ldr	r1, [r3, #24]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	619a      	str	r2, [r3, #24]
      break;
 800748a:	e0a5      	b.n	80075d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68b9      	ldr	r1, [r7, #8]
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fb40 	bl	8007b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699a      	ldr	r2, [r3, #24]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699a      	ldr	r2, [r3, #24]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6999      	ldr	r1, [r3, #24]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	021a      	lsls	r2, r3, #8
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	619a      	str	r2, [r3, #24]
      break;
 80074cc:	e084      	b.n	80075d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fbb3 	bl	8007c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69da      	ldr	r2, [r3, #28]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 0208 	orr.w	r2, r2, #8
 80074e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0204 	bic.w	r2, r2, #4
 80074f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69d9      	ldr	r1, [r3, #28]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	691a      	ldr	r2, [r3, #16]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	61da      	str	r2, [r3, #28]
      break;
 800750c:	e064      	b.n	80075d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68b9      	ldr	r1, [r7, #8]
 8007514:	4618      	mov	r0, r3
 8007516:	f000 fc25 	bl	8007d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69da      	ldr	r2, [r3, #28]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69da      	ldr	r2, [r3, #28]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69d9      	ldr	r1, [r3, #28]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	021a      	lsls	r2, r3, #8
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	61da      	str	r2, [r3, #28]
      break;
 800754e:	e043      	b.n	80075d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 fc98 	bl	8007e8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0208 	orr.w	r2, r2, #8
 800756a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0204 	bic.w	r2, r2, #4
 800757a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	691a      	ldr	r2, [r3, #16]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800758e:	e023      	b.n	80075d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fce2 	bl	8007f60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	021a      	lsls	r2, r3, #8
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80075d0:	e002      	b.n	80075d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]
      break;
 80075d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop

080075ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_TIM_ConfigClockSource+0x1c>
 8007604:	2302      	movs	r3, #2
 8007606:	e0f6      	b.n	80077f6 <HAL_TIM_ConfigClockSource+0x20a>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800762a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a6f      	ldr	r2, [pc, #444]	; (8007800 <HAL_TIM_ConfigClockSource+0x214>)
 8007642:	4293      	cmp	r3, r2
 8007644:	f000 80c1 	beq.w	80077ca <HAL_TIM_ConfigClockSource+0x1de>
 8007648:	4a6d      	ldr	r2, [pc, #436]	; (8007800 <HAL_TIM_ConfigClockSource+0x214>)
 800764a:	4293      	cmp	r3, r2
 800764c:	f200 80c6 	bhi.w	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 8007650:	4a6c      	ldr	r2, [pc, #432]	; (8007804 <HAL_TIM_ConfigClockSource+0x218>)
 8007652:	4293      	cmp	r3, r2
 8007654:	f000 80b9 	beq.w	80077ca <HAL_TIM_ConfigClockSource+0x1de>
 8007658:	4a6a      	ldr	r2, [pc, #424]	; (8007804 <HAL_TIM_ConfigClockSource+0x218>)
 800765a:	4293      	cmp	r3, r2
 800765c:	f200 80be 	bhi.w	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 8007660:	4a69      	ldr	r2, [pc, #420]	; (8007808 <HAL_TIM_ConfigClockSource+0x21c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	f000 80b1 	beq.w	80077ca <HAL_TIM_ConfigClockSource+0x1de>
 8007668:	4a67      	ldr	r2, [pc, #412]	; (8007808 <HAL_TIM_ConfigClockSource+0x21c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	f200 80b6 	bhi.w	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 8007670:	4a66      	ldr	r2, [pc, #408]	; (800780c <HAL_TIM_ConfigClockSource+0x220>)
 8007672:	4293      	cmp	r3, r2
 8007674:	f000 80a9 	beq.w	80077ca <HAL_TIM_ConfigClockSource+0x1de>
 8007678:	4a64      	ldr	r2, [pc, #400]	; (800780c <HAL_TIM_ConfigClockSource+0x220>)
 800767a:	4293      	cmp	r3, r2
 800767c:	f200 80ae 	bhi.w	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 8007680:	4a63      	ldr	r2, [pc, #396]	; (8007810 <HAL_TIM_ConfigClockSource+0x224>)
 8007682:	4293      	cmp	r3, r2
 8007684:	f000 80a1 	beq.w	80077ca <HAL_TIM_ConfigClockSource+0x1de>
 8007688:	4a61      	ldr	r2, [pc, #388]	; (8007810 <HAL_TIM_ConfigClockSource+0x224>)
 800768a:	4293      	cmp	r3, r2
 800768c:	f200 80a6 	bhi.w	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 8007690:	4a60      	ldr	r2, [pc, #384]	; (8007814 <HAL_TIM_ConfigClockSource+0x228>)
 8007692:	4293      	cmp	r3, r2
 8007694:	f000 8099 	beq.w	80077ca <HAL_TIM_ConfigClockSource+0x1de>
 8007698:	4a5e      	ldr	r2, [pc, #376]	; (8007814 <HAL_TIM_ConfigClockSource+0x228>)
 800769a:	4293      	cmp	r3, r2
 800769c:	f200 809e 	bhi.w	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 80076a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80076a4:	f000 8091 	beq.w	80077ca <HAL_TIM_ConfigClockSource+0x1de>
 80076a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80076ac:	f200 8096 	bhi.w	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 80076b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076b4:	f000 8089 	beq.w	80077ca <HAL_TIM_ConfigClockSource+0x1de>
 80076b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076bc:	f200 808e 	bhi.w	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 80076c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c4:	d03e      	beq.n	8007744 <HAL_TIM_ConfigClockSource+0x158>
 80076c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ca:	f200 8087 	bhi.w	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 80076ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d2:	f000 8086 	beq.w	80077e2 <HAL_TIM_ConfigClockSource+0x1f6>
 80076d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076da:	d87f      	bhi.n	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 80076dc:	2b70      	cmp	r3, #112	; 0x70
 80076de:	d01a      	beq.n	8007716 <HAL_TIM_ConfigClockSource+0x12a>
 80076e0:	2b70      	cmp	r3, #112	; 0x70
 80076e2:	d87b      	bhi.n	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 80076e4:	2b60      	cmp	r3, #96	; 0x60
 80076e6:	d050      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x19e>
 80076e8:	2b60      	cmp	r3, #96	; 0x60
 80076ea:	d877      	bhi.n	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 80076ec:	2b50      	cmp	r3, #80	; 0x50
 80076ee:	d03c      	beq.n	800776a <HAL_TIM_ConfigClockSource+0x17e>
 80076f0:	2b50      	cmp	r3, #80	; 0x50
 80076f2:	d873      	bhi.n	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 80076f4:	2b40      	cmp	r3, #64	; 0x40
 80076f6:	d058      	beq.n	80077aa <HAL_TIM_ConfigClockSource+0x1be>
 80076f8:	2b40      	cmp	r3, #64	; 0x40
 80076fa:	d86f      	bhi.n	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 80076fc:	2b30      	cmp	r3, #48	; 0x30
 80076fe:	d064      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0x1de>
 8007700:	2b30      	cmp	r3, #48	; 0x30
 8007702:	d86b      	bhi.n	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 8007704:	2b20      	cmp	r3, #32
 8007706:	d060      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0x1de>
 8007708:	2b20      	cmp	r3, #32
 800770a:	d867      	bhi.n	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d05c      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0x1de>
 8007710:	2b10      	cmp	r3, #16
 8007712:	d05a      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0x1de>
 8007714:	e062      	b.n	80077dc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007726:	f000 fd03 	bl	8008130 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	609a      	str	r2, [r3, #8]
      break;
 8007742:	e04f      	b.n	80077e4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007754:	f000 fcec 	bl	8008130 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689a      	ldr	r2, [r3, #8]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007766:	609a      	str	r2, [r3, #8]
      break;
 8007768:	e03c      	b.n	80077e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007776:	461a      	mov	r2, r3
 8007778:	f000 fc5e 	bl	8008038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2150      	movs	r1, #80	; 0x50
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fcb7 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 8007788:	e02c      	b.n	80077e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007796:	461a      	mov	r2, r3
 8007798:	f000 fc7d 	bl	8008096 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2160      	movs	r1, #96	; 0x60
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fca7 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 80077a8:	e01c      	b.n	80077e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b6:	461a      	mov	r2, r3
 80077b8:	f000 fc3e 	bl	8008038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2140      	movs	r1, #64	; 0x40
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 fc97 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 80077c8:	e00c      	b.n	80077e4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4619      	mov	r1, r3
 80077d4:	4610      	mov	r0, r2
 80077d6:	f000 fc8e 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 80077da:	e003      	b.n	80077e4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	73fb      	strb	r3, [r7, #15]
      break;
 80077e0:	e000      	b.n	80077e4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80077e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	00100070 	.word	0x00100070
 8007804:	00100060 	.word	0x00100060
 8007808:	00100050 	.word	0x00100050
 800780c:	00100040 	.word	0x00100040
 8007810:	00100030 	.word	0x00100030
 8007814:	00100020 	.word	0x00100020

08007818 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a4c      	ldr	r2, [pc, #304]	; (80079c0 <TIM_Base_SetConfig+0x144>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d017      	beq.n	80078c4 <TIM_Base_SetConfig+0x48>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789a:	d013      	beq.n	80078c4 <TIM_Base_SetConfig+0x48>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a49      	ldr	r2, [pc, #292]	; (80079c4 <TIM_Base_SetConfig+0x148>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00f      	beq.n	80078c4 <TIM_Base_SetConfig+0x48>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a48      	ldr	r2, [pc, #288]	; (80079c8 <TIM_Base_SetConfig+0x14c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d00b      	beq.n	80078c4 <TIM_Base_SetConfig+0x48>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a47      	ldr	r2, [pc, #284]	; (80079cc <TIM_Base_SetConfig+0x150>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d007      	beq.n	80078c4 <TIM_Base_SetConfig+0x48>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a46      	ldr	r2, [pc, #280]	; (80079d0 <TIM_Base_SetConfig+0x154>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d003      	beq.n	80078c4 <TIM_Base_SetConfig+0x48>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a45      	ldr	r2, [pc, #276]	; (80079d4 <TIM_Base_SetConfig+0x158>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d108      	bne.n	80078d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a39      	ldr	r2, [pc, #228]	; (80079c0 <TIM_Base_SetConfig+0x144>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d023      	beq.n	8007926 <TIM_Base_SetConfig+0xaa>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e4:	d01f      	beq.n	8007926 <TIM_Base_SetConfig+0xaa>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a36      	ldr	r2, [pc, #216]	; (80079c4 <TIM_Base_SetConfig+0x148>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d01b      	beq.n	8007926 <TIM_Base_SetConfig+0xaa>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a35      	ldr	r2, [pc, #212]	; (80079c8 <TIM_Base_SetConfig+0x14c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d017      	beq.n	8007926 <TIM_Base_SetConfig+0xaa>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a34      	ldr	r2, [pc, #208]	; (80079cc <TIM_Base_SetConfig+0x150>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d013      	beq.n	8007926 <TIM_Base_SetConfig+0xaa>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a33      	ldr	r2, [pc, #204]	; (80079d0 <TIM_Base_SetConfig+0x154>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00f      	beq.n	8007926 <TIM_Base_SetConfig+0xaa>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a33      	ldr	r2, [pc, #204]	; (80079d8 <TIM_Base_SetConfig+0x15c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00b      	beq.n	8007926 <TIM_Base_SetConfig+0xaa>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a32      	ldr	r2, [pc, #200]	; (80079dc <TIM_Base_SetConfig+0x160>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d007      	beq.n	8007926 <TIM_Base_SetConfig+0xaa>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a31      	ldr	r2, [pc, #196]	; (80079e0 <TIM_Base_SetConfig+0x164>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d003      	beq.n	8007926 <TIM_Base_SetConfig+0xaa>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a2c      	ldr	r2, [pc, #176]	; (80079d4 <TIM_Base_SetConfig+0x158>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d108      	bne.n	8007938 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800792c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	4313      	orrs	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	4313      	orrs	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a18      	ldr	r2, [pc, #96]	; (80079c0 <TIM_Base_SetConfig+0x144>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d013      	beq.n	800798c <TIM_Base_SetConfig+0x110>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a1a      	ldr	r2, [pc, #104]	; (80079d0 <TIM_Base_SetConfig+0x154>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d00f      	beq.n	800798c <TIM_Base_SetConfig+0x110>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a1a      	ldr	r2, [pc, #104]	; (80079d8 <TIM_Base_SetConfig+0x15c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00b      	beq.n	800798c <TIM_Base_SetConfig+0x110>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a19      	ldr	r2, [pc, #100]	; (80079dc <TIM_Base_SetConfig+0x160>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d007      	beq.n	800798c <TIM_Base_SetConfig+0x110>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a18      	ldr	r2, [pc, #96]	; (80079e0 <TIM_Base_SetConfig+0x164>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d003      	beq.n	800798c <TIM_Base_SetConfig+0x110>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a13      	ldr	r2, [pc, #76]	; (80079d4 <TIM_Base_SetConfig+0x158>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d103      	bne.n	8007994 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	691a      	ldr	r2, [r3, #16]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d105      	bne.n	80079b2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f023 0201 	bic.w	r2, r3, #1
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	611a      	str	r2, [r3, #16]
  }
}
 80079b2:	bf00      	nop
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	40012c00 	.word	0x40012c00
 80079c4:	40000400 	.word	0x40000400
 80079c8:	40000800 	.word	0x40000800
 80079cc:	40000c00 	.word	0x40000c00
 80079d0:	40013400 	.word	0x40013400
 80079d4:	40015000 	.word	0x40015000
 80079d8:	40014000 	.word	0x40014000
 80079dc:	40014400 	.word	0x40014400
 80079e0:	40014800 	.word	0x40014800

080079e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	f023 0201 	bic.w	r2, r3, #1
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0303 	bic.w	r3, r3, #3
 8007a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f023 0302 	bic.w	r3, r3, #2
 8007a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a30      	ldr	r2, [pc, #192]	; (8007b00 <TIM_OC1_SetConfig+0x11c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d013      	beq.n	8007a6c <TIM_OC1_SetConfig+0x88>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a2f      	ldr	r2, [pc, #188]	; (8007b04 <TIM_OC1_SetConfig+0x120>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00f      	beq.n	8007a6c <TIM_OC1_SetConfig+0x88>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a2e      	ldr	r2, [pc, #184]	; (8007b08 <TIM_OC1_SetConfig+0x124>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00b      	beq.n	8007a6c <TIM_OC1_SetConfig+0x88>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a2d      	ldr	r2, [pc, #180]	; (8007b0c <TIM_OC1_SetConfig+0x128>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d007      	beq.n	8007a6c <TIM_OC1_SetConfig+0x88>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a2c      	ldr	r2, [pc, #176]	; (8007b10 <TIM_OC1_SetConfig+0x12c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_OC1_SetConfig+0x88>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a2b      	ldr	r2, [pc, #172]	; (8007b14 <TIM_OC1_SetConfig+0x130>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d10c      	bne.n	8007a86 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f023 0308 	bic.w	r3, r3, #8
 8007a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f023 0304 	bic.w	r3, r3, #4
 8007a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a1d      	ldr	r2, [pc, #116]	; (8007b00 <TIM_OC1_SetConfig+0x11c>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d013      	beq.n	8007ab6 <TIM_OC1_SetConfig+0xd2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a1c      	ldr	r2, [pc, #112]	; (8007b04 <TIM_OC1_SetConfig+0x120>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00f      	beq.n	8007ab6 <TIM_OC1_SetConfig+0xd2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a1b      	ldr	r2, [pc, #108]	; (8007b08 <TIM_OC1_SetConfig+0x124>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00b      	beq.n	8007ab6 <TIM_OC1_SetConfig+0xd2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a1a      	ldr	r2, [pc, #104]	; (8007b0c <TIM_OC1_SetConfig+0x128>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d007      	beq.n	8007ab6 <TIM_OC1_SetConfig+0xd2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a19      	ldr	r2, [pc, #100]	; (8007b10 <TIM_OC1_SetConfig+0x12c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d003      	beq.n	8007ab6 <TIM_OC1_SetConfig+0xd2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a18      	ldr	r2, [pc, #96]	; (8007b14 <TIM_OC1_SetConfig+0x130>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d111      	bne.n	8007ada <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	621a      	str	r2, [r3, #32]
}
 8007af4:	bf00      	nop
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	40012c00 	.word	0x40012c00
 8007b04:	40013400 	.word	0x40013400
 8007b08:	40014000 	.word	0x40014000
 8007b0c:	40014400 	.word	0x40014400
 8007b10:	40014800 	.word	0x40014800
 8007b14:	40015000 	.word	0x40015000

08007b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	f023 0210 	bic.w	r2, r3, #16
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f023 0320 	bic.w	r3, r3, #32
 8007b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a2c      	ldr	r2, [pc, #176]	; (8007c28 <TIM_OC2_SetConfig+0x110>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d007      	beq.n	8007b8c <TIM_OC2_SetConfig+0x74>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a2b      	ldr	r2, [pc, #172]	; (8007c2c <TIM_OC2_SetConfig+0x114>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d003      	beq.n	8007b8c <TIM_OC2_SetConfig+0x74>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a2a      	ldr	r2, [pc, #168]	; (8007c30 <TIM_OC2_SetConfig+0x118>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d10d      	bne.n	8007ba8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	011b      	lsls	r3, r3, #4
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a1f      	ldr	r2, [pc, #124]	; (8007c28 <TIM_OC2_SetConfig+0x110>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d013      	beq.n	8007bd8 <TIM_OC2_SetConfig+0xc0>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a1e      	ldr	r2, [pc, #120]	; (8007c2c <TIM_OC2_SetConfig+0x114>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d00f      	beq.n	8007bd8 <TIM_OC2_SetConfig+0xc0>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a1e      	ldr	r2, [pc, #120]	; (8007c34 <TIM_OC2_SetConfig+0x11c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00b      	beq.n	8007bd8 <TIM_OC2_SetConfig+0xc0>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a1d      	ldr	r2, [pc, #116]	; (8007c38 <TIM_OC2_SetConfig+0x120>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d007      	beq.n	8007bd8 <TIM_OC2_SetConfig+0xc0>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a1c      	ldr	r2, [pc, #112]	; (8007c3c <TIM_OC2_SetConfig+0x124>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d003      	beq.n	8007bd8 <TIM_OC2_SetConfig+0xc0>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a17      	ldr	r2, [pc, #92]	; (8007c30 <TIM_OC2_SetConfig+0x118>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d113      	bne.n	8007c00 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	621a      	str	r2, [r3, #32]
}
 8007c1a:	bf00      	nop
 8007c1c:	371c      	adds	r7, #28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40012c00 	.word	0x40012c00
 8007c2c:	40013400 	.word	0x40013400
 8007c30:	40015000 	.word	0x40015000
 8007c34:	40014000 	.word	0x40014000
 8007c38:	40014400 	.word	0x40014400
 8007c3c:	40014800 	.word	0x40014800

08007c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0303 	bic.w	r3, r3, #3
 8007c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a2b      	ldr	r2, [pc, #172]	; (8007d4c <TIM_OC3_SetConfig+0x10c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d007      	beq.n	8007cb2 <TIM_OC3_SetConfig+0x72>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a2a      	ldr	r2, [pc, #168]	; (8007d50 <TIM_OC3_SetConfig+0x110>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d003      	beq.n	8007cb2 <TIM_OC3_SetConfig+0x72>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a29      	ldr	r2, [pc, #164]	; (8007d54 <TIM_OC3_SetConfig+0x114>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d10d      	bne.n	8007cce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a1e      	ldr	r2, [pc, #120]	; (8007d4c <TIM_OC3_SetConfig+0x10c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d013      	beq.n	8007cfe <TIM_OC3_SetConfig+0xbe>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a1d      	ldr	r2, [pc, #116]	; (8007d50 <TIM_OC3_SetConfig+0x110>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00f      	beq.n	8007cfe <TIM_OC3_SetConfig+0xbe>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a1d      	ldr	r2, [pc, #116]	; (8007d58 <TIM_OC3_SetConfig+0x118>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00b      	beq.n	8007cfe <TIM_OC3_SetConfig+0xbe>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1c      	ldr	r2, [pc, #112]	; (8007d5c <TIM_OC3_SetConfig+0x11c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d007      	beq.n	8007cfe <TIM_OC3_SetConfig+0xbe>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a1b      	ldr	r2, [pc, #108]	; (8007d60 <TIM_OC3_SetConfig+0x120>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d003      	beq.n	8007cfe <TIM_OC3_SetConfig+0xbe>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a16      	ldr	r2, [pc, #88]	; (8007d54 <TIM_OC3_SetConfig+0x114>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d113      	bne.n	8007d26 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	621a      	str	r2, [r3, #32]
}
 8007d40:	bf00      	nop
 8007d42:	371c      	adds	r7, #28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	40012c00 	.word	0x40012c00
 8007d50:	40013400 	.word	0x40013400
 8007d54:	40015000 	.word	0x40015000
 8007d58:	40014000 	.word	0x40014000
 8007d5c:	40014400 	.word	0x40014400
 8007d60:	40014800 	.word	0x40014800

08007d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	021b      	lsls	r3, r3, #8
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	031b      	lsls	r3, r3, #12
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a2c      	ldr	r2, [pc, #176]	; (8007e74 <TIM_OC4_SetConfig+0x110>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d007      	beq.n	8007dd8 <TIM_OC4_SetConfig+0x74>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a2b      	ldr	r2, [pc, #172]	; (8007e78 <TIM_OC4_SetConfig+0x114>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d003      	beq.n	8007dd8 <TIM_OC4_SetConfig+0x74>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a2a      	ldr	r2, [pc, #168]	; (8007e7c <TIM_OC4_SetConfig+0x118>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d10d      	bne.n	8007df4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	031b      	lsls	r3, r3, #12
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007df2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a1f      	ldr	r2, [pc, #124]	; (8007e74 <TIM_OC4_SetConfig+0x110>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d013      	beq.n	8007e24 <TIM_OC4_SetConfig+0xc0>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a1e      	ldr	r2, [pc, #120]	; (8007e78 <TIM_OC4_SetConfig+0x114>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d00f      	beq.n	8007e24 <TIM_OC4_SetConfig+0xc0>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a1e      	ldr	r2, [pc, #120]	; (8007e80 <TIM_OC4_SetConfig+0x11c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00b      	beq.n	8007e24 <TIM_OC4_SetConfig+0xc0>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a1d      	ldr	r2, [pc, #116]	; (8007e84 <TIM_OC4_SetConfig+0x120>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d007      	beq.n	8007e24 <TIM_OC4_SetConfig+0xc0>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a1c      	ldr	r2, [pc, #112]	; (8007e88 <TIM_OC4_SetConfig+0x124>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d003      	beq.n	8007e24 <TIM_OC4_SetConfig+0xc0>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a17      	ldr	r2, [pc, #92]	; (8007e7c <TIM_OC4_SetConfig+0x118>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d113      	bne.n	8007e4c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e2a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e32:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	019b      	lsls	r3, r3, #6
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	019b      	lsls	r3, r3, #6
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	621a      	str	r2, [r3, #32]
}
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40012c00 	.word	0x40012c00
 8007e78:	40013400 	.word	0x40013400
 8007e7c:	40015000 	.word	0x40015000
 8007e80:	40014000 	.word	0x40014000
 8007e84:	40014400 	.word	0x40014400
 8007e88:	40014800 	.word	0x40014800

08007e8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ed0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	041b      	lsls	r3, r3, #16
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a19      	ldr	r2, [pc, #100]	; (8007f48 <TIM_OC5_SetConfig+0xbc>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d013      	beq.n	8007f0e <TIM_OC5_SetConfig+0x82>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a18      	ldr	r2, [pc, #96]	; (8007f4c <TIM_OC5_SetConfig+0xc0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00f      	beq.n	8007f0e <TIM_OC5_SetConfig+0x82>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a17      	ldr	r2, [pc, #92]	; (8007f50 <TIM_OC5_SetConfig+0xc4>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00b      	beq.n	8007f0e <TIM_OC5_SetConfig+0x82>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a16      	ldr	r2, [pc, #88]	; (8007f54 <TIM_OC5_SetConfig+0xc8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d007      	beq.n	8007f0e <TIM_OC5_SetConfig+0x82>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a15      	ldr	r2, [pc, #84]	; (8007f58 <TIM_OC5_SetConfig+0xcc>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d003      	beq.n	8007f0e <TIM_OC5_SetConfig+0x82>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a14      	ldr	r2, [pc, #80]	; (8007f5c <TIM_OC5_SetConfig+0xd0>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d109      	bne.n	8007f22 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	021b      	lsls	r3, r3, #8
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	621a      	str	r2, [r3, #32]
}
 8007f3c:	bf00      	nop
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	40012c00 	.word	0x40012c00
 8007f4c:	40013400 	.word	0x40013400
 8007f50:	40014000 	.word	0x40014000
 8007f54:	40014400 	.word	0x40014400
 8007f58:	40014800 	.word	0x40014800
 8007f5c:	40015000 	.word	0x40015000

08007f60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b087      	sub	sp, #28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	021b      	lsls	r3, r3, #8
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	051b      	lsls	r3, r3, #20
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a1a      	ldr	r2, [pc, #104]	; (8008020 <TIM_OC6_SetConfig+0xc0>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d013      	beq.n	8007fe4 <TIM_OC6_SetConfig+0x84>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a19      	ldr	r2, [pc, #100]	; (8008024 <TIM_OC6_SetConfig+0xc4>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00f      	beq.n	8007fe4 <TIM_OC6_SetConfig+0x84>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a18      	ldr	r2, [pc, #96]	; (8008028 <TIM_OC6_SetConfig+0xc8>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00b      	beq.n	8007fe4 <TIM_OC6_SetConfig+0x84>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a17      	ldr	r2, [pc, #92]	; (800802c <TIM_OC6_SetConfig+0xcc>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d007      	beq.n	8007fe4 <TIM_OC6_SetConfig+0x84>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a16      	ldr	r2, [pc, #88]	; (8008030 <TIM_OC6_SetConfig+0xd0>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d003      	beq.n	8007fe4 <TIM_OC6_SetConfig+0x84>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a15      	ldr	r2, [pc, #84]	; (8008034 <TIM_OC6_SetConfig+0xd4>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d109      	bne.n	8007ff8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	029b      	lsls	r3, r3, #10
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	621a      	str	r2, [r3, #32]
}
 8008012:	bf00      	nop
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	40012c00 	.word	0x40012c00
 8008024:	40013400 	.word	0x40013400
 8008028:	40014000 	.word	0x40014000
 800802c:	40014400 	.word	0x40014400
 8008030:	40014800 	.word	0x40014800
 8008034:	40015000 	.word	0x40015000

08008038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	f023 0201 	bic.w	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f023 030a 	bic.w	r3, r3, #10
 8008074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4313      	orrs	r3, r2
 800807c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	621a      	str	r2, [r3, #32]
}
 800808a:	bf00      	nop
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008096:	b480      	push	{r7}
 8008098:	b087      	sub	sp, #28
 800809a:	af00      	add	r7, sp, #0
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	f023 0210 	bic.w	r2, r3, #16
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	031b      	lsls	r3, r3, #12
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800810c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	f043 0307 	orr.w	r3, r3, #7
 800811c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	609a      	str	r2, [r3, #8]
}
 8008124:	bf00      	nop
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800814a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	021a      	lsls	r2, r3, #8
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	431a      	orrs	r2, r3
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4313      	orrs	r3, r2
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	4313      	orrs	r3, r2
 800815c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	609a      	str	r2, [r3, #8]
}
 8008164:	bf00      	nop
 8008166:	371c      	adds	r7, #28
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f003 031f 	and.w	r3, r3, #31
 8008182:	2201      	movs	r2, #1
 8008184:	fa02 f303 	lsl.w	r3, r2, r3
 8008188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6a1a      	ldr	r2, [r3, #32]
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	43db      	mvns	r3, r3
 8008192:	401a      	ands	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a1a      	ldr	r2, [r3, #32]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f003 031f 	and.w	r3, r3, #31
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	fa01 f303 	lsl.w	r3, r1, r3
 80081a8:	431a      	orrs	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	621a      	str	r2, [r3, #32]
}
 80081ae:	bf00      	nop
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
	...

080081bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e074      	b.n	80082be <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a34      	ldr	r2, [pc, #208]	; (80082cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d009      	beq.n	8008212 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a33      	ldr	r2, [pc, #204]	; (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d004      	beq.n	8008212 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a31      	ldr	r2, [pc, #196]	; (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d108      	bne.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008218:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800822a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a21      	ldr	r2, [pc, #132]	; (80082cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d022      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008254:	d01d      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a1f      	ldr	r2, [pc, #124]	; (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d018      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a1d      	ldr	r2, [pc, #116]	; (80082dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d013      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a1c      	ldr	r2, [pc, #112]	; (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00e      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a15      	ldr	r2, [pc, #84]	; (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d009      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a18      	ldr	r2, [pc, #96]	; (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d004      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a11      	ldr	r2, [pc, #68]	; (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d10c      	bne.n	80082ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	40012c00 	.word	0x40012c00
 80082d0:	40013400 	.word	0x40013400
 80082d4:	40015000 	.word	0x40015000
 80082d8:	40000400 	.word	0x40000400
 80082dc:	40000800 	.word	0x40000800
 80082e0:	40000c00 	.word	0x40000c00
 80082e4:	40014000 	.word	0x40014000

080082e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e042      	b.n	800840c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7fa fbf1 	bl	8002b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2224      	movs	r2, #36	; 0x24
 80083a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0201 	bic.w	r2, r2, #1
 80083b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fb24 	bl	8008a0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f825 	bl	8008414 <UART_SetConfig>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d101      	bne.n	80083d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e01b      	b.n	800840c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689a      	ldr	r2, [r3, #8]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0201 	orr.w	r2, r2, #1
 8008402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fba3 	bl	8008b50 <UART_CheckIdleState>
 800840a:	4603      	mov	r3, r0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008418:	b08c      	sub	sp, #48	; 0x30
 800841a:	af00      	add	r7, sp, #0
 800841c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	689a      	ldr	r2, [r3, #8]
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	431a      	orrs	r2, r3
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	431a      	orrs	r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	4313      	orrs	r3, r2
 800843a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4baa      	ldr	r3, [pc, #680]	; (80086ec <UART_SetConfig+0x2d8>)
 8008444:	4013      	ands	r3, r2
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	6812      	ldr	r2, [r2, #0]
 800844a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800844c:	430b      	orrs	r3, r1
 800844e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a9f      	ldr	r2, [pc, #636]	; (80086f0 <UART_SetConfig+0x2dc>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d004      	beq.n	8008480 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800847c:	4313      	orrs	r3, r2
 800847e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800848a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	6812      	ldr	r2, [r2, #0]
 8008492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008494:	430b      	orrs	r3, r1
 8008496:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849e:	f023 010f 	bic.w	r1, r3, #15
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a90      	ldr	r2, [pc, #576]	; (80086f4 <UART_SetConfig+0x2e0>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d125      	bne.n	8008504 <UART_SetConfig+0xf0>
 80084b8:	4b8f      	ldr	r3, [pc, #572]	; (80086f8 <UART_SetConfig+0x2e4>)
 80084ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d81a      	bhi.n	80084fc <UART_SetConfig+0xe8>
 80084c6:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <UART_SetConfig+0xb8>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	080084dd 	.word	0x080084dd
 80084d0:	080084ed 	.word	0x080084ed
 80084d4:	080084e5 	.word	0x080084e5
 80084d8:	080084f5 	.word	0x080084f5
 80084dc:	2301      	movs	r3, #1
 80084de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084e2:	e116      	b.n	8008712 <UART_SetConfig+0x2fe>
 80084e4:	2302      	movs	r3, #2
 80084e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ea:	e112      	b.n	8008712 <UART_SetConfig+0x2fe>
 80084ec:	2304      	movs	r3, #4
 80084ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084f2:	e10e      	b.n	8008712 <UART_SetConfig+0x2fe>
 80084f4:	2308      	movs	r3, #8
 80084f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084fa:	e10a      	b.n	8008712 <UART_SetConfig+0x2fe>
 80084fc:	2310      	movs	r3, #16
 80084fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008502:	e106      	b.n	8008712 <UART_SetConfig+0x2fe>
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a7c      	ldr	r2, [pc, #496]	; (80086fc <UART_SetConfig+0x2e8>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d138      	bne.n	8008580 <UART_SetConfig+0x16c>
 800850e:	4b7a      	ldr	r3, [pc, #488]	; (80086f8 <UART_SetConfig+0x2e4>)
 8008510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008514:	f003 030c 	and.w	r3, r3, #12
 8008518:	2b0c      	cmp	r3, #12
 800851a:	d82d      	bhi.n	8008578 <UART_SetConfig+0x164>
 800851c:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <UART_SetConfig+0x110>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008559 	.word	0x08008559
 8008528:	08008579 	.word	0x08008579
 800852c:	08008579 	.word	0x08008579
 8008530:	08008579 	.word	0x08008579
 8008534:	08008569 	.word	0x08008569
 8008538:	08008579 	.word	0x08008579
 800853c:	08008579 	.word	0x08008579
 8008540:	08008579 	.word	0x08008579
 8008544:	08008561 	.word	0x08008561
 8008548:	08008579 	.word	0x08008579
 800854c:	08008579 	.word	0x08008579
 8008550:	08008579 	.word	0x08008579
 8008554:	08008571 	.word	0x08008571
 8008558:	2300      	movs	r3, #0
 800855a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800855e:	e0d8      	b.n	8008712 <UART_SetConfig+0x2fe>
 8008560:	2302      	movs	r3, #2
 8008562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008566:	e0d4      	b.n	8008712 <UART_SetConfig+0x2fe>
 8008568:	2304      	movs	r3, #4
 800856a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800856e:	e0d0      	b.n	8008712 <UART_SetConfig+0x2fe>
 8008570:	2308      	movs	r3, #8
 8008572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008576:	e0cc      	b.n	8008712 <UART_SetConfig+0x2fe>
 8008578:	2310      	movs	r3, #16
 800857a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800857e:	e0c8      	b.n	8008712 <UART_SetConfig+0x2fe>
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a5e      	ldr	r2, [pc, #376]	; (8008700 <UART_SetConfig+0x2ec>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d125      	bne.n	80085d6 <UART_SetConfig+0x1c2>
 800858a:	4b5b      	ldr	r3, [pc, #364]	; (80086f8 <UART_SetConfig+0x2e4>)
 800858c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008590:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008594:	2b30      	cmp	r3, #48	; 0x30
 8008596:	d016      	beq.n	80085c6 <UART_SetConfig+0x1b2>
 8008598:	2b30      	cmp	r3, #48	; 0x30
 800859a:	d818      	bhi.n	80085ce <UART_SetConfig+0x1ba>
 800859c:	2b20      	cmp	r3, #32
 800859e:	d00a      	beq.n	80085b6 <UART_SetConfig+0x1a2>
 80085a0:	2b20      	cmp	r3, #32
 80085a2:	d814      	bhi.n	80085ce <UART_SetConfig+0x1ba>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <UART_SetConfig+0x19a>
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	d008      	beq.n	80085be <UART_SetConfig+0x1aa>
 80085ac:	e00f      	b.n	80085ce <UART_SetConfig+0x1ba>
 80085ae:	2300      	movs	r3, #0
 80085b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085b4:	e0ad      	b.n	8008712 <UART_SetConfig+0x2fe>
 80085b6:	2302      	movs	r3, #2
 80085b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085bc:	e0a9      	b.n	8008712 <UART_SetConfig+0x2fe>
 80085be:	2304      	movs	r3, #4
 80085c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085c4:	e0a5      	b.n	8008712 <UART_SetConfig+0x2fe>
 80085c6:	2308      	movs	r3, #8
 80085c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085cc:	e0a1      	b.n	8008712 <UART_SetConfig+0x2fe>
 80085ce:	2310      	movs	r3, #16
 80085d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d4:	e09d      	b.n	8008712 <UART_SetConfig+0x2fe>
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a4a      	ldr	r2, [pc, #296]	; (8008704 <UART_SetConfig+0x2f0>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d125      	bne.n	800862c <UART_SetConfig+0x218>
 80085e0:	4b45      	ldr	r3, [pc, #276]	; (80086f8 <UART_SetConfig+0x2e4>)
 80085e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085ea:	2bc0      	cmp	r3, #192	; 0xc0
 80085ec:	d016      	beq.n	800861c <UART_SetConfig+0x208>
 80085ee:	2bc0      	cmp	r3, #192	; 0xc0
 80085f0:	d818      	bhi.n	8008624 <UART_SetConfig+0x210>
 80085f2:	2b80      	cmp	r3, #128	; 0x80
 80085f4:	d00a      	beq.n	800860c <UART_SetConfig+0x1f8>
 80085f6:	2b80      	cmp	r3, #128	; 0x80
 80085f8:	d814      	bhi.n	8008624 <UART_SetConfig+0x210>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d002      	beq.n	8008604 <UART_SetConfig+0x1f0>
 80085fe:	2b40      	cmp	r3, #64	; 0x40
 8008600:	d008      	beq.n	8008614 <UART_SetConfig+0x200>
 8008602:	e00f      	b.n	8008624 <UART_SetConfig+0x210>
 8008604:	2300      	movs	r3, #0
 8008606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800860a:	e082      	b.n	8008712 <UART_SetConfig+0x2fe>
 800860c:	2302      	movs	r3, #2
 800860e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008612:	e07e      	b.n	8008712 <UART_SetConfig+0x2fe>
 8008614:	2304      	movs	r3, #4
 8008616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800861a:	e07a      	b.n	8008712 <UART_SetConfig+0x2fe>
 800861c:	2308      	movs	r3, #8
 800861e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008622:	e076      	b.n	8008712 <UART_SetConfig+0x2fe>
 8008624:	2310      	movs	r3, #16
 8008626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800862a:	e072      	b.n	8008712 <UART_SetConfig+0x2fe>
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a35      	ldr	r2, [pc, #212]	; (8008708 <UART_SetConfig+0x2f4>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d12a      	bne.n	800868c <UART_SetConfig+0x278>
 8008636:	4b30      	ldr	r3, [pc, #192]	; (80086f8 <UART_SetConfig+0x2e4>)
 8008638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800863c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008644:	d01a      	beq.n	800867c <UART_SetConfig+0x268>
 8008646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800864a:	d81b      	bhi.n	8008684 <UART_SetConfig+0x270>
 800864c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008650:	d00c      	beq.n	800866c <UART_SetConfig+0x258>
 8008652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008656:	d815      	bhi.n	8008684 <UART_SetConfig+0x270>
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <UART_SetConfig+0x250>
 800865c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008660:	d008      	beq.n	8008674 <UART_SetConfig+0x260>
 8008662:	e00f      	b.n	8008684 <UART_SetConfig+0x270>
 8008664:	2300      	movs	r3, #0
 8008666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800866a:	e052      	b.n	8008712 <UART_SetConfig+0x2fe>
 800866c:	2302      	movs	r3, #2
 800866e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008672:	e04e      	b.n	8008712 <UART_SetConfig+0x2fe>
 8008674:	2304      	movs	r3, #4
 8008676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800867a:	e04a      	b.n	8008712 <UART_SetConfig+0x2fe>
 800867c:	2308      	movs	r3, #8
 800867e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008682:	e046      	b.n	8008712 <UART_SetConfig+0x2fe>
 8008684:	2310      	movs	r3, #16
 8008686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800868a:	e042      	b.n	8008712 <UART_SetConfig+0x2fe>
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a17      	ldr	r2, [pc, #92]	; (80086f0 <UART_SetConfig+0x2dc>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d13a      	bne.n	800870c <UART_SetConfig+0x2f8>
 8008696:	4b18      	ldr	r3, [pc, #96]	; (80086f8 <UART_SetConfig+0x2e4>)
 8008698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800869c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80086a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086a4:	d01a      	beq.n	80086dc <UART_SetConfig+0x2c8>
 80086a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086aa:	d81b      	bhi.n	80086e4 <UART_SetConfig+0x2d0>
 80086ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b0:	d00c      	beq.n	80086cc <UART_SetConfig+0x2b8>
 80086b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b6:	d815      	bhi.n	80086e4 <UART_SetConfig+0x2d0>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <UART_SetConfig+0x2b0>
 80086bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c0:	d008      	beq.n	80086d4 <UART_SetConfig+0x2c0>
 80086c2:	e00f      	b.n	80086e4 <UART_SetConfig+0x2d0>
 80086c4:	2300      	movs	r3, #0
 80086c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ca:	e022      	b.n	8008712 <UART_SetConfig+0x2fe>
 80086cc:	2302      	movs	r3, #2
 80086ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086d2:	e01e      	b.n	8008712 <UART_SetConfig+0x2fe>
 80086d4:	2304      	movs	r3, #4
 80086d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086da:	e01a      	b.n	8008712 <UART_SetConfig+0x2fe>
 80086dc:	2308      	movs	r3, #8
 80086de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086e2:	e016      	b.n	8008712 <UART_SetConfig+0x2fe>
 80086e4:	2310      	movs	r3, #16
 80086e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ea:	e012      	b.n	8008712 <UART_SetConfig+0x2fe>
 80086ec:	cfff69f3 	.word	0xcfff69f3
 80086f0:	40008000 	.word	0x40008000
 80086f4:	40013800 	.word	0x40013800
 80086f8:	40021000 	.word	0x40021000
 80086fc:	40004400 	.word	0x40004400
 8008700:	40004800 	.word	0x40004800
 8008704:	40004c00 	.word	0x40004c00
 8008708:	40005000 	.word	0x40005000
 800870c:	2310      	movs	r3, #16
 800870e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4aae      	ldr	r2, [pc, #696]	; (80089d0 <UART_SetConfig+0x5bc>)
 8008718:	4293      	cmp	r3, r2
 800871a:	f040 8097 	bne.w	800884c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800871e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008722:	2b08      	cmp	r3, #8
 8008724:	d823      	bhi.n	800876e <UART_SetConfig+0x35a>
 8008726:	a201      	add	r2, pc, #4	; (adr r2, 800872c <UART_SetConfig+0x318>)
 8008728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872c:	08008751 	.word	0x08008751
 8008730:	0800876f 	.word	0x0800876f
 8008734:	08008759 	.word	0x08008759
 8008738:	0800876f 	.word	0x0800876f
 800873c:	0800875f 	.word	0x0800875f
 8008740:	0800876f 	.word	0x0800876f
 8008744:	0800876f 	.word	0x0800876f
 8008748:	0800876f 	.word	0x0800876f
 800874c:	08008767 	.word	0x08008767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008750:	f7fd fe40 	bl	80063d4 <HAL_RCC_GetPCLK1Freq>
 8008754:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008756:	e010      	b.n	800877a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008758:	4b9e      	ldr	r3, [pc, #632]	; (80089d4 <UART_SetConfig+0x5c0>)
 800875a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800875c:	e00d      	b.n	800877a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800875e:	f7fd fdcb 	bl	80062f8 <HAL_RCC_GetSysClockFreq>
 8008762:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008764:	e009      	b.n	800877a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800876c:	e005      	b.n	800877a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008778:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 8130 	beq.w	80089e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	4a94      	ldr	r2, [pc, #592]	; (80089d8 <UART_SetConfig+0x5c4>)
 8008788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800878c:	461a      	mov	r2, r3
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	fbb3 f3f2 	udiv	r3, r3, r2
 8008794:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	4413      	add	r3, r2
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d305      	bcc.n	80087b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d903      	bls.n	80087ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087b8:	e113      	b.n	80089e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	2200      	movs	r2, #0
 80087be:	60bb      	str	r3, [r7, #8]
 80087c0:	60fa      	str	r2, [r7, #12]
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	4a84      	ldr	r2, [pc, #528]	; (80089d8 <UART_SetConfig+0x5c4>)
 80087c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2200      	movs	r2, #0
 80087d0:	603b      	str	r3, [r7, #0]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087dc:	f7f8 f9d8 	bl	8000b90 <__aeabi_uldivmod>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4610      	mov	r0, r2
 80087e6:	4619      	mov	r1, r3
 80087e8:	f04f 0200 	mov.w	r2, #0
 80087ec:	f04f 0300 	mov.w	r3, #0
 80087f0:	020b      	lsls	r3, r1, #8
 80087f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087f6:	0202      	lsls	r2, r0, #8
 80087f8:	6979      	ldr	r1, [r7, #20]
 80087fa:	6849      	ldr	r1, [r1, #4]
 80087fc:	0849      	lsrs	r1, r1, #1
 80087fe:	2000      	movs	r0, #0
 8008800:	460c      	mov	r4, r1
 8008802:	4605      	mov	r5, r0
 8008804:	eb12 0804 	adds.w	r8, r2, r4
 8008808:	eb43 0905 	adc.w	r9, r3, r5
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	469a      	mov	sl, r3
 8008814:	4693      	mov	fp, r2
 8008816:	4652      	mov	r2, sl
 8008818:	465b      	mov	r3, fp
 800881a:	4640      	mov	r0, r8
 800881c:	4649      	mov	r1, r9
 800881e:	f7f8 f9b7 	bl	8000b90 <__aeabi_uldivmod>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4613      	mov	r3, r2
 8008828:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008830:	d308      	bcc.n	8008844 <UART_SetConfig+0x430>
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008838:	d204      	bcs.n	8008844 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6a3a      	ldr	r2, [r7, #32]
 8008840:	60da      	str	r2, [r3, #12]
 8008842:	e0ce      	b.n	80089e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800884a:	e0ca      	b.n	80089e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008854:	d166      	bne.n	8008924 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008856:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800885a:	2b08      	cmp	r3, #8
 800885c:	d827      	bhi.n	80088ae <UART_SetConfig+0x49a>
 800885e:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <UART_SetConfig+0x450>)
 8008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008864:	08008889 	.word	0x08008889
 8008868:	08008891 	.word	0x08008891
 800886c:	08008899 	.word	0x08008899
 8008870:	080088af 	.word	0x080088af
 8008874:	0800889f 	.word	0x0800889f
 8008878:	080088af 	.word	0x080088af
 800887c:	080088af 	.word	0x080088af
 8008880:	080088af 	.word	0x080088af
 8008884:	080088a7 	.word	0x080088a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008888:	f7fd fda4 	bl	80063d4 <HAL_RCC_GetPCLK1Freq>
 800888c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800888e:	e014      	b.n	80088ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008890:	f7fd fdb6 	bl	8006400 <HAL_RCC_GetPCLK2Freq>
 8008894:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008896:	e010      	b.n	80088ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008898:	4b4e      	ldr	r3, [pc, #312]	; (80089d4 <UART_SetConfig+0x5c0>)
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800889c:	e00d      	b.n	80088ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800889e:	f7fd fd2b 	bl	80062f8 <HAL_RCC_GetSysClockFreq>
 80088a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088a4:	e009      	b.n	80088ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088ac:	e005      	b.n	80088ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 8090 	beq.w	80089e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	4a44      	ldr	r2, [pc, #272]	; (80089d8 <UART_SetConfig+0x5c4>)
 80088c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088cc:	461a      	mov	r2, r3
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80088d4:	005a      	lsls	r2, r3, #1
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	085b      	lsrs	r3, r3, #1
 80088dc:	441a      	add	r2, r3
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	2b0f      	cmp	r3, #15
 80088ec:	d916      	bls.n	800891c <UART_SetConfig+0x508>
 80088ee:	6a3b      	ldr	r3, [r7, #32]
 80088f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088f4:	d212      	bcs.n	800891c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f023 030f 	bic.w	r3, r3, #15
 80088fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	085b      	lsrs	r3, r3, #1
 8008904:	b29b      	uxth	r3, r3
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	b29a      	uxth	r2, r3
 800890c:	8bfb      	ldrh	r3, [r7, #30]
 800890e:	4313      	orrs	r3, r2
 8008910:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	8bfa      	ldrh	r2, [r7, #30]
 8008918:	60da      	str	r2, [r3, #12]
 800891a:	e062      	b.n	80089e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008922:	e05e      	b.n	80089e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008924:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008928:	2b08      	cmp	r3, #8
 800892a:	d828      	bhi.n	800897e <UART_SetConfig+0x56a>
 800892c:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <UART_SetConfig+0x520>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	08008959 	.word	0x08008959
 8008938:	08008961 	.word	0x08008961
 800893c:	08008969 	.word	0x08008969
 8008940:	0800897f 	.word	0x0800897f
 8008944:	0800896f 	.word	0x0800896f
 8008948:	0800897f 	.word	0x0800897f
 800894c:	0800897f 	.word	0x0800897f
 8008950:	0800897f 	.word	0x0800897f
 8008954:	08008977 	.word	0x08008977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008958:	f7fd fd3c 	bl	80063d4 <HAL_RCC_GetPCLK1Freq>
 800895c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800895e:	e014      	b.n	800898a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008960:	f7fd fd4e 	bl	8006400 <HAL_RCC_GetPCLK2Freq>
 8008964:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008966:	e010      	b.n	800898a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008968:	4b1a      	ldr	r3, [pc, #104]	; (80089d4 <UART_SetConfig+0x5c0>)
 800896a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800896c:	e00d      	b.n	800898a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800896e:	f7fd fcc3 	bl	80062f8 <HAL_RCC_GetSysClockFreq>
 8008972:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008974:	e009      	b.n	800898a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800897a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800897c:	e005      	b.n	800898a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008988:	bf00      	nop
    }

    if (pclk != 0U)
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	2b00      	cmp	r3, #0
 800898e:	d028      	beq.n	80089e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	4a10      	ldr	r2, [pc, #64]	; (80089d8 <UART_SetConfig+0x5c4>)
 8008996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800899a:	461a      	mov	r2, r3
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	fbb3 f2f2 	udiv	r2, r3, r2
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	085b      	lsrs	r3, r3, #1
 80089a8:	441a      	add	r2, r3
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	2b0f      	cmp	r3, #15
 80089b8:	d910      	bls.n	80089dc <UART_SetConfig+0x5c8>
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c0:	d20c      	bcs.n	80089dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60da      	str	r2, [r3, #12]
 80089cc:	e009      	b.n	80089e2 <UART_SetConfig+0x5ce>
 80089ce:	bf00      	nop
 80089d0:	40008000 	.word	0x40008000
 80089d4:	00f42400 	.word	0x00f42400
 80089d8:	080092f0 	.word	0x080092f0
      }
      else
      {
        ret = HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2200      	movs	r2, #0
 80089f6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	2200      	movs	r2, #0
 80089fc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80089fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3730      	adds	r7, #48	; 0x30
 8008a06:	46bd      	mov	sp, r7
 8008a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a18:	f003 0308 	and.w	r3, r3, #8
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00a      	beq.n	8008a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00a      	beq.n	8008a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00a      	beq.n	8008a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7e:	f003 0304 	and.w	r3, r3, #4
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00a      	beq.n	8008abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01a      	beq.n	8008b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b0a:	d10a      	bne.n	8008b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	605a      	str	r2, [r3, #4]
  }
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b098      	sub	sp, #96	; 0x60
 8008b54:	af02      	add	r7, sp, #8
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b60:	f7fa fa30 	bl	8002fc4 <HAL_GetTick>
 8008b64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0308 	and.w	r3, r3, #8
 8008b70:	2b08      	cmp	r3, #8
 8008b72:	d12f      	bne.n	8008bd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f88e 	bl	8008ca4 <UART_WaitOnFlagUntilTimeout>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d022      	beq.n	8008bd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b96:	e853 3f00 	ldrex	r3, [r3]
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ba2:	653b      	str	r3, [r7, #80]	; 0x50
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bac:	647b      	str	r3, [r7, #68]	; 0x44
 8008bae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bb4:	e841 2300 	strex	r3, r2, [r1]
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1e6      	bne.n	8008b8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e063      	b.n	8008c9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d149      	bne.n	8008c76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008be2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bea:	2200      	movs	r2, #0
 8008bec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f857 	bl	8008ca4 <UART_WaitOnFlagUntilTimeout>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d03c      	beq.n	8008c76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	623b      	str	r3, [r7, #32]
   return(result);
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e6      	bne.n	8008bfc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3308      	adds	r3, #8
 8008c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f023 0301 	bic.w	r3, r3, #1
 8008c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c4e:	61fa      	str	r2, [r7, #28]
 8008c50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c52:	69b9      	ldr	r1, [r7, #24]
 8008c54:	69fa      	ldr	r2, [r7, #28]
 8008c56:	e841 2300 	strex	r3, r2, [r1]
 8008c5a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1e5      	bne.n	8008c2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2220      	movs	r2, #32
 8008c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e012      	b.n	8008c9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2220      	movs	r2, #32
 8008c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3758      	adds	r7, #88	; 0x58
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	603b      	str	r3, [r7, #0]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cb4:	e04f      	b.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbc:	d04b      	beq.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cbe:	f7fa f981 	bl	8002fc4 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d302      	bcc.n	8008cd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e04e      	b.n	8008d76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0304 	and.w	r3, r3, #4
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d037      	beq.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2b80      	cmp	r3, #128	; 0x80
 8008cea:	d034      	beq.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b40      	cmp	r3, #64	; 0x40
 8008cf0:	d031      	beq.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	f003 0308 	and.w	r3, r3, #8
 8008cfc:	2b08      	cmp	r3, #8
 8008cfe:	d110      	bne.n	8008d22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2208      	movs	r2, #8
 8008d06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f838 	bl	8008d7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2208      	movs	r2, #8
 8008d12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e029      	b.n	8008d76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d30:	d111      	bne.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 f81e 	bl	8008d7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e00f      	b.n	8008d76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	69da      	ldr	r2, [r3, #28]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	bf0c      	ite	eq
 8008d66:	2301      	moveq	r3, #1
 8008d68:	2300      	movne	r3, #0
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d0a0      	beq.n	8008cb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b095      	sub	sp, #84	; 0x54
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8e:	e853 3f00 	ldrex	r3, [r3]
 8008d92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da4:	643b      	str	r3, [r7, #64]	; 0x40
 8008da6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008daa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dac:	e841 2300 	strex	r3, r2, [r1]
 8008db0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e6      	bne.n	8008d86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	e853 3f00 	ldrex	r3, [r3]
 8008dc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dce:	f023 0301 	bic.w	r3, r3, #1
 8008dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3308      	adds	r3, #8
 8008dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ddc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e3      	bne.n	8008db8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d118      	bne.n	8008e2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	e853 3f00 	ldrex	r3, [r3]
 8008e04:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f023 0310 	bic.w	r3, r3, #16
 8008e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e16:	61bb      	str	r3, [r7, #24]
 8008e18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	6979      	ldr	r1, [r7, #20]
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	e841 2300 	strex	r3, r2, [r1]
 8008e22:	613b      	str	r3, [r7, #16]
   return(result);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e6      	bne.n	8008df8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008e3e:	bf00      	nop
 8008e40:	3754      	adds	r7, #84	; 0x54
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b085      	sub	sp, #20
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d101      	bne.n	8008e60 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	e027      	b.n	8008eb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2224      	movs	r2, #36	; 0x24
 8008e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 0201 	bic.w	r2, r2, #1
 8008e86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d101      	bne.n	8008ed4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e02d      	b.n	8008f30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2224      	movs	r2, #36	; 0x24
 8008ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0201 	bic.w	r2, r2, #1
 8008efa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f84f 	bl	8008fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2220      	movs	r2, #32
 8008f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e02d      	b.n	8008fac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2224      	movs	r2, #36	; 0x24
 8008f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f022 0201 	bic.w	r2, r2, #1
 8008f76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f811 	bl	8008fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d108      	bne.n	8008fd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fd4:	e031      	b.n	800903a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fd6:	2308      	movs	r3, #8
 8008fd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fda:	2308      	movs	r3, #8
 8008fdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	0e5b      	lsrs	r3, r3, #25
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	0f5b      	lsrs	r3, r3, #29
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 0307 	and.w	r3, r3, #7
 8008ffc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	7b3a      	ldrb	r2, [r7, #12]
 8009002:	4911      	ldr	r1, [pc, #68]	; (8009048 <UARTEx_SetNbDataToProcess+0x94>)
 8009004:	5c8a      	ldrb	r2, [r1, r2]
 8009006:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800900a:	7b3a      	ldrb	r2, [r7, #12]
 800900c:	490f      	ldr	r1, [pc, #60]	; (800904c <UARTEx_SetNbDataToProcess+0x98>)
 800900e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009010:	fb93 f3f2 	sdiv	r3, r3, r2
 8009014:	b29a      	uxth	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	7b7a      	ldrb	r2, [r7, #13]
 8009020:	4909      	ldr	r1, [pc, #36]	; (8009048 <UARTEx_SetNbDataToProcess+0x94>)
 8009022:	5c8a      	ldrb	r2, [r1, r2]
 8009024:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009028:	7b7a      	ldrb	r2, [r7, #13]
 800902a:	4908      	ldr	r1, [pc, #32]	; (800904c <UARTEx_SetNbDataToProcess+0x98>)
 800902c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800902e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009032:	b29a      	uxth	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800903a:	bf00      	nop
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	08009308 	.word	0x08009308
 800904c:	08009310 	.word	0x08009310

08009050 <memset>:
 8009050:	4402      	add	r2, r0
 8009052:	4603      	mov	r3, r0
 8009054:	4293      	cmp	r3, r2
 8009056:	d100      	bne.n	800905a <memset+0xa>
 8009058:	4770      	bx	lr
 800905a:	f803 1b01 	strb.w	r1, [r3], #1
 800905e:	e7f9      	b.n	8009054 <memset+0x4>

08009060 <__errno>:
 8009060:	4b01      	ldr	r3, [pc, #4]	; (8009068 <__errno+0x8>)
 8009062:	6818      	ldr	r0, [r3, #0]
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	20000064 	.word	0x20000064

0800906c <__libc_init_array>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	4d0d      	ldr	r5, [pc, #52]	; (80090a4 <__libc_init_array+0x38>)
 8009070:	4c0d      	ldr	r4, [pc, #52]	; (80090a8 <__libc_init_array+0x3c>)
 8009072:	1b64      	subs	r4, r4, r5
 8009074:	10a4      	asrs	r4, r4, #2
 8009076:	2600      	movs	r6, #0
 8009078:	42a6      	cmp	r6, r4
 800907a:	d109      	bne.n	8009090 <__libc_init_array+0x24>
 800907c:	4d0b      	ldr	r5, [pc, #44]	; (80090ac <__libc_init_array+0x40>)
 800907e:	4c0c      	ldr	r4, [pc, #48]	; (80090b0 <__libc_init_array+0x44>)
 8009080:	f000 f91e 	bl	80092c0 <_init>
 8009084:	1b64      	subs	r4, r4, r5
 8009086:	10a4      	asrs	r4, r4, #2
 8009088:	2600      	movs	r6, #0
 800908a:	42a6      	cmp	r6, r4
 800908c:	d105      	bne.n	800909a <__libc_init_array+0x2e>
 800908e:	bd70      	pop	{r4, r5, r6, pc}
 8009090:	f855 3b04 	ldr.w	r3, [r5], #4
 8009094:	4798      	blx	r3
 8009096:	3601      	adds	r6, #1
 8009098:	e7ee      	b.n	8009078 <__libc_init_array+0xc>
 800909a:	f855 3b04 	ldr.w	r3, [r5], #4
 800909e:	4798      	blx	r3
 80090a0:	3601      	adds	r6, #1
 80090a2:	e7f2      	b.n	800908a <__libc_init_array+0x1e>
 80090a4:	08009320 	.word	0x08009320
 80090a8:	08009320 	.word	0x08009320
 80090ac:	08009320 	.word	0x08009320
 80090b0:	08009324 	.word	0x08009324

080090b4 <sqrt>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	ed2d 8b02 	vpush	{d8}
 80090ba:	ec55 4b10 	vmov	r4, r5, d0
 80090be:	f000 f825 	bl	800910c <__ieee754_sqrt>
 80090c2:	4622      	mov	r2, r4
 80090c4:	462b      	mov	r3, r5
 80090c6:	4620      	mov	r0, r4
 80090c8:	4629      	mov	r1, r5
 80090ca:	eeb0 8a40 	vmov.f32	s16, s0
 80090ce:	eef0 8a60 	vmov.f32	s17, s1
 80090d2:	f7f7 fcf7 	bl	8000ac4 <__aeabi_dcmpun>
 80090d6:	b990      	cbnz	r0, 80090fe <sqrt+0x4a>
 80090d8:	2200      	movs	r2, #0
 80090da:	2300      	movs	r3, #0
 80090dc:	4620      	mov	r0, r4
 80090de:	4629      	mov	r1, r5
 80090e0:	f7f7 fcc8 	bl	8000a74 <__aeabi_dcmplt>
 80090e4:	b158      	cbz	r0, 80090fe <sqrt+0x4a>
 80090e6:	f7ff ffbb 	bl	8009060 <__errno>
 80090ea:	2321      	movs	r3, #33	; 0x21
 80090ec:	6003      	str	r3, [r0, #0]
 80090ee:	2200      	movs	r2, #0
 80090f0:	2300      	movs	r3, #0
 80090f2:	4610      	mov	r0, r2
 80090f4:	4619      	mov	r1, r3
 80090f6:	f7f7 fb75 	bl	80007e4 <__aeabi_ddiv>
 80090fa:	ec41 0b18 	vmov	d8, r0, r1
 80090fe:	eeb0 0a48 	vmov.f32	s0, s16
 8009102:	eef0 0a68 	vmov.f32	s1, s17
 8009106:	ecbd 8b02 	vpop	{d8}
 800910a:	bd38      	pop	{r3, r4, r5, pc}

0800910c <__ieee754_sqrt>:
 800910c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009110:	ec55 4b10 	vmov	r4, r5, d0
 8009114:	4e67      	ldr	r6, [pc, #412]	; (80092b4 <__ieee754_sqrt+0x1a8>)
 8009116:	43ae      	bics	r6, r5
 8009118:	ee10 0a10 	vmov	r0, s0
 800911c:	ee10 2a10 	vmov	r2, s0
 8009120:	4629      	mov	r1, r5
 8009122:	462b      	mov	r3, r5
 8009124:	d10d      	bne.n	8009142 <__ieee754_sqrt+0x36>
 8009126:	f7f7 fa33 	bl	8000590 <__aeabi_dmul>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4620      	mov	r0, r4
 8009130:	4629      	mov	r1, r5
 8009132:	f7f7 f877 	bl	8000224 <__adddf3>
 8009136:	4604      	mov	r4, r0
 8009138:	460d      	mov	r5, r1
 800913a:	ec45 4b10 	vmov	d0, r4, r5
 800913e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009142:	2d00      	cmp	r5, #0
 8009144:	dc0b      	bgt.n	800915e <__ieee754_sqrt+0x52>
 8009146:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800914a:	4326      	orrs	r6, r4
 800914c:	d0f5      	beq.n	800913a <__ieee754_sqrt+0x2e>
 800914e:	b135      	cbz	r5, 800915e <__ieee754_sqrt+0x52>
 8009150:	f7f7 f866 	bl	8000220 <__aeabi_dsub>
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	f7f7 fb44 	bl	80007e4 <__aeabi_ddiv>
 800915c:	e7eb      	b.n	8009136 <__ieee754_sqrt+0x2a>
 800915e:	1509      	asrs	r1, r1, #20
 8009160:	f000 808d 	beq.w	800927e <__ieee754_sqrt+0x172>
 8009164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009168:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800916c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009170:	07c9      	lsls	r1, r1, #31
 8009172:	bf5c      	itt	pl
 8009174:	005b      	lslpl	r3, r3, #1
 8009176:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800917a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800917e:	bf58      	it	pl
 8009180:	0052      	lslpl	r2, r2, #1
 8009182:	2500      	movs	r5, #0
 8009184:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009188:	1076      	asrs	r6, r6, #1
 800918a:	0052      	lsls	r2, r2, #1
 800918c:	f04f 0e16 	mov.w	lr, #22
 8009190:	46ac      	mov	ip, r5
 8009192:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009196:	eb0c 0001 	add.w	r0, ip, r1
 800919a:	4298      	cmp	r0, r3
 800919c:	bfde      	ittt	le
 800919e:	1a1b      	suble	r3, r3, r0
 80091a0:	eb00 0c01 	addle.w	ip, r0, r1
 80091a4:	186d      	addle	r5, r5, r1
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	f1be 0e01 	subs.w	lr, lr, #1
 80091ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80091b0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80091b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80091b8:	d1ed      	bne.n	8009196 <__ieee754_sqrt+0x8a>
 80091ba:	4674      	mov	r4, lr
 80091bc:	2720      	movs	r7, #32
 80091be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80091c2:	4563      	cmp	r3, ip
 80091c4:	eb01 000e 	add.w	r0, r1, lr
 80091c8:	dc02      	bgt.n	80091d0 <__ieee754_sqrt+0xc4>
 80091ca:	d113      	bne.n	80091f4 <__ieee754_sqrt+0xe8>
 80091cc:	4290      	cmp	r0, r2
 80091ce:	d811      	bhi.n	80091f4 <__ieee754_sqrt+0xe8>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	eb00 0e01 	add.w	lr, r0, r1
 80091d6:	da57      	bge.n	8009288 <__ieee754_sqrt+0x17c>
 80091d8:	f1be 0f00 	cmp.w	lr, #0
 80091dc:	db54      	blt.n	8009288 <__ieee754_sqrt+0x17c>
 80091de:	f10c 0801 	add.w	r8, ip, #1
 80091e2:	eba3 030c 	sub.w	r3, r3, ip
 80091e6:	4290      	cmp	r0, r2
 80091e8:	bf88      	it	hi
 80091ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80091ee:	1a12      	subs	r2, r2, r0
 80091f0:	440c      	add	r4, r1
 80091f2:	46c4      	mov	ip, r8
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	3f01      	subs	r7, #1
 80091f8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80091fc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009200:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009204:	d1dd      	bne.n	80091c2 <__ieee754_sqrt+0xb6>
 8009206:	4313      	orrs	r3, r2
 8009208:	d01b      	beq.n	8009242 <__ieee754_sqrt+0x136>
 800920a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80092b8 <__ieee754_sqrt+0x1ac>
 800920e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80092bc <__ieee754_sqrt+0x1b0>
 8009212:	e9da 0100 	ldrd	r0, r1, [sl]
 8009216:	e9db 2300 	ldrd	r2, r3, [fp]
 800921a:	f7f7 f801 	bl	8000220 <__aeabi_dsub>
 800921e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	4640      	mov	r0, r8
 8009228:	4649      	mov	r1, r9
 800922a:	f7f7 fc2d 	bl	8000a88 <__aeabi_dcmple>
 800922e:	b140      	cbz	r0, 8009242 <__ieee754_sqrt+0x136>
 8009230:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009234:	e9da 0100 	ldrd	r0, r1, [sl]
 8009238:	e9db 2300 	ldrd	r2, r3, [fp]
 800923c:	d126      	bne.n	800928c <__ieee754_sqrt+0x180>
 800923e:	3501      	adds	r5, #1
 8009240:	463c      	mov	r4, r7
 8009242:	106a      	asrs	r2, r5, #1
 8009244:	0863      	lsrs	r3, r4, #1
 8009246:	07e9      	lsls	r1, r5, #31
 8009248:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800924c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009250:	bf48      	it	mi
 8009252:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009256:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800925a:	461c      	mov	r4, r3
 800925c:	e76d      	b.n	800913a <__ieee754_sqrt+0x2e>
 800925e:	0ad3      	lsrs	r3, r2, #11
 8009260:	3815      	subs	r0, #21
 8009262:	0552      	lsls	r2, r2, #21
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0fa      	beq.n	800925e <__ieee754_sqrt+0x152>
 8009268:	02dc      	lsls	r4, r3, #11
 800926a:	d50a      	bpl.n	8009282 <__ieee754_sqrt+0x176>
 800926c:	f1c1 0420 	rsb	r4, r1, #32
 8009270:	fa22 f404 	lsr.w	r4, r2, r4
 8009274:	1e4d      	subs	r5, r1, #1
 8009276:	408a      	lsls	r2, r1
 8009278:	4323      	orrs	r3, r4
 800927a:	1b41      	subs	r1, r0, r5
 800927c:	e772      	b.n	8009164 <__ieee754_sqrt+0x58>
 800927e:	4608      	mov	r0, r1
 8009280:	e7f0      	b.n	8009264 <__ieee754_sqrt+0x158>
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	3101      	adds	r1, #1
 8009286:	e7ef      	b.n	8009268 <__ieee754_sqrt+0x15c>
 8009288:	46e0      	mov	r8, ip
 800928a:	e7aa      	b.n	80091e2 <__ieee754_sqrt+0xd6>
 800928c:	f7f6 ffca 	bl	8000224 <__adddf3>
 8009290:	e9da 8900 	ldrd	r8, r9, [sl]
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4640      	mov	r0, r8
 800929a:	4649      	mov	r1, r9
 800929c:	f7f7 fbea 	bl	8000a74 <__aeabi_dcmplt>
 80092a0:	b120      	cbz	r0, 80092ac <__ieee754_sqrt+0x1a0>
 80092a2:	1ca0      	adds	r0, r4, #2
 80092a4:	bf08      	it	eq
 80092a6:	3501      	addeq	r5, #1
 80092a8:	3402      	adds	r4, #2
 80092aa:	e7ca      	b.n	8009242 <__ieee754_sqrt+0x136>
 80092ac:	3401      	adds	r4, #1
 80092ae:	f024 0401 	bic.w	r4, r4, #1
 80092b2:	e7c6      	b.n	8009242 <__ieee754_sqrt+0x136>
 80092b4:	7ff00000 	.word	0x7ff00000
 80092b8:	20000068 	.word	0x20000068
 80092bc:	20000070 	.word	0x20000070

080092c0 <_init>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	bf00      	nop
 80092c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c6:	bc08      	pop	{r3}
 80092c8:	469e      	mov	lr, r3
 80092ca:	4770      	bx	lr

080092cc <_fini>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr
